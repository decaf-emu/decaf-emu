// This file is automatically generated.

#ifndef DECAF_NOGL
#ifndef DECAF_GLBINDING

#include "common/decaf_assert.h"
#include "common/gl.h"
#include "common/log.h"
#include "common/platform_opengl.h"

template <typename RetType, typename FuncPtrType, typename... Params>
RetType trampoline(const char *name,
                   const char *altName1,
                   const char *altName2,
                   const char *altName3,
                   FuncPtrType *funcPtr,
                   Params... params)
{
    *funcPtr = reinterpret_cast<FuncPtrType>(platform::lookupGLFunction(name));
    if (altName1 && !*funcPtr) {
        *funcPtr = reinterpret_cast<FuncPtrType>(platform::lookupGLFunction(altName1));
    }
    if (altName2 && !*funcPtr) {
        *funcPtr = reinterpret_cast<FuncPtrType>(platform::lookupGLFunction(altName2));
    }
    if (altName3 && !*funcPtr) {
        *funcPtr = reinterpret_cast<FuncPtrType>(platform::lookupGLFunction(altName3));
    }
    decaf_assert(*funcPtr, fmt::format("Failed to look up {}", name));

    return (*funcPtr)(params...);
}

static void wrap_glAccum(GLenum op, GLfloat value);
static void (APIENTRYP pglAccum)(GLenum op, GLfloat value) = wrap_glAccum;
static void wrap_glAccum(GLenum op, GLfloat value) {return trampoline<void>("glAccum", nullptr, nullptr, nullptr, &pglAccum, op, value);}
extern "C" void APIENTRY glAccum(GLenum op, GLfloat value) {return (*pglAccum)(op, value);}
static void wrap_glAccumx(GLenum op, GLfixed value);
static void (APIENTRYP pglAccumx)(GLenum op, GLfixed value) = wrap_glAccumx;
static void wrap_glAccumx(GLenum op, GLfixed value) {return trampoline<void>("glAccumx", "glAccumxOES", nullptr, nullptr, &pglAccumx, op, value);}
extern "C" void APIENTRY glAccumx(GLenum op, GLfixed value) {return (*pglAccumx)(op, value);}
static void wrap_glActiveProgram(GLuint program);
static void (APIENTRYP pglActiveProgram)(GLuint program) = wrap_glActiveProgram;
static void wrap_glActiveProgram(GLuint program) {return trampoline<void>("glActiveProgram", "glActiveProgramEXT", nullptr, nullptr, &pglActiveProgram, program);}
extern "C" void APIENTRY glActiveProgram(GLuint program) {return (*pglActiveProgram)(program);}
static void wrap_glActiveShaderProgram(GLuint pipeline, GLuint program);
static void (APIENTRYP pglActiveShaderProgram)(GLuint pipeline, GLuint program) = wrap_glActiveShaderProgram;
static void wrap_glActiveShaderProgram(GLuint pipeline, GLuint program) {return trampoline<void>("glActiveShaderProgram", nullptr, nullptr, nullptr, &pglActiveShaderProgram, pipeline, program);}
extern "C" void APIENTRY glActiveShaderProgram(GLuint pipeline, GLuint program) {return (*pglActiveShaderProgram)(pipeline, program);}
static void wrap_glActiveStencilFace(GLenum face);
static void (APIENTRYP pglActiveStencilFace)(GLenum face) = wrap_glActiveStencilFace;
static void wrap_glActiveStencilFace(GLenum face) {return trampoline<void>("glActiveStencilFace", "glActiveStencilFaceEXT", nullptr, nullptr, &pglActiveStencilFace, face);}
extern "C" void APIENTRY glActiveStencilFace(GLenum face) {return (*pglActiveStencilFace)(face);}
static void wrap_glActiveTexture(GLenum texture);
static void (APIENTRYP pglActiveTexture)(GLenum texture) = wrap_glActiveTexture;
static void wrap_glActiveTexture(GLenum texture) {return trampoline<void>("glActiveTexture", "glActiveTextureARB", "glActiveTextureARB", nullptr, &pglActiveTexture, texture);}
extern "C" void APIENTRY glActiveTexture(GLenum texture) {return (*pglActiveTexture)(texture);}
static void wrap_glActiveVarying(GLuint program, const GLchar *name);
static void (APIENTRYP pglActiveVarying)(GLuint program, const GLchar *name) = wrap_glActiveVarying;
static void wrap_glActiveVarying(GLuint program, const GLchar *name) {return trampoline<void>("glActiveVarying", "glActiveVaryingNV", nullptr, nullptr, &pglActiveVarying, program, name);}
extern "C" void APIENTRY glActiveVarying(GLuint program, const GLchar *name) {return (*pglActiveVarying)(program, name);}
static void wrap_glAlphaFragmentOp1(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
static void (APIENTRYP pglAlphaFragmentOp1)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) = wrap_glAlphaFragmentOp1;
static void wrap_glAlphaFragmentOp1(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {return trampoline<void>("glAlphaFragmentOp1", "glAlphaFragmentOp1ATI", nullptr, nullptr, &pglAlphaFragmentOp1, op, dst, dstMod, arg1, arg1Rep, arg1Mod);}
extern "C" void APIENTRY glAlphaFragmentOp1(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {return (*pglAlphaFragmentOp1)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);}
static void wrap_glAlphaFragmentOp2(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
static void (APIENTRYP pglAlphaFragmentOp2)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) = wrap_glAlphaFragmentOp2;
static void wrap_glAlphaFragmentOp2(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {return trampoline<void>("glAlphaFragmentOp2", "glAlphaFragmentOp2ATI", nullptr, nullptr, &pglAlphaFragmentOp2, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);}
extern "C" void APIENTRY glAlphaFragmentOp2(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {return (*pglAlphaFragmentOp2)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);}
static void wrap_glAlphaFragmentOp3(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
static void (APIENTRYP pglAlphaFragmentOp3)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) = wrap_glAlphaFragmentOp3;
static void wrap_glAlphaFragmentOp3(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {return trampoline<void>("glAlphaFragmentOp3", "glAlphaFragmentOp3ATI", nullptr, nullptr, &pglAlphaFragmentOp3, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);}
extern "C" void APIENTRY glAlphaFragmentOp3(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {return (*pglAlphaFragmentOp3)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);}
static void wrap_glAlphaFunc(GLenum func, GLclampf ref);
static void (APIENTRYP pglAlphaFunc)(GLenum func, GLclampf ref) = wrap_glAlphaFunc;
static void wrap_glAlphaFunc(GLenum func, GLclampf ref) {return trampoline<void>("glAlphaFunc", nullptr, nullptr, nullptr, &pglAlphaFunc, func, ref);}
extern "C" void APIENTRY glAlphaFunc(GLenum func, GLclampf ref) {return (*pglAlphaFunc)(func, ref);}
static void wrap_glAlphaFuncx(GLenum func, GLfixed ref);
static void (APIENTRYP pglAlphaFuncx)(GLenum func, GLfixed ref) = wrap_glAlphaFuncx;
static void wrap_glAlphaFuncx(GLenum func, GLfixed ref) {return trampoline<void>("glAlphaFuncx", "glAlphaFuncxOES", nullptr, nullptr, &pglAlphaFuncx, func, ref);}
extern "C" void APIENTRY glAlphaFuncx(GLenum func, GLfixed ref) {return (*pglAlphaFuncx)(func, ref);}
static void wrap_glApplyFramebufferAttachmentCMAA(void);
static void (APIENTRYP pglApplyFramebufferAttachmentCMAA)(void) = wrap_glApplyFramebufferAttachmentCMAA;
static void wrap_glApplyFramebufferAttachmentCMAA(void) {return trampoline<void>("glApplyFramebufferAttachmentCMAA", "glApplyFramebufferAttachmentCMAAINTEL", nullptr, nullptr, &pglApplyFramebufferAttachmentCMAA);}
extern "C" void APIENTRY glApplyFramebufferAttachmentCMAA(void) {return (*pglApplyFramebufferAttachmentCMAA)();}
static void wrap_glApplyTexture(GLenum mode);
static void (APIENTRYP pglApplyTexture)(GLenum mode) = wrap_glApplyTexture;
static void wrap_glApplyTexture(GLenum mode) {return trampoline<void>("glApplyTexture", "glApplyTextureEXT", nullptr, nullptr, &pglApplyTexture, mode);}
extern "C" void APIENTRY glApplyTexture(GLenum mode) {return (*pglApplyTexture)(mode);}
static GLboolean wrap_glAreProgramsResident(GLsizei n, const GLuint *programs, GLboolean *residences);
static GLboolean (APIENTRYP pglAreProgramsResident)(GLsizei n, const GLuint *programs, GLboolean *residences) = wrap_glAreProgramsResident;
static GLboolean wrap_glAreProgramsResident(GLsizei n, const GLuint *programs, GLboolean *residences) {return trampoline<GLboolean>("glAreProgramsResident", "glAreProgramsResidentNV", nullptr, nullptr, &pglAreProgramsResident, n, programs, residences);}
extern "C" GLboolean APIENTRY glAreProgramsResident(GLsizei n, const GLuint *programs, GLboolean *residences) {return (*pglAreProgramsResident)(n, programs, residences);}
static GLboolean wrap_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences);
static GLboolean (APIENTRYP pglAreTexturesResident)(GLsizei n, const GLuint *textures, GLboolean *residences) = wrap_glAreTexturesResident;
static GLboolean wrap_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {return trampoline<GLboolean>("glAreTexturesResident", "glAreTexturesResidentEXT", nullptr, nullptr, &pglAreTexturesResident, n, textures, residences);}
extern "C" GLboolean APIENTRY glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {return (*pglAreTexturesResident)(n, textures, residences);}
static void wrap_glArrayElement(GLint i);
static void (APIENTRYP pglArrayElement)(GLint i) = wrap_glArrayElement;
static void wrap_glArrayElement(GLint i) {return trampoline<void>("glArrayElement", "glArrayElementEXT", nullptr, nullptr, &pglArrayElement, i);}
extern "C" void APIENTRY glArrayElement(GLint i) {return (*pglArrayElement)(i);}
static void wrap_glArrayObject(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
static void (APIENTRYP pglArrayObject)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) = wrap_glArrayObject;
static void wrap_glArrayObject(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {return trampoline<void>("glArrayObject", "glArrayObjectATI", nullptr, nullptr, &pglArrayObject, array, size, type, stride, buffer, offset);}
extern "C" void APIENTRY glArrayObject(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {return (*pglArrayObject)(array, size, type, stride, buffer, offset);}
static void wrap_glAsyncMarker(GLuint marker);
static void (APIENTRYP pglAsyncMarker)(GLuint marker) = wrap_glAsyncMarker;
static void wrap_glAsyncMarker(GLuint marker) {return trampoline<void>("glAsyncMarker", "glAsyncMarkerSGIX", nullptr, nullptr, &pglAsyncMarker, marker);}
extern "C" void APIENTRY glAsyncMarker(GLuint marker) {return (*pglAsyncMarker)(marker);}
static void wrap_glAttachObject(GLhandleARB containerObj, GLhandleARB obj);
static void (APIENTRYP pglAttachObject)(GLhandleARB containerObj, GLhandleARB obj) = wrap_glAttachObject;
static void wrap_glAttachObject(GLhandleARB containerObj, GLhandleARB obj) {return trampoline<void>("glAttachObject", "glAttachObjectARB", nullptr, nullptr, &pglAttachObject, containerObj, obj);}
extern "C" void APIENTRY glAttachObject(GLhandleARB containerObj, GLhandleARB obj) {return (*pglAttachObject)(containerObj, obj);}
static void wrap_glAttachShader(GLuint program, GLuint shader);
static void (APIENTRYP pglAttachShader)(GLuint program, GLuint shader) = wrap_glAttachShader;
static void wrap_glAttachShader(GLuint program, GLuint shader) {return trampoline<void>("glAttachShader", nullptr, nullptr, nullptr, &pglAttachShader, program, shader);}
extern "C" void APIENTRY glAttachShader(GLuint program, GLuint shader) {return (*pglAttachShader)(program, shader);}
static void wrap_glBegin(GLenum mode);
static void (APIENTRYP pglBegin)(GLenum mode) = wrap_glBegin;
static void wrap_glBegin(GLenum mode) {return trampoline<void>("glBegin", nullptr, nullptr, nullptr, &pglBegin, mode);}
extern "C" void APIENTRY glBegin(GLenum mode) {return (*pglBegin)(mode);}
static void wrap_glBeginConditionalRender(GLuint id, GLenum mode);
static void (APIENTRYP pglBeginConditionalRender)(GLuint id, GLenum mode) = wrap_glBeginConditionalRender;
static void wrap_glBeginConditionalRender(GLuint id, GLenum mode) {return trampoline<void>("glBeginConditionalRender", "glBeginConditionalRenderNVX", "glBeginConditionalRenderNV", nullptr, &pglBeginConditionalRender, id, mode);}
extern "C" void APIENTRY glBeginConditionalRender(GLuint id, GLenum mode) {return (*pglBeginConditionalRender)(id, mode);}
static void wrap_glBeginFragmentShader(void);
static void (APIENTRYP pglBeginFragmentShader)(void) = wrap_glBeginFragmentShader;
static void wrap_glBeginFragmentShader(void) {return trampoline<void>("glBeginFragmentShader", "glBeginFragmentShaderATI", nullptr, nullptr, &pglBeginFragmentShader);}
extern "C" void APIENTRY glBeginFragmentShader(void) {return (*pglBeginFragmentShader)();}
static void wrap_glBeginOcclusionQuery(GLuint id);
static void (APIENTRYP pglBeginOcclusionQuery)(GLuint id) = wrap_glBeginOcclusionQuery;
static void wrap_glBeginOcclusionQuery(GLuint id) {return trampoline<void>("glBeginOcclusionQuery", "glBeginOcclusionQueryNV", nullptr, nullptr, &pglBeginOcclusionQuery, id);}
extern "C" void APIENTRY glBeginOcclusionQuery(GLuint id) {return (*pglBeginOcclusionQuery)(id);}
static void wrap_glBeginPerfMonitor(GLuint monitor);
static void (APIENTRYP pglBeginPerfMonitor)(GLuint monitor) = wrap_glBeginPerfMonitor;
static void wrap_glBeginPerfMonitor(GLuint monitor) {return trampoline<void>("glBeginPerfMonitor", "glBeginPerfMonitorAMD", nullptr, nullptr, &pglBeginPerfMonitor, monitor);}
extern "C" void APIENTRY glBeginPerfMonitor(GLuint monitor) {return (*pglBeginPerfMonitor)(monitor);}
static void wrap_glBeginPerfQuery(GLuint queryHandle);
static void (APIENTRYP pglBeginPerfQuery)(GLuint queryHandle) = wrap_glBeginPerfQuery;
static void wrap_glBeginPerfQuery(GLuint queryHandle) {return trampoline<void>("glBeginPerfQuery", "glBeginPerfQueryINTEL", nullptr, nullptr, &pglBeginPerfQuery, queryHandle);}
extern "C" void APIENTRY glBeginPerfQuery(GLuint queryHandle) {return (*pglBeginPerfQuery)(queryHandle);}
static void wrap_glBeginQuery(GLenum target, GLuint id);
static void (APIENTRYP pglBeginQuery)(GLenum target, GLuint id) = wrap_glBeginQuery;
static void wrap_glBeginQuery(GLenum target, GLuint id) {return trampoline<void>("glBeginQuery", "glBeginQueryARB", nullptr, nullptr, &pglBeginQuery, target, id);}
extern "C" void APIENTRY glBeginQuery(GLenum target, GLuint id) {return (*pglBeginQuery)(target, id);}
static void wrap_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
static void (APIENTRYP pglBeginQueryIndexed)(GLenum target, GLuint index, GLuint id) = wrap_glBeginQueryIndexed;
static void wrap_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {return trampoline<void>("glBeginQueryIndexed", nullptr, nullptr, nullptr, &pglBeginQueryIndexed, target, index, id);}
extern "C" void APIENTRY glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {return (*pglBeginQueryIndexed)(target, index, id);}
static void wrap_glBeginTransformFeedback(GLenum primitiveMode);
static void (APIENTRYP pglBeginTransformFeedback)(GLenum primitiveMode) = wrap_glBeginTransformFeedback;
static void wrap_glBeginTransformFeedback(GLenum primitiveMode) {return trampoline<void>("glBeginTransformFeedback", "glBeginTransformFeedbackEXT", "glBeginTransformFeedbackNV", nullptr, &pglBeginTransformFeedback, primitiveMode);}
extern "C" void APIENTRY glBeginTransformFeedback(GLenum primitiveMode) {return (*pglBeginTransformFeedback)(primitiveMode);}
static void wrap_glBeginVertexShader(void);
static void (APIENTRYP pglBeginVertexShader)(void) = wrap_glBeginVertexShader;
static void wrap_glBeginVertexShader(void) {return trampoline<void>("glBeginVertexShader", "glBeginVertexShaderEXT", nullptr, nullptr, &pglBeginVertexShader);}
extern "C" void APIENTRY glBeginVertexShader(void) {return (*pglBeginVertexShader)();}
static void wrap_glBeginVideoCapture(GLuint video_capture_slot);
static void (APIENTRYP pglBeginVideoCapture)(GLuint video_capture_slot) = wrap_glBeginVideoCapture;
static void wrap_glBeginVideoCapture(GLuint video_capture_slot) {return trampoline<void>("glBeginVideoCapture", "glBeginVideoCaptureNV", nullptr, nullptr, &pglBeginVideoCapture, video_capture_slot);}
extern "C" void APIENTRY glBeginVideoCapture(GLuint video_capture_slot) {return (*pglBeginVideoCapture)(video_capture_slot);}
static void wrap_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
static void (APIENTRYP pglBindAttribLocation)(GLuint program, GLuint index, const GLchar *name) = wrap_glBindAttribLocation;
static void wrap_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {return trampoline<void>("glBindAttribLocation", "glBindAttribLocationARB", nullptr, nullptr, &pglBindAttribLocation, program, index, name);}
extern "C" void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {return (*pglBindAttribLocation)(program, index, name);}
static void wrap_glBindBuffer(GLenum target, GLuint buffer);
static void (APIENTRYP pglBindBuffer)(GLenum target, GLuint buffer) = wrap_glBindBuffer;
static void wrap_glBindBuffer(GLenum target, GLuint buffer) {return trampoline<void>("glBindBuffer", "glBindBufferARB", nullptr, nullptr, &pglBindBuffer, target, buffer);}
extern "C" void APIENTRY glBindBuffer(GLenum target, GLuint buffer) {return (*pglBindBuffer)(target, buffer);}
static void wrap_glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
static void (APIENTRYP pglBindBufferBase)(GLenum target, GLuint index, GLuint buffer) = wrap_glBindBufferBase;
static void wrap_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {return trampoline<void>("glBindBufferBase", "glBindBufferBaseEXT", "glBindBufferBaseNV", nullptr, &pglBindBufferBase, target, index, buffer);}
extern "C" void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {return (*pglBindBufferBase)(target, index, buffer);}
static void wrap_glBindBufferOffset(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
static void (APIENTRYP pglBindBufferOffset)(GLenum target, GLuint index, GLuint buffer, GLintptr offset) = wrap_glBindBufferOffset;
static void wrap_glBindBufferOffset(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {return trampoline<void>("glBindBufferOffset", "glBindBufferOffsetEXT", "glBindBufferOffsetNV", nullptr, &pglBindBufferOffset, target, index, buffer, offset);}
extern "C" void APIENTRY glBindBufferOffset(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {return (*pglBindBufferOffset)(target, index, buffer, offset);}
static void wrap_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
static void (APIENTRYP pglBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = wrap_glBindBufferRange;
static void wrap_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {return trampoline<void>("glBindBufferRange", "glBindBufferRangeEXT", "glBindBufferRangeNV", nullptr, &pglBindBufferRange, target, index, buffer, offset, size);}
extern "C" void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {return (*pglBindBufferRange)(target, index, buffer, offset, size);}
static void wrap_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
static void (APIENTRYP pglBindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) = wrap_glBindBuffersBase;
static void wrap_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) {return trampoline<void>("glBindBuffersBase", nullptr, nullptr, nullptr, &pglBindBuffersBase, target, first, count, buffers);}
extern "C" void APIENTRY glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) {return (*pglBindBuffersBase)(target, first, count, buffers);}
static void wrap_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
static void (APIENTRYP pglBindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) = wrap_glBindBuffersRange;
static void wrap_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) {return trampoline<void>("glBindBuffersRange", nullptr, nullptr, nullptr, &pglBindBuffersRange, target, first, count, buffers, offsets, sizes);}
extern "C" void APIENTRY glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) {return (*pglBindBuffersRange)(target, first, count, buffers, offsets, sizes);}
static void wrap_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
static void (APIENTRYP pglBindFragDataLocation)(GLuint program, GLuint color, const GLchar *name) = wrap_glBindFragDataLocation;
static void wrap_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {return trampoline<void>("glBindFragDataLocation", "glBindFragDataLocationEXT", nullptr, nullptr, &pglBindFragDataLocation, program, color, name);}
extern "C" void APIENTRY glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {return (*pglBindFragDataLocation)(program, color, name);}
static void wrap_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
static void (APIENTRYP pglBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) = wrap_glBindFragDataLocationIndexed;
static void wrap_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {return trampoline<void>("glBindFragDataLocationIndexed", nullptr, nullptr, nullptr, &pglBindFragDataLocationIndexed, program, colorNumber, index, name);}
extern "C" void APIENTRY glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {return (*pglBindFragDataLocationIndexed)(program, colorNumber, index, name);}
static void wrap_glBindFragmentShader(GLuint id);
static void (APIENTRYP pglBindFragmentShader)(GLuint id) = wrap_glBindFragmentShader;
static void wrap_glBindFragmentShader(GLuint id) {return trampoline<void>("glBindFragmentShader", "glBindFragmentShaderATI", nullptr, nullptr, &pglBindFragmentShader, id);}
extern "C" void APIENTRY glBindFragmentShader(GLuint id) {return (*pglBindFragmentShader)(id);}
static void wrap_glBindFramebuffer(GLenum target, GLuint framebuffer);
static void (APIENTRYP pglBindFramebuffer)(GLenum target, GLuint framebuffer) = wrap_glBindFramebuffer;
static void wrap_glBindFramebuffer(GLenum target, GLuint framebuffer) {return trampoline<void>("glBindFramebuffer", "glBindFramebufferEXT", nullptr, nullptr, &pglBindFramebuffer, target, framebuffer);}
extern "C" void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer) {return (*pglBindFramebuffer)(target, framebuffer);}
static void wrap_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
static void (APIENTRYP pglBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) = wrap_glBindImageTexture;
static void wrap_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {return trampoline<void>("glBindImageTexture", "glBindImageTextureEXT", nullptr, nullptr, &pglBindImageTexture, unit, texture, level, layered, layer, access, format);}
extern "C" void APIENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {return (*pglBindImageTexture)(unit, texture, level, layered, layer, access, format);}
static void wrap_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
static void (APIENTRYP pglBindImageTextures)(GLuint first, GLsizei count, const GLuint *textures) = wrap_glBindImageTextures;
static void wrap_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) {return trampoline<void>("glBindImageTextures", nullptr, nullptr, nullptr, &pglBindImageTextures, first, count, textures);}
extern "C" void APIENTRY glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) {return (*pglBindImageTextures)(first, count, textures);}
static GLuint wrap_glBindLightParameter(GLenum light, GLenum value);
static GLuint (APIENTRYP pglBindLightParameter)(GLenum light, GLenum value) = wrap_glBindLightParameter;
static GLuint wrap_glBindLightParameter(GLenum light, GLenum value) {return trampoline<GLuint>("glBindLightParameter", "glBindLightParameterEXT", nullptr, nullptr, &pglBindLightParameter, light, value);}
extern "C" GLuint APIENTRY glBindLightParameter(GLenum light, GLenum value) {return (*pglBindLightParameter)(light, value);}
static GLuint wrap_glBindMaterialParameter(GLenum face, GLenum value);
static GLuint (APIENTRYP pglBindMaterialParameter)(GLenum face, GLenum value) = wrap_glBindMaterialParameter;
static GLuint wrap_glBindMaterialParameter(GLenum face, GLenum value) {return trampoline<GLuint>("glBindMaterialParameter", "glBindMaterialParameterEXT", nullptr, nullptr, &pglBindMaterialParameter, face, value);}
extern "C" GLuint APIENTRY glBindMaterialParameter(GLenum face, GLenum value) {return (*pglBindMaterialParameter)(face, value);}
static void wrap_glBindMultiTexture(GLenum texunit, GLenum target, GLuint texture);
static void (APIENTRYP pglBindMultiTexture)(GLenum texunit, GLenum target, GLuint texture) = wrap_glBindMultiTexture;
static void wrap_glBindMultiTexture(GLenum texunit, GLenum target, GLuint texture) {return trampoline<void>("glBindMultiTexture", "glBindMultiTextureEXT", nullptr, nullptr, &pglBindMultiTexture, texunit, target, texture);}
extern "C" void APIENTRY glBindMultiTexture(GLenum texunit, GLenum target, GLuint texture) {return (*pglBindMultiTexture)(texunit, target, texture);}
static GLuint wrap_glBindParameter(GLenum value);
static GLuint (APIENTRYP pglBindParameter)(GLenum value) = wrap_glBindParameter;
static GLuint wrap_glBindParameter(GLenum value) {return trampoline<GLuint>("glBindParameter", "glBindParameterEXT", nullptr, nullptr, &pglBindParameter, value);}
extern "C" GLuint APIENTRY glBindParameter(GLenum value) {return (*pglBindParameter)(value);}
static void wrap_glBindProgram(GLenum target, GLuint program);
static void (APIENTRYP pglBindProgram)(GLenum target, GLuint program) = wrap_glBindProgram;
static void wrap_glBindProgram(GLenum target, GLuint program) {return trampoline<void>("glBindProgram", "glBindProgramARB", "glBindProgramNV", nullptr, &pglBindProgram, target, program);}
extern "C" void APIENTRY glBindProgram(GLenum target, GLuint program) {return (*pglBindProgram)(target, program);}
static void wrap_glBindProgramPipeline(GLuint pipeline);
static void (APIENTRYP pglBindProgramPipeline)(GLuint pipeline) = wrap_glBindProgramPipeline;
static void wrap_glBindProgramPipeline(GLuint pipeline) {return trampoline<void>("glBindProgramPipeline", nullptr, nullptr, nullptr, &pglBindProgramPipeline, pipeline);}
extern "C" void APIENTRY glBindProgramPipeline(GLuint pipeline) {return (*pglBindProgramPipeline)(pipeline);}
static void wrap_glBindRenderbuffer(GLenum target, GLuint renderbuffer);
static void (APIENTRYP pglBindRenderbuffer)(GLenum target, GLuint renderbuffer) = wrap_glBindRenderbuffer;
static void wrap_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {return trampoline<void>("glBindRenderbuffer", "glBindRenderbufferEXT", nullptr, nullptr, &pglBindRenderbuffer, target, renderbuffer);}
extern "C" void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer) {return (*pglBindRenderbuffer)(target, renderbuffer);}
static void wrap_glBindSampler(GLuint unit, GLuint sampler);
static void (APIENTRYP pglBindSampler)(GLuint unit, GLuint sampler) = wrap_glBindSampler;
static void wrap_glBindSampler(GLuint unit, GLuint sampler) {return trampoline<void>("glBindSampler", nullptr, nullptr, nullptr, &pglBindSampler, unit, sampler);}
extern "C" void APIENTRY glBindSampler(GLuint unit, GLuint sampler) {return (*pglBindSampler)(unit, sampler);}
static void wrap_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
static void (APIENTRYP pglBindSamplers)(GLuint first, GLsizei count, const GLuint *samplers) = wrap_glBindSamplers;
static void wrap_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) {return trampoline<void>("glBindSamplers", nullptr, nullptr, nullptr, &pglBindSamplers, first, count, samplers);}
extern "C" void APIENTRY glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) {return (*pglBindSamplers)(first, count, samplers);}
static GLuint wrap_glBindTexGenParameter(GLenum unit, GLenum coord, GLenum value);
static GLuint (APIENTRYP pglBindTexGenParameter)(GLenum unit, GLenum coord, GLenum value) = wrap_glBindTexGenParameter;
static GLuint wrap_glBindTexGenParameter(GLenum unit, GLenum coord, GLenum value) {return trampoline<GLuint>("glBindTexGenParameter", "glBindTexGenParameterEXT", nullptr, nullptr, &pglBindTexGenParameter, unit, coord, value);}
extern "C" GLuint APIENTRY glBindTexGenParameter(GLenum unit, GLenum coord, GLenum value) {return (*pglBindTexGenParameter)(unit, coord, value);}
static void wrap_glBindTexture(GLenum target, GLuint texture);
static void (APIENTRYP pglBindTexture)(GLenum target, GLuint texture) = wrap_glBindTexture;
static void wrap_glBindTexture(GLenum target, GLuint texture) {return trampoline<void>("glBindTexture", "glBindTextureEXT", nullptr, nullptr, &pglBindTexture, target, texture);}
extern "C" void APIENTRY glBindTexture(GLenum target, GLuint texture) {return (*pglBindTexture)(target, texture);}
static void wrap_glBindTextureUnit(GLuint unit, GLuint texture);
static void (APIENTRYP pglBindTextureUnit)(GLuint unit, GLuint texture) = wrap_glBindTextureUnit;
static void wrap_glBindTextureUnit(GLuint unit, GLuint texture) {return trampoline<void>("glBindTextureUnit", nullptr, nullptr, nullptr, &pglBindTextureUnit, unit, texture);}
extern "C" void APIENTRY glBindTextureUnit(GLuint unit, GLuint texture) {return (*pglBindTextureUnit)(unit, texture);}
static GLuint wrap_glBindTextureUnitParameter(GLenum unit, GLenum value);
static GLuint (APIENTRYP pglBindTextureUnitParameter)(GLenum unit, GLenum value) = wrap_glBindTextureUnitParameter;
static GLuint wrap_glBindTextureUnitParameter(GLenum unit, GLenum value) {return trampoline<GLuint>("glBindTextureUnitParameter", "glBindTextureUnitParameterEXT", nullptr, nullptr, &pglBindTextureUnitParameter, unit, value);}
extern "C" GLuint APIENTRY glBindTextureUnitParameter(GLenum unit, GLenum value) {return (*pglBindTextureUnitParameter)(unit, value);}
static void wrap_glBindTextures(GLuint first, GLsizei count, const GLuint *textures);
static void (APIENTRYP pglBindTextures)(GLuint first, GLsizei count, const GLuint *textures) = wrap_glBindTextures;
static void wrap_glBindTextures(GLuint first, GLsizei count, const GLuint *textures) {return trampoline<void>("glBindTextures", nullptr, nullptr, nullptr, &pglBindTextures, first, count, textures);}
extern "C" void APIENTRY glBindTextures(GLuint first, GLsizei count, const GLuint *textures) {return (*pglBindTextures)(first, count, textures);}
static void wrap_glBindTransformFeedback(GLenum target, GLuint id);
static void (APIENTRYP pglBindTransformFeedback)(GLenum target, GLuint id) = wrap_glBindTransformFeedback;
static void wrap_glBindTransformFeedback(GLenum target, GLuint id) {return trampoline<void>("glBindTransformFeedback", "glBindTransformFeedbackNV", nullptr, nullptr, &pglBindTransformFeedback, target, id);}
extern "C" void APIENTRY glBindTransformFeedback(GLenum target, GLuint id) {return (*pglBindTransformFeedback)(target, id);}
static void wrap_glBindVertexArray(GLuint array);
static void (APIENTRYP pglBindVertexArray)(GLuint array) = wrap_glBindVertexArray;
static void wrap_glBindVertexArray(GLuint array) {return trampoline<void>("glBindVertexArray", "glBindVertexArrayAPPLE", nullptr, nullptr, &pglBindVertexArray, array);}
extern "C" void APIENTRY glBindVertexArray(GLuint array) {return (*pglBindVertexArray)(array);}
static void wrap_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
static void (APIENTRYP pglBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = wrap_glBindVertexBuffer;
static void wrap_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {return trampoline<void>("glBindVertexBuffer", nullptr, nullptr, nullptr, &pglBindVertexBuffer, bindingindex, buffer, offset, stride);}
extern "C" void APIENTRY glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {return (*pglBindVertexBuffer)(bindingindex, buffer, offset, stride);}
static void wrap_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
static void (APIENTRYP pglBindVertexBuffers)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) = wrap_glBindVertexBuffers;
static void wrap_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {return trampoline<void>("glBindVertexBuffers", nullptr, nullptr, nullptr, &pglBindVertexBuffers, first, count, buffers, offsets, strides);}
extern "C" void APIENTRY glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {return (*pglBindVertexBuffers)(first, count, buffers, offsets, strides);}
static void wrap_glBindVertexShader(GLuint id);
static void (APIENTRYP pglBindVertexShader)(GLuint id) = wrap_glBindVertexShader;
static void wrap_glBindVertexShader(GLuint id) {return trampoline<void>("glBindVertexShader", "glBindVertexShaderEXT", nullptr, nullptr, &pglBindVertexShader, id);}
extern "C" void APIENTRY glBindVertexShader(GLuint id) {return (*pglBindVertexShader)(id);}
static void wrap_glBindVideoCaptureStreamBuffer(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
static void (APIENTRYP pglBindVideoCaptureStreamBuffer)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) = wrap_glBindVideoCaptureStreamBuffer;
static void wrap_glBindVideoCaptureStreamBuffer(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {return trampoline<void>("glBindVideoCaptureStreamBuffer", "glBindVideoCaptureStreamBufferNV", nullptr, nullptr, &pglBindVideoCaptureStreamBuffer, video_capture_slot, stream, frame_region, offset);}
extern "C" void APIENTRY glBindVideoCaptureStreamBuffer(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {return (*pglBindVideoCaptureStreamBuffer)(video_capture_slot, stream, frame_region, offset);}
static void wrap_glBindVideoCaptureStreamTexture(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
static void (APIENTRYP pglBindVideoCaptureStreamTexture)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) = wrap_glBindVideoCaptureStreamTexture;
static void wrap_glBindVideoCaptureStreamTexture(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {return trampoline<void>("glBindVideoCaptureStreamTexture", "glBindVideoCaptureStreamTextureNV", nullptr, nullptr, &pglBindVideoCaptureStreamTexture, video_capture_slot, stream, frame_region, target, texture);}
extern "C" void APIENTRY glBindVideoCaptureStreamTexture(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {return (*pglBindVideoCaptureStreamTexture)(video_capture_slot, stream, frame_region, target, texture);}
static void wrap_glBinormal3b(GLbyte bx, GLbyte by, GLbyte bz);
static void (APIENTRYP pglBinormal3b)(GLbyte bx, GLbyte by, GLbyte bz) = wrap_glBinormal3b;
static void wrap_glBinormal3b(GLbyte bx, GLbyte by, GLbyte bz) {return trampoline<void>("glBinormal3b", "glBinormal3bEXT", nullptr, nullptr, &pglBinormal3b, bx, by, bz);}
extern "C" void APIENTRY glBinormal3b(GLbyte bx, GLbyte by, GLbyte bz) {return (*pglBinormal3b)(bx, by, bz);}
static void wrap_glBinormal3bv(const GLbyte *v);
static void (APIENTRYP pglBinormal3bv)(const GLbyte *v) = wrap_glBinormal3bv;
static void wrap_glBinormal3bv(const GLbyte *v) {return trampoline<void>("glBinormal3bv", "glBinormal3bvEXT", nullptr, nullptr, &pglBinormal3bv, v);}
extern "C" void APIENTRY glBinormal3bv(const GLbyte *v) {return (*pglBinormal3bv)(v);}
static void wrap_glBinormal3d(GLdouble bx, GLdouble by, GLdouble bz);
static void (APIENTRYP pglBinormal3d)(GLdouble bx, GLdouble by, GLdouble bz) = wrap_glBinormal3d;
static void wrap_glBinormal3d(GLdouble bx, GLdouble by, GLdouble bz) {return trampoline<void>("glBinormal3d", "glBinormal3dEXT", nullptr, nullptr, &pglBinormal3d, bx, by, bz);}
extern "C" void APIENTRY glBinormal3d(GLdouble bx, GLdouble by, GLdouble bz) {return (*pglBinormal3d)(bx, by, bz);}
static void wrap_glBinormal3dv(const GLdouble *v);
static void (APIENTRYP pglBinormal3dv)(const GLdouble *v) = wrap_glBinormal3dv;
static void wrap_glBinormal3dv(const GLdouble *v) {return trampoline<void>("glBinormal3dv", "glBinormal3dvEXT", nullptr, nullptr, &pglBinormal3dv, v);}
extern "C" void APIENTRY glBinormal3dv(const GLdouble *v) {return (*pglBinormal3dv)(v);}
static void wrap_glBinormal3f(GLfloat bx, GLfloat by, GLfloat bz);
static void (APIENTRYP pglBinormal3f)(GLfloat bx, GLfloat by, GLfloat bz) = wrap_glBinormal3f;
static void wrap_glBinormal3f(GLfloat bx, GLfloat by, GLfloat bz) {return trampoline<void>("glBinormal3f", "glBinormal3fEXT", nullptr, nullptr, &pglBinormal3f, bx, by, bz);}
extern "C" void APIENTRY glBinormal3f(GLfloat bx, GLfloat by, GLfloat bz) {return (*pglBinormal3f)(bx, by, bz);}
static void wrap_glBinormal3fv(const GLfloat *v);
static void (APIENTRYP pglBinormal3fv)(const GLfloat *v) = wrap_glBinormal3fv;
static void wrap_glBinormal3fv(const GLfloat *v) {return trampoline<void>("glBinormal3fv", "glBinormal3fvEXT", nullptr, nullptr, &pglBinormal3fv, v);}
extern "C" void APIENTRY glBinormal3fv(const GLfloat *v) {return (*pglBinormal3fv)(v);}
static void wrap_glBinormal3i(GLint bx, GLint by, GLint bz);
static void (APIENTRYP pglBinormal3i)(GLint bx, GLint by, GLint bz) = wrap_glBinormal3i;
static void wrap_glBinormal3i(GLint bx, GLint by, GLint bz) {return trampoline<void>("glBinormal3i", "glBinormal3iEXT", nullptr, nullptr, &pglBinormal3i, bx, by, bz);}
extern "C" void APIENTRY glBinormal3i(GLint bx, GLint by, GLint bz) {return (*pglBinormal3i)(bx, by, bz);}
static void wrap_glBinormal3iv(const GLint *v);
static void (APIENTRYP pglBinormal3iv)(const GLint *v) = wrap_glBinormal3iv;
static void wrap_glBinormal3iv(const GLint *v) {return trampoline<void>("glBinormal3iv", "glBinormal3ivEXT", nullptr, nullptr, &pglBinormal3iv, v);}
extern "C" void APIENTRY glBinormal3iv(const GLint *v) {return (*pglBinormal3iv)(v);}
static void wrap_glBinormal3s(GLshort bx, GLshort by, GLshort bz);
static void (APIENTRYP pglBinormal3s)(GLshort bx, GLshort by, GLshort bz) = wrap_glBinormal3s;
static void wrap_glBinormal3s(GLshort bx, GLshort by, GLshort bz) {return trampoline<void>("glBinormal3s", "glBinormal3sEXT", nullptr, nullptr, &pglBinormal3s, bx, by, bz);}
extern "C" void APIENTRY glBinormal3s(GLshort bx, GLshort by, GLshort bz) {return (*pglBinormal3s)(bx, by, bz);}
static void wrap_glBinormal3sv(const GLshort *v);
static void (APIENTRYP pglBinormal3sv)(const GLshort *v) = wrap_glBinormal3sv;
static void wrap_glBinormal3sv(const GLshort *v) {return trampoline<void>("glBinormal3sv", "glBinormal3svEXT", nullptr, nullptr, &pglBinormal3sv, v);}
extern "C" void APIENTRY glBinormal3sv(const GLshort *v) {return (*pglBinormal3sv)(v);}
static void wrap_glBinormalPointer(GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglBinormalPointer)(GLenum type, GLsizei stride, const void *pointer) = wrap_glBinormalPointer;
static void wrap_glBinormalPointer(GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glBinormalPointer", "glBinormalPointerEXT", nullptr, nullptr, &pglBinormalPointer, type, stride, pointer);}
extern "C" void APIENTRY glBinormalPointer(GLenum type, GLsizei stride, const void *pointer) {return (*pglBinormalPointer)(type, stride, pointer);}
static void wrap_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
static void (APIENTRYP pglBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) = wrap_glBitmap;
static void wrap_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {return trampoline<void>("glBitmap", nullptr, nullptr, nullptr, &pglBitmap, width, height, xorig, yorig, xmove, ymove, bitmap);}
extern "C" void APIENTRY glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {return (*pglBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap);}
static void wrap_glBitmapx(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
static void (APIENTRYP pglBitmapx)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap) = wrap_glBitmapx;
static void wrap_glBitmapx(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap) {return trampoline<void>("glBitmapx", "glBitmapxOES", nullptr, nullptr, &pglBitmapx, width, height, xorig, yorig, xmove, ymove, bitmap);}
extern "C" void APIENTRY glBitmapx(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap) {return (*pglBitmapx)(width, height, xorig, yorig, xmove, ymove, bitmap);}
static void wrap_glBlendBarrier(void);
static void (APIENTRYP pglBlendBarrier)(void) = wrap_glBlendBarrier;
static void wrap_glBlendBarrier(void) {return trampoline<void>("glBlendBarrier", "glBlendBarrierKHR", "glBlendBarrierNV", nullptr, &pglBlendBarrier);}
extern "C" void APIENTRY glBlendBarrier(void) {return (*pglBlendBarrier)();}
static void wrap_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
static void (APIENTRYP pglBlendColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) = wrap_glBlendColor;
static void wrap_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {return trampoline<void>("glBlendColor", "glBlendColorEXT", nullptr, nullptr, &pglBlendColor, red, green, blue, alpha);}
extern "C" void APIENTRY glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {return (*pglBlendColor)(red, green, blue, alpha);}
static void wrap_glBlendColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
static void (APIENTRYP pglBlendColorx)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = wrap_glBlendColorx;
static void wrap_glBlendColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return trampoline<void>("glBlendColorx", "glBlendColorxOES", nullptr, nullptr, &pglBlendColorx, red, green, blue, alpha);}
extern "C" void APIENTRY glBlendColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return (*pglBlendColorx)(red, green, blue, alpha);}
static void wrap_glBlendEquation(GLenum mode);
static void (APIENTRYP pglBlendEquation)(GLenum mode) = wrap_glBlendEquation;
static void wrap_glBlendEquation(GLenum mode) {return trampoline<void>("glBlendEquation", "glBlendEquationEXT", nullptr, nullptr, &pglBlendEquation, mode);}
extern "C" void APIENTRY glBlendEquation(GLenum mode) {return (*pglBlendEquation)(mode);}
static void wrap_glBlendEquationIndexed(GLuint buf, GLenum mode);
static void (APIENTRYP pglBlendEquationIndexed)(GLuint buf, GLenum mode) = wrap_glBlendEquationIndexed;
static void wrap_glBlendEquationIndexed(GLuint buf, GLenum mode) {return trampoline<void>("glBlendEquationIndexed", "glBlendEquationIndexedAMD", nullptr, nullptr, &pglBlendEquationIndexed, buf, mode);}
extern "C" void APIENTRY glBlendEquationIndexed(GLuint buf, GLenum mode) {return (*pglBlendEquationIndexed)(buf, mode);}
static void wrap_glBlendEquationSeparate(GLenum modeRGB, GLenum modeA);
static void (APIENTRYP pglBlendEquationSeparate)(GLenum modeRGB, GLenum modeA) = wrap_glBlendEquationSeparate;
static void wrap_glBlendEquationSeparate(GLenum modeRGB, GLenum modeA) {return trampoline<void>("glBlendEquationSeparate", "glBlendEquationSeparateATI", "glBlendEquationSeparateEXT", nullptr, &pglBlendEquationSeparate, modeRGB, modeA);}
extern "C" void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeA) {return (*pglBlendEquationSeparate)(modeRGB, modeA);}
static void wrap_glBlendEquationSeparateIndexed(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
static void (APIENTRYP pglBlendEquationSeparateIndexed)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = wrap_glBlendEquationSeparateIndexed;
static void wrap_glBlendEquationSeparateIndexed(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {return trampoline<void>("glBlendEquationSeparateIndexed", "glBlendEquationSeparateIndexedAMD", nullptr, nullptr, &pglBlendEquationSeparateIndexed, buf, modeRGB, modeAlpha);}
extern "C" void APIENTRY glBlendEquationSeparateIndexed(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {return (*pglBlendEquationSeparateIndexed)(buf, modeRGB, modeAlpha);}
static void wrap_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
static void (APIENTRYP pglBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = wrap_glBlendEquationSeparatei;
static void wrap_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {return trampoline<void>("glBlendEquationSeparatei", "glBlendEquationSeparateiARB", nullptr, nullptr, &pglBlendEquationSeparatei, buf, modeRGB, modeAlpha);}
extern "C" void APIENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {return (*pglBlendEquationSeparatei)(buf, modeRGB, modeAlpha);}
static void wrap_glBlendEquationi(GLuint buf, GLenum mode);
static void (APIENTRYP pglBlendEquationi)(GLuint buf, GLenum mode) = wrap_glBlendEquationi;
static void wrap_glBlendEquationi(GLuint buf, GLenum mode) {return trampoline<void>("glBlendEquationi", "glBlendEquationiARB", nullptr, nullptr, &pglBlendEquationi, buf, mode);}
extern "C" void APIENTRY glBlendEquationi(GLuint buf, GLenum mode) {return (*pglBlendEquationi)(buf, mode);}
static void wrap_glBlendFunc(GLenum sfactor, GLenum dfactor);
static void (APIENTRYP pglBlendFunc)(GLenum sfactor, GLenum dfactor) = wrap_glBlendFunc;
static void wrap_glBlendFunc(GLenum sfactor, GLenum dfactor) {return trampoline<void>("glBlendFunc", nullptr, nullptr, nullptr, &pglBlendFunc, sfactor, dfactor);}
extern "C" void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor) {return (*pglBlendFunc)(sfactor, dfactor);}
static void wrap_glBlendFuncIndexed(GLuint buf, GLenum src, GLenum dst);
static void (APIENTRYP pglBlendFuncIndexed)(GLuint buf, GLenum src, GLenum dst) = wrap_glBlendFuncIndexed;
static void wrap_glBlendFuncIndexed(GLuint buf, GLenum src, GLenum dst) {return trampoline<void>("glBlendFuncIndexed", "glBlendFuncIndexedAMD", nullptr, nullptr, &pglBlendFuncIndexed, buf, src, dst);}
extern "C" void APIENTRY glBlendFuncIndexed(GLuint buf, GLenum src, GLenum dst) {return (*pglBlendFuncIndexed)(buf, src, dst);}
static void wrap_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
static void (APIENTRYP pglBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) = wrap_glBlendFuncSeparate;
static void wrap_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {return trampoline<void>("glBlendFuncSeparate", "glBlendFuncSeparateEXT", "glBlendFuncSeparateINGR", nullptr, &pglBlendFuncSeparate, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);}
extern "C" void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {return (*pglBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);}
static void wrap_glBlendFuncSeparateIndexed(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
static void (APIENTRYP pglBlendFuncSeparateIndexed)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = wrap_glBlendFuncSeparateIndexed;
static void wrap_glBlendFuncSeparateIndexed(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {return trampoline<void>("glBlendFuncSeparateIndexed", "glBlendFuncSeparateIndexedAMD", nullptr, nullptr, &pglBlendFuncSeparateIndexed, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
extern "C" void APIENTRY glBlendFuncSeparateIndexed(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {return (*pglBlendFuncSeparateIndexed)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
static void wrap_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
static void (APIENTRYP pglBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = wrap_glBlendFuncSeparatei;
static void wrap_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {return trampoline<void>("glBlendFuncSeparatei", "glBlendFuncSeparateiARB", nullptr, nullptr, &pglBlendFuncSeparatei, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
extern "C" void APIENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {return (*pglBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
static void wrap_glBlendFunci(GLuint buf, GLenum src, GLenum dst);
static void (APIENTRYP pglBlendFunci)(GLuint buf, GLenum src, GLenum dst) = wrap_glBlendFunci;
static void wrap_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {return trampoline<void>("glBlendFunci", "glBlendFunciARB", nullptr, nullptr, &pglBlendFunci, buf, src, dst);}
extern "C" void APIENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst) {return (*pglBlendFunci)(buf, src, dst);}
static void wrap_glBlendParameteri(GLenum pname, GLint value);
static void (APIENTRYP pglBlendParameteri)(GLenum pname, GLint value) = wrap_glBlendParameteri;
static void wrap_glBlendParameteri(GLenum pname, GLint value) {return trampoline<void>("glBlendParameteri", "glBlendParameteriNV", nullptr, nullptr, &pglBlendParameteri, pname, value);}
extern "C" void APIENTRY glBlendParameteri(GLenum pname, GLint value) {return (*pglBlendParameteri)(pname, value);}
static void wrap_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
static void (APIENTRYP pglBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = wrap_glBlitFramebuffer;
static void wrap_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {return trampoline<void>("glBlitFramebuffer", "glBlitFramebufferEXT", nullptr, nullptr, &pglBlitFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
extern "C" void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {return (*pglBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
static void wrap_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
static void (APIENTRYP pglBlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = wrap_glBlitNamedFramebuffer;
static void wrap_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {return trampoline<void>("glBlitNamedFramebuffer", nullptr, nullptr, nullptr, &pglBlitNamedFramebuffer, readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
extern "C" void APIENTRY glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {return (*pglBlitNamedFramebuffer)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
static void wrap_glBufferAddressRange(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
static void (APIENTRYP pglBufferAddressRange)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) = wrap_glBufferAddressRange;
static void wrap_glBufferAddressRange(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {return trampoline<void>("glBufferAddressRange", "glBufferAddressRangeNV", nullptr, nullptr, &pglBufferAddressRange, pname, index, address, length);}
extern "C" void APIENTRY glBufferAddressRange(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {return (*pglBufferAddressRange)(pname, index, address, length);}
static void wrap_glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
static void (APIENTRYP pglBufferData)(GLenum target, GLsizeiptr size, const void *data, GLenum usage) = wrap_glBufferData;
static void wrap_glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {return trampoline<void>("glBufferData", "glBufferDataARB", nullptr, nullptr, &pglBufferData, target, size, data, usage);}
extern "C" void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {return (*pglBufferData)(target, size, data, usage);}
static void wrap_glBufferPageCommitment(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
static void (APIENTRYP pglBufferPageCommitment)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) = wrap_glBufferPageCommitment;
static void wrap_glBufferPageCommitment(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {return trampoline<void>("glBufferPageCommitment", "glBufferPageCommitmentARB", nullptr, nullptr, &pglBufferPageCommitment, target, offset, size, commit);}
extern "C" void APIENTRY glBufferPageCommitment(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {return (*pglBufferPageCommitment)(target, offset, size, commit);}
static void wrap_glBufferParameteri(GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglBufferParameteri)(GLenum target, GLenum pname, GLint param) = wrap_glBufferParameteri;
static void wrap_glBufferParameteri(GLenum target, GLenum pname, GLint param) {return trampoline<void>("glBufferParameteri", "glBufferParameteriAPPLE", nullptr, nullptr, &pglBufferParameteri, target, pname, param);}
extern "C" void APIENTRY glBufferParameteri(GLenum target, GLenum pname, GLint param) {return (*pglBufferParameteri)(target, pname, param);}
static void wrap_glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
static void (APIENTRYP pglBufferStorage)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) = wrap_glBufferStorage;
static void wrap_glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) {return trampoline<void>("glBufferStorage", nullptr, nullptr, nullptr, &pglBufferStorage, target, size, data, flags);}
extern "C" void APIENTRY glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) {return (*pglBufferStorage)(target, size, data, flags);}
static void wrap_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
static void (APIENTRYP pglBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) = wrap_glBufferSubData;
static void wrap_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {return trampoline<void>("glBufferSubData", "glBufferSubDataARB", nullptr, nullptr, &pglBufferSubData, target, offset, size, data);}
extern "C" void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {return (*pglBufferSubData)(target, offset, size, data);}
static void wrap_glCallCommandList(GLuint list);
static void (APIENTRYP pglCallCommandList)(GLuint list) = wrap_glCallCommandList;
static void wrap_glCallCommandList(GLuint list) {return trampoline<void>("glCallCommandList", "glCallCommandListNV", nullptr, nullptr, &pglCallCommandList, list);}
extern "C" void APIENTRY glCallCommandList(GLuint list) {return (*pglCallCommandList)(list);}
static void wrap_glCallList(GLuint list);
static void (APIENTRYP pglCallList)(GLuint list) = wrap_glCallList;
static void wrap_glCallList(GLuint list) {return trampoline<void>("glCallList", nullptr, nullptr, nullptr, &pglCallList, list);}
extern "C" void APIENTRY glCallList(GLuint list) {return (*pglCallList)(list);}
static void wrap_glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
static void (APIENTRYP pglCallLists)(GLsizei n, GLenum type, const GLvoid *lists) = wrap_glCallLists;
static void wrap_glCallLists(GLsizei n, GLenum type, const GLvoid *lists) {return trampoline<void>("glCallLists", nullptr, nullptr, nullptr, &pglCallLists, n, type, lists);}
extern "C" void APIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists) {return (*pglCallLists)(n, type, lists);}
static GLenum wrap_glCheckFramebufferStatus(GLenum target);
static GLenum (APIENTRYP pglCheckFramebufferStatus)(GLenum target) = wrap_glCheckFramebufferStatus;
static GLenum wrap_glCheckFramebufferStatus(GLenum target) {return trampoline<GLenum>("glCheckFramebufferStatus", "glCheckFramebufferStatusEXT", nullptr, nullptr, &pglCheckFramebufferStatus, target);}
extern "C" GLenum APIENTRY glCheckFramebufferStatus(GLenum target) {return (*pglCheckFramebufferStatus)(target);}
static GLenum wrap_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
static GLenum (APIENTRYP pglCheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target) = wrap_glCheckNamedFramebufferStatus;
static GLenum wrap_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {return trampoline<GLenum>("glCheckNamedFramebufferStatus", "glCheckNamedFramebufferStatusEXT", nullptr, nullptr, &pglCheckNamedFramebufferStatus, framebuffer, target);}
extern "C" GLenum APIENTRY glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {return (*pglCheckNamedFramebufferStatus)(framebuffer, target);}
static void wrap_glClampColor(GLenum target, GLenum clamp);
static void (APIENTRYP pglClampColor)(GLenum target, GLenum clamp) = wrap_glClampColor;
static void wrap_glClampColor(GLenum target, GLenum clamp) {return trampoline<void>("glClampColor", "glClampColorARB", nullptr, nullptr, &pglClampColor, target, clamp);}
extern "C" void APIENTRY glClampColor(GLenum target, GLenum clamp) {return (*pglClampColor)(target, clamp);}
static void wrap_glClear(GLbitfield mask);
static void (APIENTRYP pglClear)(GLbitfield mask) = wrap_glClear;
static void wrap_glClear(GLbitfield mask) {return trampoline<void>("glClear", nullptr, nullptr, nullptr, &pglClear, mask);}
extern "C" void APIENTRY glClear(GLbitfield mask) {return (*pglClear)(mask);}
static void wrap_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
static void (APIENTRYP pglClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = wrap_glClearAccum;
static void wrap_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {return trampoline<void>("glClearAccum", nullptr, nullptr, nullptr, &pglClearAccum, red, green, blue, alpha);}
extern "C" void APIENTRY glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {return (*pglClearAccum)(red, green, blue, alpha);}
static void wrap_glClearAccumx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
static void (APIENTRYP pglClearAccumx)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = wrap_glClearAccumx;
static void wrap_glClearAccumx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return trampoline<void>("glClearAccumx", "glClearAccumxOES", nullptr, nullptr, &pglClearAccumx, red, green, blue, alpha);}
extern "C" void APIENTRY glClearAccumx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return (*pglClearAccumx)(red, green, blue, alpha);}
static void wrap_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
static void (APIENTRYP pglClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) = wrap_glClearBufferData;
static void wrap_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {return trampoline<void>("glClearBufferData", nullptr, nullptr, nullptr, &pglClearBufferData, target, internalformat, format, type, data);}
extern "C" void APIENTRY glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {return (*pglClearBufferData)(target, internalformat, format, type, data);}
static void wrap_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
static void (APIENTRYP pglClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) = wrap_glClearBufferSubData;
static void wrap_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {return trampoline<void>("glClearBufferSubData", nullptr, nullptr, nullptr, &pglClearBufferSubData, target, internalformat, offset, size, format, type, data);}
extern "C" void APIENTRY glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {return (*pglClearBufferSubData)(target, internalformat, offset, size, format, type, data);}
static void wrap_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
static void (APIENTRYP pglClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = wrap_glClearBufferfi;
static void wrap_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {return trampoline<void>("glClearBufferfi", nullptr, nullptr, nullptr, &pglClearBufferfi, buffer, drawbuffer, depth, stencil);}
extern "C" void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {return (*pglClearBufferfi)(buffer, drawbuffer, depth, stencil);}
static void wrap_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
static void (APIENTRYP pglClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value) = wrap_glClearBufferfv;
static void wrap_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {return trampoline<void>("glClearBufferfv", nullptr, nullptr, nullptr, &pglClearBufferfv, buffer, drawbuffer, value);}
extern "C" void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {return (*pglClearBufferfv)(buffer, drawbuffer, value);}
static void wrap_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
static void (APIENTRYP pglClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value) = wrap_glClearBufferiv;
static void wrap_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {return trampoline<void>("glClearBufferiv", nullptr, nullptr, nullptr, &pglClearBufferiv, buffer, drawbuffer, value);}
extern "C" void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {return (*pglClearBufferiv)(buffer, drawbuffer, value);}
static void wrap_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
static void (APIENTRYP pglClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value) = wrap_glClearBufferuiv;
static void wrap_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {return trampoline<void>("glClearBufferuiv", nullptr, nullptr, nullptr, &pglClearBufferuiv, buffer, drawbuffer, value);}
extern "C" void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {return (*pglClearBufferuiv)(buffer, drawbuffer, value);}
static void wrap_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
static void (APIENTRYP pglClearColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) = wrap_glClearColor;
static void wrap_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {return trampoline<void>("glClearColor", nullptr, nullptr, nullptr, &pglClearColor, red, green, blue, alpha);}
extern "C" void APIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {return (*pglClearColor)(red, green, blue, alpha);}
static void wrap_glClearColorIi(GLint red, GLint green, GLint blue, GLint alpha);
static void (APIENTRYP pglClearColorIi)(GLint red, GLint green, GLint blue, GLint alpha) = wrap_glClearColorIi;
static void wrap_glClearColorIi(GLint red, GLint green, GLint blue, GLint alpha) {return trampoline<void>("glClearColorIi", "glClearColorIiEXT", nullptr, nullptr, &pglClearColorIi, red, green, blue, alpha);}
extern "C" void APIENTRY glClearColorIi(GLint red, GLint green, GLint blue, GLint alpha) {return (*pglClearColorIi)(red, green, blue, alpha);}
static void wrap_glClearColorIui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
static void (APIENTRYP pglClearColorIui)(GLuint red, GLuint green, GLuint blue, GLuint alpha) = wrap_glClearColorIui;
static void wrap_glClearColorIui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {return trampoline<void>("glClearColorIui", "glClearColorIuiEXT", nullptr, nullptr, &pglClearColorIui, red, green, blue, alpha);}
extern "C" void APIENTRY glClearColorIui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {return (*pglClearColorIui)(red, green, blue, alpha);}
static void wrap_glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
static void (APIENTRYP pglClearColorx)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = wrap_glClearColorx;
static void wrap_glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return trampoline<void>("glClearColorx", "glClearColorxOES", nullptr, nullptr, &pglClearColorx, red, green, blue, alpha);}
extern "C" void APIENTRY glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return (*pglClearColorx)(red, green, blue, alpha);}
static void wrap_glClearDepth(GLclampd depth);
static void (APIENTRYP pglClearDepth)(GLclampd depth) = wrap_glClearDepth;
static void wrap_glClearDepth(GLclampd depth) {return trampoline<void>("glClearDepth", nullptr, nullptr, nullptr, &pglClearDepth, depth);}
extern "C" void APIENTRY glClearDepth(GLclampd depth) {return (*pglClearDepth)(depth);}
static void wrap_glClearDepthd(GLdouble depth);
static void (APIENTRYP pglClearDepthd)(GLdouble depth) = wrap_glClearDepthd;
static void wrap_glClearDepthd(GLdouble depth) {return trampoline<void>("glClearDepthd", "glClearDepthdNV", nullptr, nullptr, &pglClearDepthd, depth);}
extern "C" void APIENTRY glClearDepthd(GLdouble depth) {return (*pglClearDepthd)(depth);}
static void wrap_glClearDepthf(GLfloat d);
static void (APIENTRYP pglClearDepthf)(GLfloat d) = wrap_glClearDepthf;
static void wrap_glClearDepthf(GLfloat d) {return trampoline<void>("glClearDepthf", "glClearDepthfOES", nullptr, nullptr, &pglClearDepthf, d);}
extern "C" void APIENTRY glClearDepthf(GLfloat d) {return (*pglClearDepthf)(d);}
static void wrap_glClearDepthx(GLfixed depth);
static void (APIENTRYP pglClearDepthx)(GLfixed depth) = wrap_glClearDepthx;
static void wrap_glClearDepthx(GLfixed depth) {return trampoline<void>("glClearDepthx", "glClearDepthxOES", nullptr, nullptr, &pglClearDepthx, depth);}
extern "C" void APIENTRY glClearDepthx(GLfixed depth) {return (*pglClearDepthx)(depth);}
static void wrap_glClearIndex(GLfloat c);
static void (APIENTRYP pglClearIndex)(GLfloat c) = wrap_glClearIndex;
static void wrap_glClearIndex(GLfloat c) {return trampoline<void>("glClearIndex", nullptr, nullptr, nullptr, &pglClearIndex, c);}
extern "C" void APIENTRY glClearIndex(GLfloat c) {return (*pglClearIndex)(c);}
static void wrap_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
static void (APIENTRYP pglClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) = wrap_glClearNamedBufferData;
static void wrap_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {return trampoline<void>("glClearNamedBufferData", "glClearNamedBufferDataEXT", nullptr, nullptr, &pglClearNamedBufferData, buffer, internalformat, format, type, data);}
extern "C" void APIENTRY glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {return (*pglClearNamedBufferData)(buffer, internalformat, format, type, data);}
static void wrap_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
static void (APIENTRYP pglClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) = wrap_glClearNamedBufferSubData;
static void wrap_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {return trampoline<void>("glClearNamedBufferSubData", "glClearNamedBufferSubDataEXT", nullptr, nullptr, &pglClearNamedBufferSubData, buffer, internalformat, offset, size, format, type, data);}
extern "C" void APIENTRY glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {return (*pglClearNamedBufferSubData)(buffer, internalformat, offset, size, format, type, data);}
static void wrap_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
static void (APIENTRYP pglClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = wrap_glClearNamedFramebufferfi;
static void wrap_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {return trampoline<void>("glClearNamedFramebufferfi", nullptr, nullptr, nullptr, &pglClearNamedFramebufferfi, framebuffer, buffer, drawbuffer, depth, stencil);}
extern "C" void APIENTRY glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {return (*pglClearNamedFramebufferfi)(framebuffer, buffer, drawbuffer, depth, stencil);}
static void wrap_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
static void (APIENTRYP pglClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) = wrap_glClearNamedFramebufferfv;
static void wrap_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) {return trampoline<void>("glClearNamedFramebufferfv", nullptr, nullptr, nullptr, &pglClearNamedFramebufferfv, framebuffer, buffer, drawbuffer, value);}
extern "C" void APIENTRY glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) {return (*pglClearNamedFramebufferfv)(framebuffer, buffer, drawbuffer, value);}
static void wrap_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
static void (APIENTRYP pglClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) = wrap_glClearNamedFramebufferiv;
static void wrap_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) {return trampoline<void>("glClearNamedFramebufferiv", nullptr, nullptr, nullptr, &pglClearNamedFramebufferiv, framebuffer, buffer, drawbuffer, value);}
extern "C" void APIENTRY glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) {return (*pglClearNamedFramebufferiv)(framebuffer, buffer, drawbuffer, value);}
static void wrap_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
static void (APIENTRYP pglClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) = wrap_glClearNamedFramebufferuiv;
static void wrap_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) {return trampoline<void>("glClearNamedFramebufferuiv", nullptr, nullptr, nullptr, &pglClearNamedFramebufferuiv, framebuffer, buffer, drawbuffer, value);}
extern "C" void APIENTRY glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) {return (*pglClearNamedFramebufferuiv)(framebuffer, buffer, drawbuffer, value);}
static void wrap_glClearStencil(GLint s);
static void (APIENTRYP pglClearStencil)(GLint s) = wrap_glClearStencil;
static void wrap_glClearStencil(GLint s) {return trampoline<void>("glClearStencil", nullptr, nullptr, nullptr, &pglClearStencil, s);}
extern "C" void APIENTRY glClearStencil(GLint s) {return (*pglClearStencil)(s);}
static void wrap_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
static void (APIENTRYP pglClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) = wrap_glClearTexImage;
static void wrap_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) {return trampoline<void>("glClearTexImage", nullptr, nullptr, nullptr, &pglClearTexImage, texture, level, format, type, data);}
extern "C" void APIENTRY glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) {return (*pglClearTexImage)(texture, level, format, type, data);}
static void wrap_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
static void (APIENTRYP pglClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) = wrap_glClearTexSubImage;
static void wrap_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) {return trampoline<void>("glClearTexSubImage", nullptr, nullptr, nullptr, &pglClearTexSubImage, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);}
extern "C" void APIENTRY glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) {return (*pglClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);}
static void wrap_glClientActiveTexture(GLenum texture);
static void (APIENTRYP pglClientActiveTexture)(GLenum texture) = wrap_glClientActiveTexture;
static void wrap_glClientActiveTexture(GLenum texture) {return trampoline<void>("glClientActiveTexture", "glClientActiveTextureARB", "glClientActiveTextureARB", nullptr, &pglClientActiveTexture, texture);}
extern "C" void APIENTRY glClientActiveTexture(GLenum texture) {return (*pglClientActiveTexture)(texture);}
static void wrap_glClientActiveVertexStream(GLenum stream);
static void (APIENTRYP pglClientActiveVertexStream)(GLenum stream) = wrap_glClientActiveVertexStream;
static void wrap_glClientActiveVertexStream(GLenum stream) {return trampoline<void>("glClientActiveVertexStream", "glClientActiveVertexStreamATI", nullptr, nullptr, &pglClientActiveVertexStream, stream);}
extern "C" void APIENTRY glClientActiveVertexStream(GLenum stream) {return (*pglClientActiveVertexStream)(stream);}
static void wrap_glClientAttribDefault(GLbitfield mask);
static void (APIENTRYP pglClientAttribDefault)(GLbitfield mask) = wrap_glClientAttribDefault;
static void wrap_glClientAttribDefault(GLbitfield mask) {return trampoline<void>("glClientAttribDefault", "glClientAttribDefaultEXT", nullptr, nullptr, &pglClientAttribDefault, mask);}
extern "C" void APIENTRY glClientAttribDefault(GLbitfield mask) {return (*pglClientAttribDefault)(mask);}
static GLenum wrap_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
static GLenum (APIENTRYP pglClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) = wrap_glClientWaitSync;
static GLenum wrap_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {return trampoline<GLenum>("glClientWaitSync", nullptr, nullptr, nullptr, &pglClientWaitSync, sync, flags, timeout);}
extern "C" GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {return (*pglClientWaitSync)(sync, flags, timeout);}
static void wrap_glClipControl(GLenum origin, GLenum depth);
static void (APIENTRYP pglClipControl)(GLenum origin, GLenum depth) = wrap_glClipControl;
static void wrap_glClipControl(GLenum origin, GLenum depth) {return trampoline<void>("glClipControl", nullptr, nullptr, nullptr, &pglClipControl, origin, depth);}
extern "C" void APIENTRY glClipControl(GLenum origin, GLenum depth) {return (*pglClipControl)(origin, depth);}
static void wrap_glClipPlane(GLenum plane, const GLdouble *equation);
static void (APIENTRYP pglClipPlane)(GLenum plane, const GLdouble *equation) = wrap_glClipPlane;
static void wrap_glClipPlane(GLenum plane, const GLdouble *equation) {return trampoline<void>("glClipPlane", nullptr, nullptr, nullptr, &pglClipPlane, plane, equation);}
extern "C" void APIENTRY glClipPlane(GLenum plane, const GLdouble *equation) {return (*pglClipPlane)(plane, equation);}
static void wrap_glClipPlanef(GLenum plane, const GLfloat *equation);
static void (APIENTRYP pglClipPlanef)(GLenum plane, const GLfloat *equation) = wrap_glClipPlanef;
static void wrap_glClipPlanef(GLenum plane, const GLfloat *equation) {return trampoline<void>("glClipPlanef", "glClipPlanefOES", nullptr, nullptr, &pglClipPlanef, plane, equation);}
extern "C" void APIENTRY glClipPlanef(GLenum plane, const GLfloat *equation) {return (*pglClipPlanef)(plane, equation);}
static void wrap_glClipPlanex(GLenum plane, const GLfixed *equation);
static void (APIENTRYP pglClipPlanex)(GLenum plane, const GLfixed *equation) = wrap_glClipPlanex;
static void wrap_glClipPlanex(GLenum plane, const GLfixed *equation) {return trampoline<void>("glClipPlanex", "glClipPlanexOES", nullptr, nullptr, &pglClipPlanex, plane, equation);}
extern "C" void APIENTRY glClipPlanex(GLenum plane, const GLfixed *equation) {return (*pglClipPlanex)(plane, equation);}
static void wrap_glColor3b(GLbyte red, GLbyte green, GLbyte blue);
static void (APIENTRYP pglColor3b)(GLbyte red, GLbyte green, GLbyte blue) = wrap_glColor3b;
static void wrap_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {return trampoline<void>("glColor3b", nullptr, nullptr, nullptr, &pglColor3b, red, green, blue);}
extern "C" void APIENTRY glColor3b(GLbyte red, GLbyte green, GLbyte blue) {return (*pglColor3b)(red, green, blue);}
static void wrap_glColor3bv(const GLbyte *v);
static void (APIENTRYP pglColor3bv)(const GLbyte *v) = wrap_glColor3bv;
static void wrap_glColor3bv(const GLbyte *v) {return trampoline<void>("glColor3bv", nullptr, nullptr, nullptr, &pglColor3bv, v);}
extern "C" void APIENTRY glColor3bv(const GLbyte *v) {return (*pglColor3bv)(v);}
static void wrap_glColor3d(GLdouble red, GLdouble green, GLdouble blue);
static void (APIENTRYP pglColor3d)(GLdouble red, GLdouble green, GLdouble blue) = wrap_glColor3d;
static void wrap_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {return trampoline<void>("glColor3d", nullptr, nullptr, nullptr, &pglColor3d, red, green, blue);}
extern "C" void APIENTRY glColor3d(GLdouble red, GLdouble green, GLdouble blue) {return (*pglColor3d)(red, green, blue);}
static void wrap_glColor3dv(const GLdouble *v);
static void (APIENTRYP pglColor3dv)(const GLdouble *v) = wrap_glColor3dv;
static void wrap_glColor3dv(const GLdouble *v) {return trampoline<void>("glColor3dv", nullptr, nullptr, nullptr, &pglColor3dv, v);}
extern "C" void APIENTRY glColor3dv(const GLdouble *v) {return (*pglColor3dv)(v);}
static void wrap_glColor3f(GLfloat red, GLfloat green, GLfloat blue);
static void (APIENTRYP pglColor3f)(GLfloat red, GLfloat green, GLfloat blue) = wrap_glColor3f;
static void wrap_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {return trampoline<void>("glColor3f", nullptr, nullptr, nullptr, &pglColor3f, red, green, blue);}
extern "C" void APIENTRY glColor3f(GLfloat red, GLfloat green, GLfloat blue) {return (*pglColor3f)(red, green, blue);}
static void wrap_glColor3fVertex3f(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglColor3fVertex3f)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) = wrap_glColor3fVertex3f;
static void wrap_glColor3fVertex3f(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glColor3fVertex3f", "glColor3fVertex3fSUN", nullptr, nullptr, &pglColor3fVertex3f, r, g, b, x, y, z);}
extern "C" void APIENTRY glColor3fVertex3f(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {return (*pglColor3fVertex3f)(r, g, b, x, y, z);}
static void wrap_glColor3fVertex3fv(const GLfloat *c, const GLfloat *v);
static void (APIENTRYP pglColor3fVertex3fv)(const GLfloat *c, const GLfloat *v) = wrap_glColor3fVertex3fv;
static void wrap_glColor3fVertex3fv(const GLfloat *c, const GLfloat *v) {return trampoline<void>("glColor3fVertex3fv", "glColor3fVertex3fvSUN", nullptr, nullptr, &pglColor3fVertex3fv, c, v);}
extern "C" void APIENTRY glColor3fVertex3fv(const GLfloat *c, const GLfloat *v) {return (*pglColor3fVertex3fv)(c, v);}
static void wrap_glColor3fv(const GLfloat *v);
static void (APIENTRYP pglColor3fv)(const GLfloat *v) = wrap_glColor3fv;
static void wrap_glColor3fv(const GLfloat *v) {return trampoline<void>("glColor3fv", nullptr, nullptr, nullptr, &pglColor3fv, v);}
extern "C" void APIENTRY glColor3fv(const GLfloat *v) {return (*pglColor3fv)(v);}
static void wrap_glColor3h(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
static void (APIENTRYP pglColor3h)(GLhalfNV red, GLhalfNV green, GLhalfNV blue) = wrap_glColor3h;
static void wrap_glColor3h(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {return trampoline<void>("glColor3h", "glColor3hNV", nullptr, nullptr, &pglColor3h, red, green, blue);}
extern "C" void APIENTRY glColor3h(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {return (*pglColor3h)(red, green, blue);}
static void wrap_glColor3hv(const GLhalfNV *v);
static void (APIENTRYP pglColor3hv)(const GLhalfNV *v) = wrap_glColor3hv;
static void wrap_glColor3hv(const GLhalfNV *v) {return trampoline<void>("glColor3hv", "glColor3hvNV", nullptr, nullptr, &pglColor3hv, v);}
extern "C" void APIENTRY glColor3hv(const GLhalfNV *v) {return (*pglColor3hv)(v);}
static void wrap_glColor3i(GLint red, GLint green, GLint blue);
static void (APIENTRYP pglColor3i)(GLint red, GLint green, GLint blue) = wrap_glColor3i;
static void wrap_glColor3i(GLint red, GLint green, GLint blue) {return trampoline<void>("glColor3i", nullptr, nullptr, nullptr, &pglColor3i, red, green, blue);}
extern "C" void APIENTRY glColor3i(GLint red, GLint green, GLint blue) {return (*pglColor3i)(red, green, blue);}
static void wrap_glColor3iv(const GLint *v);
static void (APIENTRYP pglColor3iv)(const GLint *v) = wrap_glColor3iv;
static void wrap_glColor3iv(const GLint *v) {return trampoline<void>("glColor3iv", nullptr, nullptr, nullptr, &pglColor3iv, v);}
extern "C" void APIENTRY glColor3iv(const GLint *v) {return (*pglColor3iv)(v);}
static void wrap_glColor3s(GLshort red, GLshort green, GLshort blue);
static void (APIENTRYP pglColor3s)(GLshort red, GLshort green, GLshort blue) = wrap_glColor3s;
static void wrap_glColor3s(GLshort red, GLshort green, GLshort blue) {return trampoline<void>("glColor3s", nullptr, nullptr, nullptr, &pglColor3s, red, green, blue);}
extern "C" void APIENTRY glColor3s(GLshort red, GLshort green, GLshort blue) {return (*pglColor3s)(red, green, blue);}
static void wrap_glColor3sv(const GLshort *v);
static void (APIENTRYP pglColor3sv)(const GLshort *v) = wrap_glColor3sv;
static void wrap_glColor3sv(const GLshort *v) {return trampoline<void>("glColor3sv", nullptr, nullptr, nullptr, &pglColor3sv, v);}
extern "C" void APIENTRY glColor3sv(const GLshort *v) {return (*pglColor3sv)(v);}
static void wrap_glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
static void (APIENTRYP pglColor3ub)(GLubyte red, GLubyte green, GLubyte blue) = wrap_glColor3ub;
static void wrap_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {return trampoline<void>("glColor3ub", nullptr, nullptr, nullptr, &pglColor3ub, red, green, blue);}
extern "C" void APIENTRY glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {return (*pglColor3ub)(red, green, blue);}
static void wrap_glColor3ubv(const GLubyte *v);
static void (APIENTRYP pglColor3ubv)(const GLubyte *v) = wrap_glColor3ubv;
static void wrap_glColor3ubv(const GLubyte *v) {return trampoline<void>("glColor3ubv", nullptr, nullptr, nullptr, &pglColor3ubv, v);}
extern "C" void APIENTRY glColor3ubv(const GLubyte *v) {return (*pglColor3ubv)(v);}
static void wrap_glColor3ui(GLuint red, GLuint green, GLuint blue);
static void (APIENTRYP pglColor3ui)(GLuint red, GLuint green, GLuint blue) = wrap_glColor3ui;
static void wrap_glColor3ui(GLuint red, GLuint green, GLuint blue) {return trampoline<void>("glColor3ui", nullptr, nullptr, nullptr, &pglColor3ui, red, green, blue);}
extern "C" void APIENTRY glColor3ui(GLuint red, GLuint green, GLuint blue) {return (*pglColor3ui)(red, green, blue);}
static void wrap_glColor3uiv(const GLuint *v);
static void (APIENTRYP pglColor3uiv)(const GLuint *v) = wrap_glColor3uiv;
static void wrap_glColor3uiv(const GLuint *v) {return trampoline<void>("glColor3uiv", nullptr, nullptr, nullptr, &pglColor3uiv, v);}
extern "C" void APIENTRY glColor3uiv(const GLuint *v) {return (*pglColor3uiv)(v);}
static void wrap_glColor3us(GLushort red, GLushort green, GLushort blue);
static void (APIENTRYP pglColor3us)(GLushort red, GLushort green, GLushort blue) = wrap_glColor3us;
static void wrap_glColor3us(GLushort red, GLushort green, GLushort blue) {return trampoline<void>("glColor3us", nullptr, nullptr, nullptr, &pglColor3us, red, green, blue);}
extern "C" void APIENTRY glColor3us(GLushort red, GLushort green, GLushort blue) {return (*pglColor3us)(red, green, blue);}
static void wrap_glColor3usv(const GLushort *v);
static void (APIENTRYP pglColor3usv)(const GLushort *v) = wrap_glColor3usv;
static void wrap_glColor3usv(const GLushort *v) {return trampoline<void>("glColor3usv", nullptr, nullptr, nullptr, &pglColor3usv, v);}
extern "C" void APIENTRY glColor3usv(const GLushort *v) {return (*pglColor3usv)(v);}
static void wrap_glColor3x(GLfixed red, GLfixed green, GLfixed blue);
static void (APIENTRYP pglColor3x)(GLfixed red, GLfixed green, GLfixed blue) = wrap_glColor3x;
static void wrap_glColor3x(GLfixed red, GLfixed green, GLfixed blue) {return trampoline<void>("glColor3x", "glColor3xOES", nullptr, nullptr, &pglColor3x, red, green, blue);}
extern "C" void APIENTRY glColor3x(GLfixed red, GLfixed green, GLfixed blue) {return (*pglColor3x)(red, green, blue);}
static void wrap_glColor3xv(const GLfixed *components);
static void (APIENTRYP pglColor3xv)(const GLfixed *components) = wrap_glColor3xv;
static void wrap_glColor3xv(const GLfixed *components) {return trampoline<void>("glColor3xv", "glColor3xvOES", nullptr, nullptr, &pglColor3xv, components);}
extern "C" void APIENTRY glColor3xv(const GLfixed *components) {return (*pglColor3xv)(components);}
static void wrap_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
static void (APIENTRYP pglColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) = wrap_glColor4b;
static void wrap_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {return trampoline<void>("glColor4b", nullptr, nullptr, nullptr, &pglColor4b, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {return (*pglColor4b)(red, green, blue, alpha);}
static void wrap_glColor4bv(const GLbyte *v);
static void (APIENTRYP pglColor4bv)(const GLbyte *v) = wrap_glColor4bv;
static void wrap_glColor4bv(const GLbyte *v) {return trampoline<void>("glColor4bv", nullptr, nullptr, nullptr, &pglColor4bv, v);}
extern "C" void APIENTRY glColor4bv(const GLbyte *v) {return (*pglColor4bv)(v);}
static void wrap_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
static void (APIENTRYP pglColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) = wrap_glColor4d;
static void wrap_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {return trampoline<void>("glColor4d", nullptr, nullptr, nullptr, &pglColor4d, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {return (*pglColor4d)(red, green, blue, alpha);}
static void wrap_glColor4dv(const GLdouble *v);
static void (APIENTRYP pglColor4dv)(const GLdouble *v) = wrap_glColor4dv;
static void wrap_glColor4dv(const GLdouble *v) {return trampoline<void>("glColor4dv", nullptr, nullptr, nullptr, &pglColor4dv, v);}
extern "C" void APIENTRY glColor4dv(const GLdouble *v) {return (*pglColor4dv)(v);}
static void wrap_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
static void (APIENTRYP pglColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = wrap_glColor4f;
static void wrap_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {return trampoline<void>("glColor4f", nullptr, nullptr, nullptr, &pglColor4f, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {return (*pglColor4f)(red, green, blue, alpha);}
static void wrap_glColor4fNormal3fVertex3f(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglColor4fNormal3fVertex3f)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glColor4fNormal3fVertex3f;
static void wrap_glColor4fNormal3fVertex3f(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glColor4fNormal3fVertex3f", "glColor4fNormal3fVertex3fSUN", nullptr, nullptr, &pglColor4fNormal3fVertex3f, r, g, b, a, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glColor4fNormal3fVertex3f(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglColor4fNormal3fVertex3f)(r, g, b, a, nx, ny, nz, x, y, z);}
static void wrap_glColor4fNormal3fVertex3fv(const GLfloat *c, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglColor4fNormal3fVertex3fv)(const GLfloat *c, const GLfloat *n, const GLfloat *v) = wrap_glColor4fNormal3fVertex3fv;
static void wrap_glColor4fNormal3fVertex3fv(const GLfloat *c, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glColor4fNormal3fVertex3fv", "glColor4fNormal3fVertex3fvSUN", nullptr, nullptr, &pglColor4fNormal3fVertex3fv, c, n, v);}
extern "C" void APIENTRY glColor4fNormal3fVertex3fv(const GLfloat *c, const GLfloat *n, const GLfloat *v) {return (*pglColor4fNormal3fVertex3fv)(c, n, v);}
static void wrap_glColor4fv(const GLfloat *v);
static void (APIENTRYP pglColor4fv)(const GLfloat *v) = wrap_glColor4fv;
static void wrap_glColor4fv(const GLfloat *v) {return trampoline<void>("glColor4fv", nullptr, nullptr, nullptr, &pglColor4fv, v);}
extern "C" void APIENTRY glColor4fv(const GLfloat *v) {return (*pglColor4fv)(v);}
static void wrap_glColor4h(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
static void (APIENTRYP pglColor4h)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) = wrap_glColor4h;
static void wrap_glColor4h(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {return trampoline<void>("glColor4h", "glColor4hNV", nullptr, nullptr, &pglColor4h, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4h(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {return (*pglColor4h)(red, green, blue, alpha);}
static void wrap_glColor4hv(const GLhalfNV *v);
static void (APIENTRYP pglColor4hv)(const GLhalfNV *v) = wrap_glColor4hv;
static void wrap_glColor4hv(const GLhalfNV *v) {return trampoline<void>("glColor4hv", "glColor4hvNV", nullptr, nullptr, &pglColor4hv, v);}
extern "C" void APIENTRY glColor4hv(const GLhalfNV *v) {return (*pglColor4hv)(v);}
static void wrap_glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
static void (APIENTRYP pglColor4i)(GLint red, GLint green, GLint blue, GLint alpha) = wrap_glColor4i;
static void wrap_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {return trampoline<void>("glColor4i", nullptr, nullptr, nullptr, &pglColor4i, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {return (*pglColor4i)(red, green, blue, alpha);}
static void wrap_glColor4iv(const GLint *v);
static void (APIENTRYP pglColor4iv)(const GLint *v) = wrap_glColor4iv;
static void wrap_glColor4iv(const GLint *v) {return trampoline<void>("glColor4iv", nullptr, nullptr, nullptr, &pglColor4iv, v);}
extern "C" void APIENTRY glColor4iv(const GLint *v) {return (*pglColor4iv)(v);}
static void wrap_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
static void (APIENTRYP pglColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha) = wrap_glColor4s;
static void wrap_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {return trampoline<void>("glColor4s", nullptr, nullptr, nullptr, &pglColor4s, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {return (*pglColor4s)(red, green, blue, alpha);}
static void wrap_glColor4sv(const GLshort *v);
static void (APIENTRYP pglColor4sv)(const GLshort *v) = wrap_glColor4sv;
static void wrap_glColor4sv(const GLshort *v) {return trampoline<void>("glColor4sv", nullptr, nullptr, nullptr, &pglColor4sv, v);}
extern "C" void APIENTRY glColor4sv(const GLshort *v) {return (*pglColor4sv)(v);}
static void wrap_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
static void (APIENTRYP pglColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) = wrap_glColor4ub;
static void wrap_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {return trampoline<void>("glColor4ub", nullptr, nullptr, nullptr, &pglColor4ub, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {return (*pglColor4ub)(red, green, blue, alpha);}
static void wrap_glColor4ubVertex2f(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
static void (APIENTRYP pglColor4ubVertex2f)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) = wrap_glColor4ubVertex2f;
static void wrap_glColor4ubVertex2f(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {return trampoline<void>("glColor4ubVertex2f", "glColor4ubVertex2fSUN", nullptr, nullptr, &pglColor4ubVertex2f, r, g, b, a, x, y);}
extern "C" void APIENTRY glColor4ubVertex2f(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {return (*pglColor4ubVertex2f)(r, g, b, a, x, y);}
static void wrap_glColor4ubVertex2fv(const GLubyte *c, const GLfloat *v);
static void (APIENTRYP pglColor4ubVertex2fv)(const GLubyte *c, const GLfloat *v) = wrap_glColor4ubVertex2fv;
static void wrap_glColor4ubVertex2fv(const GLubyte *c, const GLfloat *v) {return trampoline<void>("glColor4ubVertex2fv", "glColor4ubVertex2fvSUN", nullptr, nullptr, &pglColor4ubVertex2fv, c, v);}
extern "C" void APIENTRY glColor4ubVertex2fv(const GLubyte *c, const GLfloat *v) {return (*pglColor4ubVertex2fv)(c, v);}
static void wrap_glColor4ubVertex3f(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglColor4ubVertex3f)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) = wrap_glColor4ubVertex3f;
static void wrap_glColor4ubVertex3f(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glColor4ubVertex3f", "glColor4ubVertex3fSUN", nullptr, nullptr, &pglColor4ubVertex3f, r, g, b, a, x, y, z);}
extern "C" void APIENTRY glColor4ubVertex3f(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {return (*pglColor4ubVertex3f)(r, g, b, a, x, y, z);}
static void wrap_glColor4ubVertex3fv(const GLubyte *c, const GLfloat *v);
static void (APIENTRYP pglColor4ubVertex3fv)(const GLubyte *c, const GLfloat *v) = wrap_glColor4ubVertex3fv;
static void wrap_glColor4ubVertex3fv(const GLubyte *c, const GLfloat *v) {return trampoline<void>("glColor4ubVertex3fv", "glColor4ubVertex3fvSUN", nullptr, nullptr, &pglColor4ubVertex3fv, c, v);}
extern "C" void APIENTRY glColor4ubVertex3fv(const GLubyte *c, const GLfloat *v) {return (*pglColor4ubVertex3fv)(c, v);}
static void wrap_glColor4ubv(const GLubyte *v);
static void (APIENTRYP pglColor4ubv)(const GLubyte *v) = wrap_glColor4ubv;
static void wrap_glColor4ubv(const GLubyte *v) {return trampoline<void>("glColor4ubv", nullptr, nullptr, nullptr, &pglColor4ubv, v);}
extern "C" void APIENTRY glColor4ubv(const GLubyte *v) {return (*pglColor4ubv)(v);}
static void wrap_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
static void (APIENTRYP pglColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha) = wrap_glColor4ui;
static void wrap_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {return trampoline<void>("glColor4ui", nullptr, nullptr, nullptr, &pglColor4ui, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {return (*pglColor4ui)(red, green, blue, alpha);}
static void wrap_glColor4uiv(const GLuint *v);
static void (APIENTRYP pglColor4uiv)(const GLuint *v) = wrap_glColor4uiv;
static void wrap_glColor4uiv(const GLuint *v) {return trampoline<void>("glColor4uiv", nullptr, nullptr, nullptr, &pglColor4uiv, v);}
extern "C" void APIENTRY glColor4uiv(const GLuint *v) {return (*pglColor4uiv)(v);}
static void wrap_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
static void (APIENTRYP pglColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha) = wrap_glColor4us;
static void wrap_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {return trampoline<void>("glColor4us", nullptr, nullptr, nullptr, &pglColor4us, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {return (*pglColor4us)(red, green, blue, alpha);}
static void wrap_glColor4usv(const GLushort *v);
static void (APIENTRYP pglColor4usv)(const GLushort *v) = wrap_glColor4usv;
static void wrap_glColor4usv(const GLushort *v) {return trampoline<void>("glColor4usv", nullptr, nullptr, nullptr, &pglColor4usv, v);}
extern "C" void APIENTRY glColor4usv(const GLushort *v) {return (*pglColor4usv)(v);}
static void wrap_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
static void (APIENTRYP pglColor4x)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = wrap_glColor4x;
static void wrap_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return trampoline<void>("glColor4x", "glColor4xOES", nullptr, nullptr, &pglColor4x, red, green, blue, alpha);}
extern "C" void APIENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {return (*pglColor4x)(red, green, blue, alpha);}
static void wrap_glColor4xv(const GLfixed *components);
static void (APIENTRYP pglColor4xv)(const GLfixed *components) = wrap_glColor4xv;
static void wrap_glColor4xv(const GLfixed *components) {return trampoline<void>("glColor4xv", "glColor4xvOES", nullptr, nullptr, &pglColor4xv, components);}
extern "C" void APIENTRY glColor4xv(const GLfixed *components) {return (*pglColor4xv)(components);}
static void wrap_glColorFormat(GLint size, GLenum type, GLsizei stride);
static void (APIENTRYP pglColorFormat)(GLint size, GLenum type, GLsizei stride) = wrap_glColorFormat;
static void wrap_glColorFormat(GLint size, GLenum type, GLsizei stride) {return trampoline<void>("glColorFormat", "glColorFormatNV", nullptr, nullptr, &pglColorFormat, size, type, stride);}
extern "C" void APIENTRY glColorFormat(GLint size, GLenum type, GLsizei stride) {return (*pglColorFormat)(size, type, stride);}
static void wrap_glColorFragmentOp1(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
static void (APIENTRYP pglColorFragmentOp1)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) = wrap_glColorFragmentOp1;
static void wrap_glColorFragmentOp1(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {return trampoline<void>("glColorFragmentOp1", "glColorFragmentOp1ATI", nullptr, nullptr, &pglColorFragmentOp1, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);}
extern "C" void APIENTRY glColorFragmentOp1(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {return (*pglColorFragmentOp1)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);}
static void wrap_glColorFragmentOp2(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
static void (APIENTRYP pglColorFragmentOp2)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) = wrap_glColorFragmentOp2;
static void wrap_glColorFragmentOp2(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {return trampoline<void>("glColorFragmentOp2", "glColorFragmentOp2ATI", nullptr, nullptr, &pglColorFragmentOp2, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);}
extern "C" void APIENTRY glColorFragmentOp2(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {return (*pglColorFragmentOp2)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);}
static void wrap_glColorFragmentOp3(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
static void (APIENTRYP pglColorFragmentOp3)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) = wrap_glColorFragmentOp3;
static void wrap_glColorFragmentOp3(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {return trampoline<void>("glColorFragmentOp3", "glColorFragmentOp3ATI", nullptr, nullptr, &pglColorFragmentOp3, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);}
extern "C" void APIENTRY glColorFragmentOp3(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {return (*pglColorFragmentOp3)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);}
static void wrap_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
static void (APIENTRYP pglColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = wrap_glColorMask;
static void wrap_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {return trampoline<void>("glColorMask", nullptr, nullptr, nullptr, &pglColorMask, red, green, blue, alpha);}
extern "C" void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {return (*pglColorMask)(red, green, blue, alpha);}
static void wrap_glColorMaskIndexed(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
static void (APIENTRYP pglColorMaskIndexed)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) = wrap_glColorMaskIndexed;
static void wrap_glColorMaskIndexed(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {return trampoline<void>("glColorMaskIndexed", "glColorMaskIndexedEXT", nullptr, nullptr, &pglColorMaskIndexed, index, r, g, b, a);}
extern "C" void APIENTRY glColorMaskIndexed(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {return (*pglColorMaskIndexed)(index, r, g, b, a);}
static void wrap_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
static void (APIENTRYP pglColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) = wrap_glColorMaski;
static void wrap_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {return trampoline<void>("glColorMaski", nullptr, nullptr, nullptr, &pglColorMaski, index, r, g, b, a);}
extern "C" void APIENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {return (*pglColorMaski)(index, r, g, b, a);}
static void wrap_glColorMaterial(GLenum face, GLenum mode);
static void (APIENTRYP pglColorMaterial)(GLenum face, GLenum mode) = wrap_glColorMaterial;
static void wrap_glColorMaterial(GLenum face, GLenum mode) {return trampoline<void>("glColorMaterial", nullptr, nullptr, nullptr, &pglColorMaterial, face, mode);}
extern "C" void APIENTRY glColorMaterial(GLenum face, GLenum mode) {return (*pglColorMaterial)(face, mode);}
static void wrap_glColorP3ui(GLenum type, GLuint color);
static void (APIENTRYP pglColorP3ui)(GLenum type, GLuint color) = wrap_glColorP3ui;
static void wrap_glColorP3ui(GLenum type, GLuint color) {return trampoline<void>("glColorP3ui", nullptr, nullptr, nullptr, &pglColorP3ui, type, color);}
extern "C" void APIENTRY glColorP3ui(GLenum type, GLuint color) {return (*pglColorP3ui)(type, color);}
static void wrap_glColorP3uiv(GLenum type, const GLuint *color);
static void (APIENTRYP pglColorP3uiv)(GLenum type, const GLuint *color) = wrap_glColorP3uiv;
static void wrap_glColorP3uiv(GLenum type, const GLuint *color) {return trampoline<void>("glColorP3uiv", nullptr, nullptr, nullptr, &pglColorP3uiv, type, color);}
extern "C" void APIENTRY glColorP3uiv(GLenum type, const GLuint *color) {return (*pglColorP3uiv)(type, color);}
static void wrap_glColorP4ui(GLenum type, GLuint color);
static void (APIENTRYP pglColorP4ui)(GLenum type, GLuint color) = wrap_glColorP4ui;
static void wrap_glColorP4ui(GLenum type, GLuint color) {return trampoline<void>("glColorP4ui", nullptr, nullptr, nullptr, &pglColorP4ui, type, color);}
extern "C" void APIENTRY glColorP4ui(GLenum type, GLuint color) {return (*pglColorP4ui)(type, color);}
static void wrap_glColorP4uiv(GLenum type, const GLuint *color);
static void (APIENTRYP pglColorP4uiv)(GLenum type, const GLuint *color) = wrap_glColorP4uiv;
static void wrap_glColorP4uiv(GLenum type, const GLuint *color) {return trampoline<void>("glColorP4uiv", nullptr, nullptr, nullptr, &pglColorP4uiv, type, color);}
extern "C" void APIENTRY glColorP4uiv(GLenum type, const GLuint *color) {return (*pglColorP4uiv)(type, color);}
static void wrap_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
static void (APIENTRYP pglColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) = wrap_glColorPointer;
static void wrap_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) {return trampoline<void>("glColorPointer", "glColorPointerEXT", nullptr, nullptr, &pglColorPointer, size, type, stride, ptr);}
extern "C" void APIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) {return (*pglColorPointer)(size, type, stride, ptr);}
static void wrap_glColorPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglColorPointerList)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glColorPointerList;
static void wrap_glColorPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glColorPointerList", "glColorPointerListIBM", nullptr, nullptr, &pglColorPointerList, size, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glColorPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglColorPointerList)(size, type, stride, pointer, ptrstride);}
static void wrap_glColorPointerv(GLint size, GLenum type, const void **pointer);
static void (APIENTRYP pglColorPointerv)(GLint size, GLenum type, const void **pointer) = wrap_glColorPointerv;
static void wrap_glColorPointerv(GLint size, GLenum type, const void **pointer) {return trampoline<void>("glColorPointerv", "glColorPointervINTEL", nullptr, nullptr, &pglColorPointerv, size, type, pointer);}
extern "C" void APIENTRY glColorPointerv(GLint size, GLenum type, const void **pointer) {return (*pglColorPointerv)(size, type, pointer);}
static void wrap_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
static void (APIENTRYP pglColorSubTable)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data) = wrap_glColorSubTable;
static void wrap_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data) {return trampoline<void>("glColorSubTable", "glColorSubTableEXT", nullptr, nullptr, &pglColorSubTable, target, start, count, format, type, data);}
extern "C" void APIENTRY glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data) {return (*pglColorSubTable)(target, start, count, format, type, data);}
static void wrap_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
static void (APIENTRYP pglColorTable)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table) = wrap_glColorTable;
static void wrap_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table) {return trampoline<void>("glColorTable", "glColorTableEXT", "glColorTableSGI", nullptr, &pglColorTable, target, internalformat, width, format, type, table);}
extern "C" void APIENTRY glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table) {return (*pglColorTable)(target, internalformat, width, format, type, table);}
static void wrap_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glColorTableParameterfv;
static void wrap_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glColorTableParameterfv", "glColorTableParameterfvSGI", nullptr, nullptr, &pglColorTableParameterfv, target, pname, params);}
extern "C" void APIENTRY glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglColorTableParameterfv)(target, pname, params);}
static void wrap_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglColorTableParameteriv)(GLenum target, GLenum pname, const GLint *params) = wrap_glColorTableParameteriv;
static void wrap_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glColorTableParameteriv", "glColorTableParameterivSGI", nullptr, nullptr, &pglColorTableParameteriv, target, pname, params);}
extern "C" void APIENTRY glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params) {return (*pglColorTableParameteriv)(target, pname, params);}
static void wrap_glCombinerInput(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
static void (APIENTRYP pglCombinerInput)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) = wrap_glCombinerInput;
static void wrap_glCombinerInput(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {return trampoline<void>("glCombinerInput", "glCombinerInputNV", nullptr, nullptr, &pglCombinerInput, stage, portion, variable, input, mapping, componentUsage);}
extern "C" void APIENTRY glCombinerInput(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {return (*pglCombinerInput)(stage, portion, variable, input, mapping, componentUsage);}
static void wrap_glCombinerOutput(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
static void (APIENTRYP pglCombinerOutput)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) = wrap_glCombinerOutput;
static void wrap_glCombinerOutput(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {return trampoline<void>("glCombinerOutput", "glCombinerOutputNV", nullptr, nullptr, &pglCombinerOutput, stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);}
extern "C" void APIENTRY glCombinerOutput(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {return (*pglCombinerOutput)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);}
static void wrap_glCombinerParameterf(GLenum pname, GLfloat param);
static void (APIENTRYP pglCombinerParameterf)(GLenum pname, GLfloat param) = wrap_glCombinerParameterf;
static void wrap_glCombinerParameterf(GLenum pname, GLfloat param) {return trampoline<void>("glCombinerParameterf", "glCombinerParameterfNV", nullptr, nullptr, &pglCombinerParameterf, pname, param);}
extern "C" void APIENTRY glCombinerParameterf(GLenum pname, GLfloat param) {return (*pglCombinerParameterf)(pname, param);}
static void wrap_glCombinerParameterfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglCombinerParameterfv)(GLenum pname, const GLfloat *params) = wrap_glCombinerParameterfv;
static void wrap_glCombinerParameterfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glCombinerParameterfv", "glCombinerParameterfvNV", nullptr, nullptr, &pglCombinerParameterfv, pname, params);}
extern "C" void APIENTRY glCombinerParameterfv(GLenum pname, const GLfloat *params) {return (*pglCombinerParameterfv)(pname, params);}
static void wrap_glCombinerParameteri(GLenum pname, GLint param);
static void (APIENTRYP pglCombinerParameteri)(GLenum pname, GLint param) = wrap_glCombinerParameteri;
static void wrap_glCombinerParameteri(GLenum pname, GLint param) {return trampoline<void>("glCombinerParameteri", "glCombinerParameteriNV", nullptr, nullptr, &pglCombinerParameteri, pname, param);}
extern "C" void APIENTRY glCombinerParameteri(GLenum pname, GLint param) {return (*pglCombinerParameteri)(pname, param);}
static void wrap_glCombinerParameteriv(GLenum pname, const GLint *params);
static void (APIENTRYP pglCombinerParameteriv)(GLenum pname, const GLint *params) = wrap_glCombinerParameteriv;
static void wrap_glCombinerParameteriv(GLenum pname, const GLint *params) {return trampoline<void>("glCombinerParameteriv", "glCombinerParameterivNV", nullptr, nullptr, &pglCombinerParameteriv, pname, params);}
extern "C" void APIENTRY glCombinerParameteriv(GLenum pname, const GLint *params) {return (*pglCombinerParameteriv)(pname, params);}
static void wrap_glCombinerStageParameterfv(GLenum stage, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglCombinerStageParameterfv)(GLenum stage, GLenum pname, const GLfloat *params) = wrap_glCombinerStageParameterfv;
static void wrap_glCombinerStageParameterfv(GLenum stage, GLenum pname, const GLfloat *params) {return trampoline<void>("glCombinerStageParameterfv", "glCombinerStageParameterfvNV", nullptr, nullptr, &pglCombinerStageParameterfv, stage, pname, params);}
extern "C" void APIENTRY glCombinerStageParameterfv(GLenum stage, GLenum pname, const GLfloat *params) {return (*pglCombinerStageParameterfv)(stage, pname, params);}
static void wrap_glCommandListSegments(GLuint list, GLuint segments);
static void (APIENTRYP pglCommandListSegments)(GLuint list, GLuint segments) = wrap_glCommandListSegments;
static void wrap_glCommandListSegments(GLuint list, GLuint segments) {return trampoline<void>("glCommandListSegments", "glCommandListSegmentsNV", nullptr, nullptr, &pglCommandListSegments, list, segments);}
extern "C" void APIENTRY glCommandListSegments(GLuint list, GLuint segments) {return (*pglCommandListSegments)(list, segments);}
static void wrap_glCompileCommandList(GLuint list);
static void (APIENTRYP pglCompileCommandList)(GLuint list) = wrap_glCompileCommandList;
static void wrap_glCompileCommandList(GLuint list) {return trampoline<void>("glCompileCommandList", "glCompileCommandListNV", nullptr, nullptr, &pglCompileCommandList, list);}
extern "C" void APIENTRY glCompileCommandList(GLuint list) {return (*pglCompileCommandList)(list);}
static void wrap_glCompileShader(GLuint shader);
static void (APIENTRYP pglCompileShader)(GLuint shader) = wrap_glCompileShader;
static void wrap_glCompileShader(GLuint shader) {return trampoline<void>("glCompileShader", "glCompileShaderARB", nullptr, nullptr, &pglCompileShader, shader);}
extern "C" void APIENTRY glCompileShader(GLuint shader) {return (*pglCompileShader)(shader);}
static void wrap_glCompileShaderInclude(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
static void (APIENTRYP pglCompileShaderInclude)(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) = wrap_glCompileShaderInclude;
static void wrap_glCompileShaderInclude(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) {return trampoline<void>("glCompileShaderInclude", "glCompileShaderIncludeARB", nullptr, nullptr, &pglCompileShaderInclude, shader, count, path, length);}
extern "C" void APIENTRY glCompileShaderInclude(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) {return (*pglCompileShaderInclude)(shader, count, path, length);}
static void wrap_glCompressedMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedMultiTexImage1D)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) = wrap_glCompressedMultiTexImage1D;
static void wrap_glCompressedMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedMultiTexImage1D", "glCompressedMultiTexImage1DEXT", nullptr, nullptr, &pglCompressedMultiTexImage1D, texunit, target, level, internalformat, width, border, imageSize, bits);}
extern "C" void APIENTRY glCompressedMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {return (*pglCompressedMultiTexImage1D)(texunit, target, level, internalformat, width, border, imageSize, bits);}
static void wrap_glCompressedMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedMultiTexImage2D)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) = wrap_glCompressedMultiTexImage2D;
static void wrap_glCompressedMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedMultiTexImage2D", "glCompressedMultiTexImage2DEXT", nullptr, nullptr, &pglCompressedMultiTexImage2D, texunit, target, level, internalformat, width, height, border, imageSize, bits);}
extern "C" void APIENTRY glCompressedMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {return (*pglCompressedMultiTexImage2D)(texunit, target, level, internalformat, width, height, border, imageSize, bits);}
static void wrap_glCompressedMultiTexImage3D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedMultiTexImage3D)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) = wrap_glCompressedMultiTexImage3D;
static void wrap_glCompressedMultiTexImage3D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedMultiTexImage3D", "glCompressedMultiTexImage3DEXT", nullptr, nullptr, &pglCompressedMultiTexImage3D, texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);}
extern "C" void APIENTRY glCompressedMultiTexImage3D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {return (*pglCompressedMultiTexImage3D)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);}
static void wrap_glCompressedMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedMultiTexSubImage1D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) = wrap_glCompressedMultiTexSubImage1D;
static void wrap_glCompressedMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedMultiTexSubImage1D", "glCompressedMultiTexSubImage1DEXT", nullptr, nullptr, &pglCompressedMultiTexSubImage1D, texunit, target, level, xoffset, width, format, imageSize, bits);}
extern "C" void APIENTRY glCompressedMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {return (*pglCompressedMultiTexSubImage1D)(texunit, target, level, xoffset, width, format, imageSize, bits);}
static void wrap_glCompressedMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedMultiTexSubImage2D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) = wrap_glCompressedMultiTexSubImage2D;
static void wrap_glCompressedMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedMultiTexSubImage2D", "glCompressedMultiTexSubImage2DEXT", nullptr, nullptr, &pglCompressedMultiTexSubImage2D, texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);}
extern "C" void APIENTRY glCompressedMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {return (*pglCompressedMultiTexSubImage2D)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);}
static void wrap_glCompressedMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedMultiTexSubImage3D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) = wrap_glCompressedMultiTexSubImage3D;
static void wrap_glCompressedMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedMultiTexSubImage3D", "glCompressedMultiTexSubImage3DEXT", nullptr, nullptr, &pglCompressedMultiTexSubImage3D, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);}
extern "C" void APIENTRY glCompressedMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {return (*pglCompressedMultiTexSubImage3D)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);}
static void wrap_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
static void (APIENTRYP pglCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) = wrap_glCompressedTexImage1D;
static void wrap_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) {return trampoline<void>("glCompressedTexImage1D", "glCompressedTexImage1DARB", nullptr, nullptr, &pglCompressedTexImage1D, target, level, internalformat, width, border, imageSize, data);}
extern "C" void APIENTRY glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) {return (*pglCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);}
static void wrap_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
static void (APIENTRYP pglCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) = wrap_glCompressedTexImage2D;
static void wrap_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) {return trampoline<void>("glCompressedTexImage2D", "glCompressedTexImage2DARB", nullptr, nullptr, &pglCompressedTexImage2D, target, level, internalformat, width, height, border, imageSize, data);}
extern "C" void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) {return (*pglCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);}
static void wrap_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
static void (APIENTRYP pglCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) = wrap_glCompressedTexImage3D;
static void wrap_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) {return trampoline<void>("glCompressedTexImage3D", "glCompressedTexImage3DARB", nullptr, nullptr, &pglCompressedTexImage3D, target, level, internalformat, width, height, depth, border, imageSize, data);}
extern "C" void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) {return (*pglCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);}
static void wrap_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
static void (APIENTRYP pglCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) = wrap_glCompressedTexSubImage1D;
static void wrap_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) {return trampoline<void>("glCompressedTexSubImage1D", "glCompressedTexSubImage1DARB", nullptr, nullptr, &pglCompressedTexSubImage1D, target, level, xoffset, width, format, imageSize, data);}
extern "C" void APIENTRY glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) {return (*pglCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);}
static void wrap_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
static void (APIENTRYP pglCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) = wrap_glCompressedTexSubImage2D;
static void wrap_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) {return trampoline<void>("glCompressedTexSubImage2D", "glCompressedTexSubImage2DARB", nullptr, nullptr, &pglCompressedTexSubImage2D, target, level, xoffset, yoffset, width, height, format, imageSize, data);}
extern "C" void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) {return (*pglCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);}
static void wrap_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
static void (APIENTRYP pglCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) = wrap_glCompressedTexSubImage3D;
static void wrap_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) {return trampoline<void>("glCompressedTexSubImage3D", "glCompressedTexSubImage3DARB", nullptr, nullptr, &pglCompressedTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
extern "C" void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) {return (*pglCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
static void wrap_glCompressedTextureImage1D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedTextureImage1D)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) = wrap_glCompressedTextureImage1D;
static void wrap_glCompressedTextureImage1D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedTextureImage1D", "glCompressedTextureImage1DEXT", nullptr, nullptr, &pglCompressedTextureImage1D, texture, target, level, internalformat, width, border, imageSize, bits);}
extern "C" void APIENTRY glCompressedTextureImage1D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {return (*pglCompressedTextureImage1D)(texture, target, level, internalformat, width, border, imageSize, bits);}
static void wrap_glCompressedTextureImage2D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedTextureImage2D)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) = wrap_glCompressedTextureImage2D;
static void wrap_glCompressedTextureImage2D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedTextureImage2D", "glCompressedTextureImage2DEXT", nullptr, nullptr, &pglCompressedTextureImage2D, texture, target, level, internalformat, width, height, border, imageSize, bits);}
extern "C" void APIENTRY glCompressedTextureImage2D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {return (*pglCompressedTextureImage2D)(texture, target, level, internalformat, width, height, border, imageSize, bits);}
static void wrap_glCompressedTextureImage3D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
static void (APIENTRYP pglCompressedTextureImage3D)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) = wrap_glCompressedTextureImage3D;
static void wrap_glCompressedTextureImage3D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {return trampoline<void>("glCompressedTextureImage3D", "glCompressedTextureImage3DEXT", nullptr, nullptr, &pglCompressedTextureImage3D, texture, target, level, internalformat, width, height, depth, border, imageSize, bits);}
extern "C" void APIENTRY glCompressedTextureImage3D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {return (*pglCompressedTextureImage3D)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);}
static void wrap_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
static void (APIENTRYP pglCompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) = wrap_glCompressedTextureSubImage1D;
static void wrap_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {return trampoline<void>("glCompressedTextureSubImage1D", "glCompressedTextureSubImage1DEXT", nullptr, nullptr, &pglCompressedTextureSubImage1D, texture, level, xoffset, width, format, imageSize, data);}
extern "C" void APIENTRY glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {return (*pglCompressedTextureSubImage1D)(texture, level, xoffset, width, format, imageSize, data);}
static void wrap_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
static void (APIENTRYP pglCompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) = wrap_glCompressedTextureSubImage2D;
static void wrap_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {return trampoline<void>("glCompressedTextureSubImage2D", "glCompressedTextureSubImage2DEXT", nullptr, nullptr, &pglCompressedTextureSubImage2D, texture, level, xoffset, yoffset, width, height, format, imageSize, data);}
extern "C" void APIENTRY glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {return (*pglCompressedTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, imageSize, data);}
static void wrap_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
static void (APIENTRYP pglCompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) = wrap_glCompressedTextureSubImage3D;
static void wrap_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {return trampoline<void>("glCompressedTextureSubImage3D", "glCompressedTextureSubImage3DEXT", nullptr, nullptr, &pglCompressedTextureSubImage3D, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
extern "C" void APIENTRY glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {return (*pglCompressedTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
static void wrap_glConservativeRasterParameterf(GLenum pname, GLfloat value);
static void (APIENTRYP pglConservativeRasterParameterf)(GLenum pname, GLfloat value) = wrap_glConservativeRasterParameterf;
static void wrap_glConservativeRasterParameterf(GLenum pname, GLfloat value) {return trampoline<void>("glConservativeRasterParameterf", "glConservativeRasterParameterfNV", nullptr, nullptr, &pglConservativeRasterParameterf, pname, value);}
extern "C" void APIENTRY glConservativeRasterParameterf(GLenum pname, GLfloat value) {return (*pglConservativeRasterParameterf)(pname, value);}
static void wrap_glConservativeRasterParameteri(GLenum pname, GLint param);
static void (APIENTRYP pglConservativeRasterParameteri)(GLenum pname, GLint param) = wrap_glConservativeRasterParameteri;
static void wrap_glConservativeRasterParameteri(GLenum pname, GLint param) {return trampoline<void>("glConservativeRasterParameteri", "glConservativeRasterParameteriNV", nullptr, nullptr, &pglConservativeRasterParameteri, pname, param);}
extern "C" void APIENTRY glConservativeRasterParameteri(GLenum pname, GLint param) {return (*pglConservativeRasterParameteri)(pname, param);}
static void wrap_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
static void (APIENTRYP pglConvolutionFilter1D)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image) = wrap_glConvolutionFilter1D;
static void wrap_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image) {return trampoline<void>("glConvolutionFilter1D", "glConvolutionFilter1DEXT", nullptr, nullptr, &pglConvolutionFilter1D, target, internalformat, width, format, type, image);}
extern "C" void APIENTRY glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image) {return (*pglConvolutionFilter1D)(target, internalformat, width, format, type, image);}
static void wrap_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
static void (APIENTRYP pglConvolutionFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image) = wrap_glConvolutionFilter2D;
static void wrap_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image) {return trampoline<void>("glConvolutionFilter2D", "glConvolutionFilter2DEXT", nullptr, nullptr, &pglConvolutionFilter2D, target, internalformat, width, height, format, type, image);}
extern "C" void APIENTRY glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image) {return (*pglConvolutionFilter2D)(target, internalformat, width, height, format, type, image);}
static void wrap_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);
static void (APIENTRYP pglConvolutionParameterf)(GLenum target, GLenum pname, GLfloat params) = wrap_glConvolutionParameterf;
static void wrap_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {return trampoline<void>("glConvolutionParameterf", "glConvolutionParameterfEXT", nullptr, nullptr, &pglConvolutionParameterf, target, pname, params);}
extern "C" void APIENTRY glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {return (*pglConvolutionParameterf)(target, pname, params);}
static void wrap_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglConvolutionParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glConvolutionParameterfv;
static void wrap_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glConvolutionParameterfv", "glConvolutionParameterfvEXT", nullptr, nullptr, &pglConvolutionParameterfv, target, pname, params);}
extern "C" void APIENTRY glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglConvolutionParameterfv)(target, pname, params);}
static void wrap_glConvolutionParameteri(GLenum target, GLenum pname, GLint params);
static void (APIENTRYP pglConvolutionParameteri)(GLenum target, GLenum pname, GLint params) = wrap_glConvolutionParameteri;
static void wrap_glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {return trampoline<void>("glConvolutionParameteri", "glConvolutionParameteriEXT", nullptr, nullptr, &pglConvolutionParameteri, target, pname, params);}
extern "C" void APIENTRY glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {return (*pglConvolutionParameteri)(target, pname, params);}
static void wrap_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglConvolutionParameteriv)(GLenum target, GLenum pname, const GLint *params) = wrap_glConvolutionParameteriv;
static void wrap_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glConvolutionParameteriv", "glConvolutionParameterivEXT", nullptr, nullptr, &pglConvolutionParameteriv, target, pname, params);}
extern "C" void APIENTRY glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params) {return (*pglConvolutionParameteriv)(target, pname, params);}
static void wrap_glConvolutionParameterx(GLenum target, GLenum pname, GLfixed param);
static void (APIENTRYP pglConvolutionParameterx)(GLenum target, GLenum pname, GLfixed param) = wrap_glConvolutionParameterx;
static void wrap_glConvolutionParameterx(GLenum target, GLenum pname, GLfixed param) {return trampoline<void>("glConvolutionParameterx", "glConvolutionParameterxOES", nullptr, nullptr, &pglConvolutionParameterx, target, pname, param);}
extern "C" void APIENTRY glConvolutionParameterx(GLenum target, GLenum pname, GLfixed param) {return (*pglConvolutionParameterx)(target, pname, param);}
static void wrap_glConvolutionParameterxv(GLenum target, GLenum pname, const GLfixed *params);
static void (APIENTRYP pglConvolutionParameterxv)(GLenum target, GLenum pname, const GLfixed *params) = wrap_glConvolutionParameterxv;
static void wrap_glConvolutionParameterxv(GLenum target, GLenum pname, const GLfixed *params) {return trampoline<void>("glConvolutionParameterxv", "glConvolutionParameterxvOES", nullptr, nullptr, &pglConvolutionParameterxv, target, pname, params);}
extern "C" void APIENTRY glConvolutionParameterxv(GLenum target, GLenum pname, const GLfixed *params) {return (*pglConvolutionParameterxv)(target, pname, params);}
static void wrap_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
static void (APIENTRYP pglCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = wrap_glCopyBufferSubData;
static void wrap_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {return trampoline<void>("glCopyBufferSubData", nullptr, nullptr, nullptr, &pglCopyBufferSubData, readTarget, writeTarget, readOffset, writeOffset, size);}
extern "C" void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {return (*pglCopyBufferSubData)(readTarget, writeTarget, readOffset, writeOffset, size);}
static void wrap_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
static void (APIENTRYP pglCopyColorSubTable)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) = wrap_glCopyColorSubTable;
static void wrap_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {return trampoline<void>("glCopyColorSubTable", "glCopyColorSubTableEXT", nullptr, nullptr, &pglCopyColorSubTable, target, start, x, y, width);}
extern "C" void APIENTRY glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {return (*pglCopyColorSubTable)(target, start, x, y, width);}
static void wrap_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
static void (APIENTRYP pglCopyColorTable)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) = wrap_glCopyColorTable;
static void wrap_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {return trampoline<void>("glCopyColorTable", "glCopyColorTableSGI", nullptr, nullptr, &pglCopyColorTable, target, internalformat, x, y, width);}
extern "C" void APIENTRY glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {return (*pglCopyColorTable)(target, internalformat, x, y, width);}
static void wrap_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
static void (APIENTRYP pglCopyConvolutionFilter1D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) = wrap_glCopyConvolutionFilter1D;
static void wrap_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {return trampoline<void>("glCopyConvolutionFilter1D", "glCopyConvolutionFilter1DEXT", nullptr, nullptr, &pglCopyConvolutionFilter1D, target, internalformat, x, y, width);}
extern "C" void APIENTRY glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {return (*pglCopyConvolutionFilter1D)(target, internalformat, x, y, width);}
static void wrap_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyConvolutionFilter2D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyConvolutionFilter2D;
static void wrap_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyConvolutionFilter2D", "glCopyConvolutionFilter2DEXT", nullptr, nullptr, &pglCopyConvolutionFilter2D, target, internalformat, x, y, width, height);}
extern "C" void APIENTRY glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);}
static void wrap_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
static void (APIENTRYP pglCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) = wrap_glCopyImageSubData;
static void wrap_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {return trampoline<void>("glCopyImageSubData", "glCopyImageSubDataNV", nullptr, nullptr, &pglCopyImageSubData, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);}
extern "C" void APIENTRY glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {return (*pglCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);}
static void wrap_glCopyMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
static void (APIENTRYP pglCopyMultiTexImage1D)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = wrap_glCopyMultiTexImage1D;
static void wrap_glCopyMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {return trampoline<void>("glCopyMultiTexImage1D", "glCopyMultiTexImage1DEXT", nullptr, nullptr, &pglCopyMultiTexImage1D, texunit, target, level, internalformat, x, y, width, border);}
extern "C" void APIENTRY glCopyMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {return (*pglCopyMultiTexImage1D)(texunit, target, level, internalformat, x, y, width, border);}
static void wrap_glCopyMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
static void (APIENTRYP pglCopyMultiTexImage2D)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = wrap_glCopyMultiTexImage2D;
static void wrap_glCopyMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {return trampoline<void>("glCopyMultiTexImage2D", "glCopyMultiTexImage2DEXT", nullptr, nullptr, &pglCopyMultiTexImage2D, texunit, target, level, internalformat, x, y, width, height, border);}
extern "C" void APIENTRY glCopyMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {return (*pglCopyMultiTexImage2D)(texunit, target, level, internalformat, x, y, width, height, border);}
static void wrap_glCopyMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
static void (APIENTRYP pglCopyMultiTexSubImage1D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = wrap_glCopyMultiTexSubImage1D;
static void wrap_glCopyMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {return trampoline<void>("glCopyMultiTexSubImage1D", "glCopyMultiTexSubImage1DEXT", nullptr, nullptr, &pglCopyMultiTexSubImage1D, texunit, target, level, xoffset, x, y, width);}
extern "C" void APIENTRY glCopyMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {return (*pglCopyMultiTexSubImage1D)(texunit, target, level, xoffset, x, y, width);}
static void wrap_glCopyMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyMultiTexSubImage2D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyMultiTexSubImage2D;
static void wrap_glCopyMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyMultiTexSubImage2D", "glCopyMultiTexSubImage2DEXT", nullptr, nullptr, &pglCopyMultiTexSubImage2D, texunit, target, level, xoffset, yoffset, x, y, width, height);}
extern "C" void APIENTRY glCopyMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyMultiTexSubImage2D)(texunit, target, level, xoffset, yoffset, x, y, width, height);}
static void wrap_glCopyMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyMultiTexSubImage3D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyMultiTexSubImage3D;
static void wrap_glCopyMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyMultiTexSubImage3D", "glCopyMultiTexSubImage3DEXT", nullptr, nullptr, &pglCopyMultiTexSubImage3D, texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);}
extern "C" void APIENTRY glCopyMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyMultiTexSubImage3D)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);}
static void wrap_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
static void (APIENTRYP pglCopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = wrap_glCopyNamedBufferSubData;
static void wrap_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {return trampoline<void>("glCopyNamedBufferSubData", nullptr, nullptr, nullptr, &pglCopyNamedBufferSubData, readBuffer, writeBuffer, readOffset, writeOffset, size);}
extern "C" void APIENTRY glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {return (*pglCopyNamedBufferSubData)(readBuffer, writeBuffer, readOffset, writeOffset, size);}
static void wrap_glCopyPath(GLuint resultPath, GLuint srcPath);
static void (APIENTRYP pglCopyPath)(GLuint resultPath, GLuint srcPath) = wrap_glCopyPath;
static void wrap_glCopyPath(GLuint resultPath, GLuint srcPath) {return trampoline<void>("glCopyPath", "glCopyPathNV", nullptr, nullptr, &pglCopyPath, resultPath, srcPath);}
extern "C" void APIENTRY glCopyPath(GLuint resultPath, GLuint srcPath) {return (*pglCopyPath)(resultPath, srcPath);}
static void wrap_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
static void (APIENTRYP pglCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) = wrap_glCopyPixels;
static void wrap_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {return trampoline<void>("glCopyPixels", nullptr, nullptr, nullptr, &pglCopyPixels, x, y, width, height, type);}
extern "C" void APIENTRY glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {return (*pglCopyPixels)(x, y, width, height, type);}
static void wrap_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
static void (APIENTRYP pglCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = wrap_glCopyTexImage1D;
static void wrap_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {return trampoline<void>("glCopyTexImage1D", "glCopyTexImage1DEXT", nullptr, nullptr, &pglCopyTexImage1D, target, level, internalformat, x, y, width, border);}
extern "C" void APIENTRY glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {return (*pglCopyTexImage1D)(target, level, internalformat, x, y, width, border);}
static void wrap_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
static void (APIENTRYP pglCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = wrap_glCopyTexImage2D;
static void wrap_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {return trampoline<void>("glCopyTexImage2D", "glCopyTexImage2DEXT", nullptr, nullptr, &pglCopyTexImage2D, target, level, internalformat, x, y, width, height, border);}
extern "C" void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {return (*pglCopyTexImage2D)(target, level, internalformat, x, y, width, height, border);}
static void wrap_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
static void (APIENTRYP pglCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = wrap_glCopyTexSubImage1D;
static void wrap_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {return trampoline<void>("glCopyTexSubImage1D", "glCopyTexSubImage1DEXT", nullptr, nullptr, &pglCopyTexSubImage1D, target, level, xoffset, x, y, width);}
extern "C" void APIENTRY glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {return (*pglCopyTexSubImage1D)(target, level, xoffset, x, y, width);}
static void wrap_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyTexSubImage2D;
static void wrap_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyTexSubImage2D", "glCopyTexSubImage2DEXT", nullptr, nullptr, &pglCopyTexSubImage2D, target, level, xoffset, yoffset, x, y, width, height);}
extern "C" void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height);}
static void wrap_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyTexSubImage3D;
static void wrap_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyTexSubImage3D", "glCopyTexSubImage3DEXT", nullptr, nullptr, &pglCopyTexSubImage3D, target, level, xoffset, yoffset, zoffset, x, y, width, height);}
extern "C" void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);}
static void wrap_glCopyTextureImage1D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
static void (APIENTRYP pglCopyTextureImage1D)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = wrap_glCopyTextureImage1D;
static void wrap_glCopyTextureImage1D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {return trampoline<void>("glCopyTextureImage1D", "glCopyTextureImage1DEXT", nullptr, nullptr, &pglCopyTextureImage1D, texture, target, level, internalformat, x, y, width, border);}
extern "C" void APIENTRY glCopyTextureImage1D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {return (*pglCopyTextureImage1D)(texture, target, level, internalformat, x, y, width, border);}
static void wrap_glCopyTextureImage2D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
static void (APIENTRYP pglCopyTextureImage2D)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = wrap_glCopyTextureImage2D;
static void wrap_glCopyTextureImage2D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {return trampoline<void>("glCopyTextureImage2D", "glCopyTextureImage2DEXT", nullptr, nullptr, &pglCopyTextureImage2D, texture, target, level, internalformat, x, y, width, height, border);}
extern "C" void APIENTRY glCopyTextureImage2D(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {return (*pglCopyTextureImage2D)(texture, target, level, internalformat, x, y, width, height, border);}
static void wrap_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
static void (APIENTRYP pglCopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = wrap_glCopyTextureSubImage1D;
static void wrap_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {return trampoline<void>("glCopyTextureSubImage1D", "glCopyTextureSubImage1DEXT", nullptr, nullptr, &pglCopyTextureSubImage1D, texture, level, xoffset, x, y, width);}
extern "C" void APIENTRY glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {return (*pglCopyTextureSubImage1D)(texture, level, xoffset, x, y, width);}
static void wrap_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyTextureSubImage2D;
static void wrap_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyTextureSubImage2D", "glCopyTextureSubImage2DEXT", nullptr, nullptr, &pglCopyTextureSubImage2D, texture, level, xoffset, yoffset, x, y, width, height);}
extern "C" void APIENTRY glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyTextureSubImage2D)(texture, level, xoffset, yoffset, x, y, width, height);}
static void wrap_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglCopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glCopyTextureSubImage3D;
static void wrap_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glCopyTextureSubImage3D", "glCopyTextureSubImage3DEXT", nullptr, nullptr, &pglCopyTextureSubImage3D, texture, level, xoffset, yoffset, zoffset, x, y, width, height);}
extern "C" void APIENTRY glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglCopyTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, x, y, width, height);}
static void wrap_glCoverFillPath(GLuint path, GLenum coverMode);
static void (APIENTRYP pglCoverFillPath)(GLuint path, GLenum coverMode) = wrap_glCoverFillPath;
static void wrap_glCoverFillPath(GLuint path, GLenum coverMode) {return trampoline<void>("glCoverFillPath", "glCoverFillPathNV", nullptr, nullptr, &pglCoverFillPath, path, coverMode);}
extern "C" void APIENTRY glCoverFillPath(GLuint path, GLenum coverMode) {return (*pglCoverFillPath)(path, coverMode);}
static void wrap_glCoverFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglCoverFillPathInstanced)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) = wrap_glCoverFillPathInstanced;
static void wrap_glCoverFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glCoverFillPathInstanced", "glCoverFillPathInstancedNV", nullptr, nullptr, &pglCoverFillPathInstanced, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);}
extern "C" void APIENTRY glCoverFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return (*pglCoverFillPathInstanced)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);}
static void wrap_glCoverStrokePath(GLuint path, GLenum coverMode);
static void (APIENTRYP pglCoverStrokePath)(GLuint path, GLenum coverMode) = wrap_glCoverStrokePath;
static void wrap_glCoverStrokePath(GLuint path, GLenum coverMode) {return trampoline<void>("glCoverStrokePath", "glCoverStrokePathNV", nullptr, nullptr, &pglCoverStrokePath, path, coverMode);}
extern "C" void APIENTRY glCoverStrokePath(GLuint path, GLenum coverMode) {return (*pglCoverStrokePath)(path, coverMode);}
static void wrap_glCoverStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglCoverStrokePathInstanced)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) = wrap_glCoverStrokePathInstanced;
static void wrap_glCoverStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glCoverStrokePathInstanced", "glCoverStrokePathInstancedNV", nullptr, nullptr, &pglCoverStrokePathInstanced, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);}
extern "C" void APIENTRY glCoverStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return (*pglCoverStrokePathInstanced)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);}
static void wrap_glCoverageModulation(GLenum components);
static void (APIENTRYP pglCoverageModulation)(GLenum components) = wrap_glCoverageModulation;
static void wrap_glCoverageModulation(GLenum components) {return trampoline<void>("glCoverageModulation", "glCoverageModulationNV", nullptr, nullptr, &pglCoverageModulation, components);}
extern "C" void APIENTRY glCoverageModulation(GLenum components) {return (*pglCoverageModulation)(components);}
static void wrap_glCoverageModulationTable(GLsizei n, const GLfloat *v);
static void (APIENTRYP pglCoverageModulationTable)(GLsizei n, const GLfloat *v) = wrap_glCoverageModulationTable;
static void wrap_glCoverageModulationTable(GLsizei n, const GLfloat *v) {return trampoline<void>("glCoverageModulationTable", "glCoverageModulationTableNV", nullptr, nullptr, &pglCoverageModulationTable, n, v);}
extern "C" void APIENTRY glCoverageModulationTable(GLsizei n, const GLfloat *v) {return (*pglCoverageModulationTable)(n, v);}
static void wrap_glCreateBuffers(GLsizei n, GLuint *buffers);
static void (APIENTRYP pglCreateBuffers)(GLsizei n, GLuint *buffers) = wrap_glCreateBuffers;
static void wrap_glCreateBuffers(GLsizei n, GLuint *buffers) {return trampoline<void>("glCreateBuffers", nullptr, nullptr, nullptr, &pglCreateBuffers, n, buffers);}
extern "C" void APIENTRY glCreateBuffers(GLsizei n, GLuint *buffers) {return (*pglCreateBuffers)(n, buffers);}
static void wrap_glCreateCommandLists(GLsizei n, GLuint *lists);
static void (APIENTRYP pglCreateCommandLists)(GLsizei n, GLuint *lists) = wrap_glCreateCommandLists;
static void wrap_glCreateCommandLists(GLsizei n, GLuint *lists) {return trampoline<void>("glCreateCommandLists", "glCreateCommandListsNV", nullptr, nullptr, &pglCreateCommandLists, n, lists);}
extern "C" void APIENTRY glCreateCommandLists(GLsizei n, GLuint *lists) {return (*pglCreateCommandLists)(n, lists);}
static void wrap_glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
static void (APIENTRYP pglCreateFramebuffers)(GLsizei n, GLuint *framebuffers) = wrap_glCreateFramebuffers;
static void wrap_glCreateFramebuffers(GLsizei n, GLuint *framebuffers) {return trampoline<void>("glCreateFramebuffers", nullptr, nullptr, nullptr, &pglCreateFramebuffers, n, framebuffers);}
extern "C" void APIENTRY glCreateFramebuffers(GLsizei n, GLuint *framebuffers) {return (*pglCreateFramebuffers)(n, framebuffers);}
static void wrap_glCreatePerfQuery(GLuint queryId, GLuint *queryHandle);
static void (APIENTRYP pglCreatePerfQuery)(GLuint queryId, GLuint *queryHandle) = wrap_glCreatePerfQuery;
static void wrap_glCreatePerfQuery(GLuint queryId, GLuint *queryHandle) {return trampoline<void>("glCreatePerfQuery", "glCreatePerfQueryINTEL", nullptr, nullptr, &pglCreatePerfQuery, queryId, queryHandle);}
extern "C" void APIENTRY glCreatePerfQuery(GLuint queryId, GLuint *queryHandle) {return (*pglCreatePerfQuery)(queryId, queryHandle);}
static GLuint wrap_glCreateProgram(void);
static GLuint (APIENTRYP pglCreateProgram)(void) = wrap_glCreateProgram;
static GLuint wrap_glCreateProgram(void) {return trampoline<GLuint>("glCreateProgram", nullptr, nullptr, nullptr, &pglCreateProgram);}
extern "C" GLuint APIENTRY glCreateProgram(void) {return (*pglCreateProgram)();}
static GLhandleARB wrap_glCreateProgramObject(void);
static GLhandleARB (APIENTRYP pglCreateProgramObject)(void) = wrap_glCreateProgramObject;
static GLhandleARB wrap_glCreateProgramObject(void) {return trampoline<GLhandleARB>("glCreateProgramObject", "glCreateProgramObjectARB", nullptr, nullptr, &pglCreateProgramObject);}
extern "C" GLhandleARB APIENTRY glCreateProgramObject(void) {return (*pglCreateProgramObject)();}
static void wrap_glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
static void (APIENTRYP pglCreateProgramPipelines)(GLsizei n, GLuint *pipelines) = wrap_glCreateProgramPipelines;
static void wrap_glCreateProgramPipelines(GLsizei n, GLuint *pipelines) {return trampoline<void>("glCreateProgramPipelines", nullptr, nullptr, nullptr, &pglCreateProgramPipelines, n, pipelines);}
extern "C" void APIENTRY glCreateProgramPipelines(GLsizei n, GLuint *pipelines) {return (*pglCreateProgramPipelines)(n, pipelines);}
static void wrap_glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
static void (APIENTRYP pglCreateQueries)(GLenum target, GLsizei n, GLuint *ids) = wrap_glCreateQueries;
static void wrap_glCreateQueries(GLenum target, GLsizei n, GLuint *ids) {return trampoline<void>("glCreateQueries", nullptr, nullptr, nullptr, &pglCreateQueries, target, n, ids);}
extern "C" void APIENTRY glCreateQueries(GLenum target, GLsizei n, GLuint *ids) {return (*pglCreateQueries)(target, n, ids);}
static void wrap_glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
static void (APIENTRYP pglCreateRenderbuffers)(GLsizei n, GLuint *renderbuffers) = wrap_glCreateRenderbuffers;
static void wrap_glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) {return trampoline<void>("glCreateRenderbuffers", nullptr, nullptr, nullptr, &pglCreateRenderbuffers, n, renderbuffers);}
extern "C" void APIENTRY glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) {return (*pglCreateRenderbuffers)(n, renderbuffers);}
static void wrap_glCreateSamplers(GLsizei n, GLuint *samplers);
static void (APIENTRYP pglCreateSamplers)(GLsizei n, GLuint *samplers) = wrap_glCreateSamplers;
static void wrap_glCreateSamplers(GLsizei n, GLuint *samplers) {return trampoline<void>("glCreateSamplers", nullptr, nullptr, nullptr, &pglCreateSamplers, n, samplers);}
extern "C" void APIENTRY glCreateSamplers(GLsizei n, GLuint *samplers) {return (*pglCreateSamplers)(n, samplers);}
static GLuint wrap_glCreateShader(GLenum type);
static GLuint (APIENTRYP pglCreateShader)(GLenum type) = wrap_glCreateShader;
static GLuint wrap_glCreateShader(GLenum type) {return trampoline<GLuint>("glCreateShader", nullptr, nullptr, nullptr, &pglCreateShader, type);}
extern "C" GLuint APIENTRY glCreateShader(GLenum type) {return (*pglCreateShader)(type);}
static GLhandleARB wrap_glCreateShaderObject(GLenum shaderType);
static GLhandleARB (APIENTRYP pglCreateShaderObject)(GLenum shaderType) = wrap_glCreateShaderObject;
static GLhandleARB wrap_glCreateShaderObject(GLenum shaderType) {return trampoline<GLhandleARB>("glCreateShaderObject", "glCreateShaderObjectARB", nullptr, nullptr, &pglCreateShaderObject, shaderType);}
extern "C" GLhandleARB APIENTRY glCreateShaderObject(GLenum shaderType) {return (*pglCreateShaderObject)(shaderType);}
static GLuint wrap_glCreateShaderProgram(GLenum type, const GLchar *string);
static GLuint (APIENTRYP pglCreateShaderProgram)(GLenum type, const GLchar *string) = wrap_glCreateShaderProgram;
static GLuint wrap_glCreateShaderProgram(GLenum type, const GLchar *string) {return trampoline<GLuint>("glCreateShaderProgram", "glCreateShaderProgramEXT", nullptr, nullptr, &pglCreateShaderProgram, type, string);}
extern "C" GLuint APIENTRY glCreateShaderProgram(GLenum type, const GLchar *string) {return (*pglCreateShaderProgram)(type, string);}
static GLuint wrap_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
static GLuint (APIENTRYP pglCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const*strings) = wrap_glCreateShaderProgramv;
static GLuint wrap_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {return trampoline<GLuint>("glCreateShaderProgramv", nullptr, nullptr, nullptr, &pglCreateShaderProgramv, type, count, strings);}
extern "C" GLuint APIENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {return (*pglCreateShaderProgramv)(type, count, strings);}
static void wrap_glCreateStates(GLsizei n, GLuint *states);
static void (APIENTRYP pglCreateStates)(GLsizei n, GLuint *states) = wrap_glCreateStates;
static void wrap_glCreateStates(GLsizei n, GLuint *states) {return trampoline<void>("glCreateStates", "glCreateStatesNV", nullptr, nullptr, &pglCreateStates, n, states);}
extern "C" void APIENTRY glCreateStates(GLsizei n, GLuint *states) {return (*pglCreateStates)(n, states);}
static GLsync wrap_glCreateSyncFromCLevent(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
static GLsync (APIENTRYP pglCreateSyncFromCLevent)(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) = wrap_glCreateSyncFromCLevent;
static GLsync wrap_glCreateSyncFromCLevent(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) {return trampoline<GLsync>("glCreateSyncFromCLevent", "glCreateSyncFromCLeventARB", nullptr, nullptr, &pglCreateSyncFromCLevent, context, event, flags);}
extern "C" GLsync APIENTRY glCreateSyncFromCLevent(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) {return (*pglCreateSyncFromCLevent)(context, event, flags);}
static void wrap_glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
static void (APIENTRYP pglCreateTextures)(GLenum target, GLsizei n, GLuint *textures) = wrap_glCreateTextures;
static void wrap_glCreateTextures(GLenum target, GLsizei n, GLuint *textures) {return trampoline<void>("glCreateTextures", nullptr, nullptr, nullptr, &pglCreateTextures, target, n, textures);}
extern "C" void APIENTRY glCreateTextures(GLenum target, GLsizei n, GLuint *textures) {return (*pglCreateTextures)(target, n, textures);}
static void wrap_glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
static void (APIENTRYP pglCreateTransformFeedbacks)(GLsizei n, GLuint *ids) = wrap_glCreateTransformFeedbacks;
static void wrap_glCreateTransformFeedbacks(GLsizei n, GLuint *ids) {return trampoline<void>("glCreateTransformFeedbacks", nullptr, nullptr, nullptr, &pglCreateTransformFeedbacks, n, ids);}
extern "C" void APIENTRY glCreateTransformFeedbacks(GLsizei n, GLuint *ids) {return (*pglCreateTransformFeedbacks)(n, ids);}
static void wrap_glCreateVertexArrays(GLsizei n, GLuint *arrays);
static void (APIENTRYP pglCreateVertexArrays)(GLsizei n, GLuint *arrays) = wrap_glCreateVertexArrays;
static void wrap_glCreateVertexArrays(GLsizei n, GLuint *arrays) {return trampoline<void>("glCreateVertexArrays", nullptr, nullptr, nullptr, &pglCreateVertexArrays, n, arrays);}
extern "C" void APIENTRY glCreateVertexArrays(GLsizei n, GLuint *arrays) {return (*pglCreateVertexArrays)(n, arrays);}
static void wrap_glCullFace(GLenum mode);
static void (APIENTRYP pglCullFace)(GLenum mode) = wrap_glCullFace;
static void wrap_glCullFace(GLenum mode) {return trampoline<void>("glCullFace", nullptr, nullptr, nullptr, &pglCullFace, mode);}
extern "C" void APIENTRY glCullFace(GLenum mode) {return (*pglCullFace)(mode);}
static void wrap_glCullParameterdv(GLenum pname, GLdouble *params);
static void (APIENTRYP pglCullParameterdv)(GLenum pname, GLdouble *params) = wrap_glCullParameterdv;
static void wrap_glCullParameterdv(GLenum pname, GLdouble *params) {return trampoline<void>("glCullParameterdv", "glCullParameterdvEXT", nullptr, nullptr, &pglCullParameterdv, pname, params);}
extern "C" void APIENTRY glCullParameterdv(GLenum pname, GLdouble *params) {return (*pglCullParameterdv)(pname, params);}
static void wrap_glCullParameterfv(GLenum pname, GLfloat *params);
static void (APIENTRYP pglCullParameterfv)(GLenum pname, GLfloat *params) = wrap_glCullParameterfv;
static void wrap_glCullParameterfv(GLenum pname, GLfloat *params) {return trampoline<void>("glCullParameterfv", "glCullParameterfvEXT", nullptr, nullptr, &pglCullParameterfv, pname, params);}
extern "C" void APIENTRY glCullParameterfv(GLenum pname, GLfloat *params) {return (*pglCullParameterfv)(pname, params);}
static void wrap_glCurrentPaletteMatrix(GLint index);
static void (APIENTRYP pglCurrentPaletteMatrix)(GLint index) = wrap_glCurrentPaletteMatrix;
static void wrap_glCurrentPaletteMatrix(GLint index) {return trampoline<void>("glCurrentPaletteMatrix", "glCurrentPaletteMatrixARB", nullptr, nullptr, &pglCurrentPaletteMatrix, index);}
extern "C" void APIENTRY glCurrentPaletteMatrix(GLint index) {return (*pglCurrentPaletteMatrix)(index);}
static void wrap_glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
static void (APIENTRYP pglDebugMessageCallback)(GLDEBUGPROC callback, const void *userParam) = wrap_glDebugMessageCallback;
static void wrap_glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {return trampoline<void>("glDebugMessageCallback", "glDebugMessageCallbackARB", "glDebugMessageCallbackAMD", nullptr, &pglDebugMessageCallback, callback, userParam);}
extern "C" void APIENTRY glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {return (*pglDebugMessageCallback)(callback, userParam);}
static void wrap_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
static void (APIENTRYP pglDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) = wrap_glDebugMessageControl;
static void wrap_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {return trampoline<void>("glDebugMessageControl", "glDebugMessageControlARB", nullptr, nullptr, &pglDebugMessageControl, source, type, severity, count, ids, enabled);}
extern "C" void APIENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {return (*pglDebugMessageControl)(source, type, severity, count, ids, enabled);}
static void wrap_glDebugMessageEnable(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
static void (APIENTRYP pglDebugMessageEnable)(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) = wrap_glDebugMessageEnable;
static void wrap_glDebugMessageEnable(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {return trampoline<void>("glDebugMessageEnable", "glDebugMessageEnableAMD", nullptr, nullptr, &pglDebugMessageEnable, category, severity, count, ids, enabled);}
extern "C" void APIENTRY glDebugMessageEnable(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {return (*pglDebugMessageEnable)(category, severity, count, ids, enabled);}
static void wrap_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
static void (APIENTRYP pglDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) = wrap_glDebugMessageInsert;
static void wrap_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {return trampoline<void>("glDebugMessageInsert", "glDebugMessageInsertARB", "glDebugMessageInsertAMD", nullptr, &pglDebugMessageInsert, source, type, id, severity, length, buf);}
extern "C" void APIENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {return (*pglDebugMessageInsert)(source, type, id, severity, length, buf);}
static void wrap_glDeform(GLbitfield mask);
static void (APIENTRYP pglDeform)(GLbitfield mask) = wrap_glDeform;
static void wrap_glDeform(GLbitfield mask) {return trampoline<void>("glDeform", "glDeformSGIX", nullptr, nullptr, &pglDeform, mask);}
extern "C" void APIENTRY glDeform(GLbitfield mask) {return (*pglDeform)(mask);}
static void wrap_glDeformationMap3d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
static void (APIENTRYP pglDeformationMap3d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) = wrap_glDeformationMap3d;
static void wrap_glDeformationMap3d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) {return trampoline<void>("glDeformationMap3d", "glDeformationMap3dSGIX", nullptr, nullptr, &pglDeformationMap3d, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);}
extern "C" void APIENTRY glDeformationMap3d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) {return (*pglDeformationMap3d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);}
static void wrap_glDeformationMap3f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
static void (APIENTRYP pglDeformationMap3f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) = wrap_glDeformationMap3f;
static void wrap_glDeformationMap3f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) {return trampoline<void>("glDeformationMap3f", "glDeformationMap3fSGIX", nullptr, nullptr, &pglDeformationMap3f, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);}
extern "C" void APIENTRY glDeformationMap3f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) {return (*pglDeformationMap3f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);}
static void wrap_glDeleteAsyncMarkers(GLuint marker, GLsizei range);
static void (APIENTRYP pglDeleteAsyncMarkers)(GLuint marker, GLsizei range) = wrap_glDeleteAsyncMarkers;
static void wrap_glDeleteAsyncMarkers(GLuint marker, GLsizei range) {return trampoline<void>("glDeleteAsyncMarkers", "glDeleteAsyncMarkersSGIX", nullptr, nullptr, &pglDeleteAsyncMarkers, marker, range);}
extern "C" void APIENTRY glDeleteAsyncMarkers(GLuint marker, GLsizei range) {return (*pglDeleteAsyncMarkers)(marker, range);}
static void wrap_glDeleteBuffers(GLsizei n, const GLuint *buffers);
static void (APIENTRYP pglDeleteBuffers)(GLsizei n, const GLuint *buffers) = wrap_glDeleteBuffers;
static void wrap_glDeleteBuffers(GLsizei n, const GLuint *buffers) {return trampoline<void>("glDeleteBuffers", "glDeleteBuffersARB", nullptr, nullptr, &pglDeleteBuffers, n, buffers);}
extern "C" void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers) {return (*pglDeleteBuffers)(n, buffers);}
static void wrap_glDeleteCommandLists(GLsizei n, const GLuint *lists);
static void (APIENTRYP pglDeleteCommandLists)(GLsizei n, const GLuint *lists) = wrap_glDeleteCommandLists;
static void wrap_glDeleteCommandLists(GLsizei n, const GLuint *lists) {return trampoline<void>("glDeleteCommandLists", "glDeleteCommandListsNV", nullptr, nullptr, &pglDeleteCommandLists, n, lists);}
extern "C" void APIENTRY glDeleteCommandLists(GLsizei n, const GLuint *lists) {return (*pglDeleteCommandLists)(n, lists);}
static void wrap_glDeleteFences(GLsizei n, const GLuint *fences);
static void (APIENTRYP pglDeleteFences)(GLsizei n, const GLuint *fences) = wrap_glDeleteFences;
static void wrap_glDeleteFences(GLsizei n, const GLuint *fences) {return trampoline<void>("glDeleteFences", "glDeleteFencesAPPLE", "glDeleteFencesNV", nullptr, &pglDeleteFences, n, fences);}
extern "C" void APIENTRY glDeleteFences(GLsizei n, const GLuint *fences) {return (*pglDeleteFences)(n, fences);}
static void wrap_glDeleteFragmentShader(GLuint id);
static void (APIENTRYP pglDeleteFragmentShader)(GLuint id) = wrap_glDeleteFragmentShader;
static void wrap_glDeleteFragmentShader(GLuint id) {return trampoline<void>("glDeleteFragmentShader", "glDeleteFragmentShaderATI", nullptr, nullptr, &pglDeleteFragmentShader, id);}
extern "C" void APIENTRY glDeleteFragmentShader(GLuint id) {return (*pglDeleteFragmentShader)(id);}
static void wrap_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
static void (APIENTRYP pglDeleteFramebuffers)(GLsizei n, const GLuint *framebuffers) = wrap_glDeleteFramebuffers;
static void wrap_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {return trampoline<void>("glDeleteFramebuffers", "glDeleteFramebuffersEXT", nullptr, nullptr, &pglDeleteFramebuffers, n, framebuffers);}
extern "C" void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {return (*pglDeleteFramebuffers)(n, framebuffers);}
static void wrap_glDeleteLists(GLuint list, GLsizei range);
static void (APIENTRYP pglDeleteLists)(GLuint list, GLsizei range) = wrap_glDeleteLists;
static void wrap_glDeleteLists(GLuint list, GLsizei range) {return trampoline<void>("glDeleteLists", nullptr, nullptr, nullptr, &pglDeleteLists, list, range);}
extern "C" void APIENTRY glDeleteLists(GLuint list, GLsizei range) {return (*pglDeleteLists)(list, range);}
static void wrap_glDeleteNamedString(GLint namelen, const GLchar *name);
static void (APIENTRYP pglDeleteNamedString)(GLint namelen, const GLchar *name) = wrap_glDeleteNamedString;
static void wrap_glDeleteNamedString(GLint namelen, const GLchar *name) {return trampoline<void>("glDeleteNamedString", "glDeleteNamedStringARB", nullptr, nullptr, &pglDeleteNamedString, namelen, name);}
extern "C" void APIENTRY glDeleteNamedString(GLint namelen, const GLchar *name) {return (*pglDeleteNamedString)(namelen, name);}
static void wrap_glDeleteNames(GLenum identifier, GLuint num, const GLuint *names);
static void (APIENTRYP pglDeleteNames)(GLenum identifier, GLuint num, const GLuint *names) = wrap_glDeleteNames;
static void wrap_glDeleteNames(GLenum identifier, GLuint num, const GLuint *names) {return trampoline<void>("glDeleteNames", "glDeleteNamesAMD", nullptr, nullptr, &pglDeleteNames, identifier, num, names);}
extern "C" void APIENTRY glDeleteNames(GLenum identifier, GLuint num, const GLuint *names) {return (*pglDeleteNames)(identifier, num, names);}
static void wrap_glDeleteObject(GLhandleARB obj);
static void (APIENTRYP pglDeleteObject)(GLhandleARB obj) = wrap_glDeleteObject;
static void wrap_glDeleteObject(GLhandleARB obj) {return trampoline<void>("glDeleteObject", "glDeleteObjectARB", nullptr, nullptr, &pglDeleteObject, obj);}
extern "C" void APIENTRY glDeleteObject(GLhandleARB obj) {return (*pglDeleteObject)(obj);}
static void wrap_glDeleteOcclusionQueries(GLsizei n, const GLuint *ids);
static void (APIENTRYP pglDeleteOcclusionQueries)(GLsizei n, const GLuint *ids) = wrap_glDeleteOcclusionQueries;
static void wrap_glDeleteOcclusionQueries(GLsizei n, const GLuint *ids) {return trampoline<void>("glDeleteOcclusionQueries", "glDeleteOcclusionQueriesNV", nullptr, nullptr, &pglDeleteOcclusionQueries, n, ids);}
extern "C" void APIENTRY glDeleteOcclusionQueries(GLsizei n, const GLuint *ids) {return (*pglDeleteOcclusionQueries)(n, ids);}
static void wrap_glDeletePaths(GLuint path, GLsizei range);
static void (APIENTRYP pglDeletePaths)(GLuint path, GLsizei range) = wrap_glDeletePaths;
static void wrap_glDeletePaths(GLuint path, GLsizei range) {return trampoline<void>("glDeletePaths", "glDeletePathsNV", nullptr, nullptr, &pglDeletePaths, path, range);}
extern "C" void APIENTRY glDeletePaths(GLuint path, GLsizei range) {return (*pglDeletePaths)(path, range);}
static void wrap_glDeletePerfMonitors(GLsizei n, GLuint *monitors);
static void (APIENTRYP pglDeletePerfMonitors)(GLsizei n, GLuint *monitors) = wrap_glDeletePerfMonitors;
static void wrap_glDeletePerfMonitors(GLsizei n, GLuint *monitors) {return trampoline<void>("glDeletePerfMonitors", "glDeletePerfMonitorsAMD", nullptr, nullptr, &pglDeletePerfMonitors, n, monitors);}
extern "C" void APIENTRY glDeletePerfMonitors(GLsizei n, GLuint *monitors) {return (*pglDeletePerfMonitors)(n, monitors);}
static void wrap_glDeletePerfQuery(GLuint queryHandle);
static void (APIENTRYP pglDeletePerfQuery)(GLuint queryHandle) = wrap_glDeletePerfQuery;
static void wrap_glDeletePerfQuery(GLuint queryHandle) {return trampoline<void>("glDeletePerfQuery", "glDeletePerfQueryINTEL", nullptr, nullptr, &pglDeletePerfQuery, queryHandle);}
extern "C" void APIENTRY glDeletePerfQuery(GLuint queryHandle) {return (*pglDeletePerfQuery)(queryHandle);}
static void wrap_glDeleteProgram(GLuint program);
static void (APIENTRYP pglDeleteProgram)(GLuint program) = wrap_glDeleteProgram;
static void wrap_glDeleteProgram(GLuint program) {return trampoline<void>("glDeleteProgram", nullptr, nullptr, nullptr, &pglDeleteProgram, program);}
extern "C" void APIENTRY glDeleteProgram(GLuint program) {return (*pglDeleteProgram)(program);}
static void wrap_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
static void (APIENTRYP pglDeleteProgramPipelines)(GLsizei n, const GLuint *pipelines) = wrap_glDeleteProgramPipelines;
static void wrap_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {return trampoline<void>("glDeleteProgramPipelines", nullptr, nullptr, nullptr, &pglDeleteProgramPipelines, n, pipelines);}
extern "C" void APIENTRY glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {return (*pglDeleteProgramPipelines)(n, pipelines);}
static void wrap_glDeletePrograms(GLsizei n, const GLuint *programs);
static void (APIENTRYP pglDeletePrograms)(GLsizei n, const GLuint *programs) = wrap_glDeletePrograms;
static void wrap_glDeletePrograms(GLsizei n, const GLuint *programs) {return trampoline<void>("glDeletePrograms", "glDeleteProgramsARB", "glDeleteProgramsNV", nullptr, &pglDeletePrograms, n, programs);}
extern "C" void APIENTRY glDeletePrograms(GLsizei n, const GLuint *programs) {return (*pglDeletePrograms)(n, programs);}
static void wrap_glDeleteQueries(GLsizei n, const GLuint *ids);
static void (APIENTRYP pglDeleteQueries)(GLsizei n, const GLuint *ids) = wrap_glDeleteQueries;
static void wrap_glDeleteQueries(GLsizei n, const GLuint *ids) {return trampoline<void>("glDeleteQueries", "glDeleteQueriesARB", nullptr, nullptr, &pglDeleteQueries, n, ids);}
extern "C" void APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids) {return (*pglDeleteQueries)(n, ids);}
static void wrap_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
static void (APIENTRYP pglDeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers) = wrap_glDeleteRenderbuffers;
static void wrap_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {return trampoline<void>("glDeleteRenderbuffers", "glDeleteRenderbuffersEXT", nullptr, nullptr, &pglDeleteRenderbuffers, n, renderbuffers);}
extern "C" void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {return (*pglDeleteRenderbuffers)(n, renderbuffers);}
static void wrap_glDeleteSamplers(GLsizei count, const GLuint *samplers);
static void (APIENTRYP pglDeleteSamplers)(GLsizei count, const GLuint *samplers) = wrap_glDeleteSamplers;
static void wrap_glDeleteSamplers(GLsizei count, const GLuint *samplers) {return trampoline<void>("glDeleteSamplers", nullptr, nullptr, nullptr, &pglDeleteSamplers, count, samplers);}
extern "C" void APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers) {return (*pglDeleteSamplers)(count, samplers);}
static void wrap_glDeleteShader(GLuint shader);
static void (APIENTRYP pglDeleteShader)(GLuint shader) = wrap_glDeleteShader;
static void wrap_glDeleteShader(GLuint shader) {return trampoline<void>("glDeleteShader", nullptr, nullptr, nullptr, &pglDeleteShader, shader);}
extern "C" void APIENTRY glDeleteShader(GLuint shader) {return (*pglDeleteShader)(shader);}
static void wrap_glDeleteStates(GLsizei n, const GLuint *states);
static void (APIENTRYP pglDeleteStates)(GLsizei n, const GLuint *states) = wrap_glDeleteStates;
static void wrap_glDeleteStates(GLsizei n, const GLuint *states) {return trampoline<void>("glDeleteStates", "glDeleteStatesNV", nullptr, nullptr, &pglDeleteStates, n, states);}
extern "C" void APIENTRY glDeleteStates(GLsizei n, const GLuint *states) {return (*pglDeleteStates)(n, states);}
static void wrap_glDeleteSync(GLsync sync);
static void (APIENTRYP pglDeleteSync)(GLsync sync) = wrap_glDeleteSync;
static void wrap_glDeleteSync(GLsync sync) {return trampoline<void>("glDeleteSync", nullptr, nullptr, nullptr, &pglDeleteSync, sync);}
extern "C" void APIENTRY glDeleteSync(GLsync sync) {return (*pglDeleteSync)(sync);}
static void wrap_glDeleteTextures(GLsizei n, const GLuint *textures);
static void (APIENTRYP pglDeleteTextures)(GLsizei n, const GLuint *textures) = wrap_glDeleteTextures;
static void wrap_glDeleteTextures(GLsizei n, const GLuint *textures) {return trampoline<void>("glDeleteTextures", "glDeleteTexturesEXT", nullptr, nullptr, &pglDeleteTextures, n, textures);}
extern "C" void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures) {return (*pglDeleteTextures)(n, textures);}
static void wrap_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
static void (APIENTRYP pglDeleteTransformFeedbacks)(GLsizei n, const GLuint *ids) = wrap_glDeleteTransformFeedbacks;
static void wrap_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {return trampoline<void>("glDeleteTransformFeedbacks", "glDeleteTransformFeedbacksNV", nullptr, nullptr, &pglDeleteTransformFeedbacks, n, ids);}
extern "C" void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {return (*pglDeleteTransformFeedbacks)(n, ids);}
static void wrap_glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
static void (APIENTRYP pglDeleteVertexArrays)(GLsizei n, const GLuint *arrays) = wrap_glDeleteVertexArrays;
static void wrap_glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {return trampoline<void>("glDeleteVertexArrays", "glDeleteVertexArraysAPPLE", nullptr, nullptr, &pglDeleteVertexArrays, n, arrays);}
extern "C" void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {return (*pglDeleteVertexArrays)(n, arrays);}
static void wrap_glDeleteVertexShader(GLuint id);
static void (APIENTRYP pglDeleteVertexShader)(GLuint id) = wrap_glDeleteVertexShader;
static void wrap_glDeleteVertexShader(GLuint id) {return trampoline<void>("glDeleteVertexShader", "glDeleteVertexShaderEXT", nullptr, nullptr, &pglDeleteVertexShader, id);}
extern "C" void APIENTRY glDeleteVertexShader(GLuint id) {return (*pglDeleteVertexShader)(id);}
static void wrap_glDepthBounds(GLclampd zmin, GLclampd zmax);
static void (APIENTRYP pglDepthBounds)(GLclampd zmin, GLclampd zmax) = wrap_glDepthBounds;
static void wrap_glDepthBounds(GLclampd zmin, GLclampd zmax) {return trampoline<void>("glDepthBounds", "glDepthBoundsEXT", nullptr, nullptr, &pglDepthBounds, zmin, zmax);}
extern "C" void APIENTRY glDepthBounds(GLclampd zmin, GLclampd zmax) {return (*pglDepthBounds)(zmin, zmax);}
static void wrap_glDepthBoundsd(GLdouble zmin, GLdouble zmax);
static void (APIENTRYP pglDepthBoundsd)(GLdouble zmin, GLdouble zmax) = wrap_glDepthBoundsd;
static void wrap_glDepthBoundsd(GLdouble zmin, GLdouble zmax) {return trampoline<void>("glDepthBoundsd", "glDepthBoundsdNV", nullptr, nullptr, &pglDepthBoundsd, zmin, zmax);}
extern "C" void APIENTRY glDepthBoundsd(GLdouble zmin, GLdouble zmax) {return (*pglDepthBoundsd)(zmin, zmax);}
static void wrap_glDepthFunc(GLenum func);
static void (APIENTRYP pglDepthFunc)(GLenum func) = wrap_glDepthFunc;
static void wrap_glDepthFunc(GLenum func) {return trampoline<void>("glDepthFunc", nullptr, nullptr, nullptr, &pglDepthFunc, func);}
extern "C" void APIENTRY glDepthFunc(GLenum func) {return (*pglDepthFunc)(func);}
static void wrap_glDepthMask(GLboolean flag);
static void (APIENTRYP pglDepthMask)(GLboolean flag) = wrap_glDepthMask;
static void wrap_glDepthMask(GLboolean flag) {return trampoline<void>("glDepthMask", nullptr, nullptr, nullptr, &pglDepthMask, flag);}
extern "C" void APIENTRY glDepthMask(GLboolean flag) {return (*pglDepthMask)(flag);}
static void wrap_glDepthRange(GLclampd near_val, GLclampd far_val);
static void (APIENTRYP pglDepthRange)(GLclampd near_val, GLclampd far_val) = wrap_glDepthRange;
static void wrap_glDepthRange(GLclampd near_val, GLclampd far_val) {return trampoline<void>("glDepthRange", nullptr, nullptr, nullptr, &pglDepthRange, near_val, far_val);}
extern "C" void APIENTRY glDepthRange(GLclampd near_val, GLclampd far_val) {return (*pglDepthRange)(near_val, far_val);}
static void wrap_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
static void (APIENTRYP pglDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble *v) = wrap_glDepthRangeArrayv;
static void wrap_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {return trampoline<void>("glDepthRangeArrayv", nullptr, nullptr, nullptr, &pglDepthRangeArrayv, first, count, v);}
extern "C" void APIENTRY glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {return (*pglDepthRangeArrayv)(first, count, v);}
static void wrap_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
static void (APIENTRYP pglDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f) = wrap_glDepthRangeIndexed;
static void wrap_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {return trampoline<void>("glDepthRangeIndexed", nullptr, nullptr, nullptr, &pglDepthRangeIndexed, index, n, f);}
extern "C" void APIENTRY glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {return (*pglDepthRangeIndexed)(index, n, f);}
static void wrap_glDepthRanged(GLdouble zNear, GLdouble zFar);
static void (APIENTRYP pglDepthRanged)(GLdouble zNear, GLdouble zFar) = wrap_glDepthRanged;
static void wrap_glDepthRanged(GLdouble zNear, GLdouble zFar) {return trampoline<void>("glDepthRanged", "glDepthRangedNV", nullptr, nullptr, &pglDepthRanged, zNear, zFar);}
extern "C" void APIENTRY glDepthRanged(GLdouble zNear, GLdouble zFar) {return (*pglDepthRanged)(zNear, zFar);}
static void wrap_glDepthRangef(GLfloat n, GLfloat f);
static void (APIENTRYP pglDepthRangef)(GLfloat n, GLfloat f) = wrap_glDepthRangef;
static void wrap_glDepthRangef(GLfloat n, GLfloat f) {return trampoline<void>("glDepthRangef", "glDepthRangefOES", nullptr, nullptr, &pglDepthRangef, n, f);}
extern "C" void APIENTRY glDepthRangef(GLfloat n, GLfloat f) {return (*pglDepthRangef)(n, f);}
static void wrap_glDepthRangex(GLfixed n, GLfixed f);
static void (APIENTRYP pglDepthRangex)(GLfixed n, GLfixed f) = wrap_glDepthRangex;
static void wrap_glDepthRangex(GLfixed n, GLfixed f) {return trampoline<void>("glDepthRangex", "glDepthRangexOES", nullptr, nullptr, &pglDepthRangex, n, f);}
extern "C" void APIENTRY glDepthRangex(GLfixed n, GLfixed f) {return (*pglDepthRangex)(n, f);}
static void wrap_glDetachObject(GLhandleARB containerObj, GLhandleARB attachedObj);
static void (APIENTRYP pglDetachObject)(GLhandleARB containerObj, GLhandleARB attachedObj) = wrap_glDetachObject;
static void wrap_glDetachObject(GLhandleARB containerObj, GLhandleARB attachedObj) {return trampoline<void>("glDetachObject", "glDetachObjectARB", nullptr, nullptr, &pglDetachObject, containerObj, attachedObj);}
extern "C" void APIENTRY glDetachObject(GLhandleARB containerObj, GLhandleARB attachedObj) {return (*pglDetachObject)(containerObj, attachedObj);}
static void wrap_glDetachShader(GLuint program, GLuint shader);
static void (APIENTRYP pglDetachShader)(GLuint program, GLuint shader) = wrap_glDetachShader;
static void wrap_glDetachShader(GLuint program, GLuint shader) {return trampoline<void>("glDetachShader", nullptr, nullptr, nullptr, &pglDetachShader, program, shader);}
extern "C" void APIENTRY glDetachShader(GLuint program, GLuint shader) {return (*pglDetachShader)(program, shader);}
static void wrap_glDetailTexFunc(GLenum target, GLsizei n, const GLfloat *points);
static void (APIENTRYP pglDetailTexFunc)(GLenum target, GLsizei n, const GLfloat *points) = wrap_glDetailTexFunc;
static void wrap_glDetailTexFunc(GLenum target, GLsizei n, const GLfloat *points) {return trampoline<void>("glDetailTexFunc", "glDetailTexFuncSGIS", nullptr, nullptr, &pglDetailTexFunc, target, n, points);}
extern "C" void APIENTRY glDetailTexFunc(GLenum target, GLsizei n, const GLfloat *points) {return (*pglDetailTexFunc)(target, n, points);}
static void wrap_glDisable(GLenum cap);
static void (APIENTRYP pglDisable)(GLenum cap) = wrap_glDisable;
static void wrap_glDisable(GLenum cap) {return trampoline<void>("glDisable", nullptr, nullptr, nullptr, &pglDisable, cap);}
extern "C" void APIENTRY glDisable(GLenum cap) {return (*pglDisable)(cap);}
static void wrap_glDisableClientState(GLenum cap);
static void (APIENTRYP pglDisableClientState)(GLenum cap) = wrap_glDisableClientState;
static void wrap_glDisableClientState(GLenum cap) {return trampoline<void>("glDisableClientState", nullptr, nullptr, nullptr, &pglDisableClientState, cap);}
extern "C" void APIENTRY glDisableClientState(GLenum cap) {return (*pglDisableClientState)(cap);}
static void wrap_glDisableClientStateIndexed(GLenum array, GLuint index);
static void (APIENTRYP pglDisableClientStateIndexed)(GLenum array, GLuint index) = wrap_glDisableClientStateIndexed;
static void wrap_glDisableClientStateIndexed(GLenum array, GLuint index) {return trampoline<void>("glDisableClientStateIndexed", "glDisableClientStateIndexedEXT", nullptr, nullptr, &pglDisableClientStateIndexed, array, index);}
extern "C" void APIENTRY glDisableClientStateIndexed(GLenum array, GLuint index) {return (*pglDisableClientStateIndexed)(array, index);}
static void wrap_glDisableClientStatei(GLenum array, GLuint index);
static void (APIENTRYP pglDisableClientStatei)(GLenum array, GLuint index) = wrap_glDisableClientStatei;
static void wrap_glDisableClientStatei(GLenum array, GLuint index) {return trampoline<void>("glDisableClientStatei", "glDisableClientStateiEXT", nullptr, nullptr, &pglDisableClientStatei, array, index);}
extern "C" void APIENTRY glDisableClientStatei(GLenum array, GLuint index) {return (*pglDisableClientStatei)(array, index);}
static void wrap_glDisableIndexed(GLenum target, GLuint index);
static void (APIENTRYP pglDisableIndexed)(GLenum target, GLuint index) = wrap_glDisableIndexed;
static void wrap_glDisableIndexed(GLenum target, GLuint index) {return trampoline<void>("glDisableIndexed", "glDisableIndexedEXT", nullptr, nullptr, &pglDisableIndexed, target, index);}
extern "C" void APIENTRY glDisableIndexed(GLenum target, GLuint index) {return (*pglDisableIndexed)(target, index);}
static void wrap_glDisableVariantClientState(GLuint id);
static void (APIENTRYP pglDisableVariantClientState)(GLuint id) = wrap_glDisableVariantClientState;
static void wrap_glDisableVariantClientState(GLuint id) {return trampoline<void>("glDisableVariantClientState", "glDisableVariantClientStateEXT", nullptr, nullptr, &pglDisableVariantClientState, id);}
extern "C" void APIENTRY glDisableVariantClientState(GLuint id) {return (*pglDisableVariantClientState)(id);}
static void wrap_glDisableVertexArray(GLuint vaobj, GLenum array);
static void (APIENTRYP pglDisableVertexArray)(GLuint vaobj, GLenum array) = wrap_glDisableVertexArray;
static void wrap_glDisableVertexArray(GLuint vaobj, GLenum array) {return trampoline<void>("glDisableVertexArray", "glDisableVertexArrayEXT", nullptr, nullptr, &pglDisableVertexArray, vaobj, array);}
extern "C" void APIENTRY glDisableVertexArray(GLuint vaobj, GLenum array) {return (*pglDisableVertexArray)(vaobj, array);}
static void wrap_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
static void (APIENTRYP pglDisableVertexArrayAttrib)(GLuint vaobj, GLuint index) = wrap_glDisableVertexArrayAttrib;
static void wrap_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {return trampoline<void>("glDisableVertexArrayAttrib", "glDisableVertexArrayAttribEXT", nullptr, nullptr, &pglDisableVertexArrayAttrib, vaobj, index);}
extern "C" void APIENTRY glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {return (*pglDisableVertexArrayAttrib)(vaobj, index);}
static void wrap_glDisableVertexAttrib(GLuint index, GLenum pname);
static void (APIENTRYP pglDisableVertexAttrib)(GLuint index, GLenum pname) = wrap_glDisableVertexAttrib;
static void wrap_glDisableVertexAttrib(GLuint index, GLenum pname) {return trampoline<void>("glDisableVertexAttrib", "glDisableVertexAttribAPPLE", nullptr, nullptr, &pglDisableVertexAttrib, index, pname);}
extern "C" void APIENTRY glDisableVertexAttrib(GLuint index, GLenum pname) {return (*pglDisableVertexAttrib)(index, pname);}
static void wrap_glDisableVertexAttribArray(GLuint index);
static void (APIENTRYP pglDisableVertexAttribArray)(GLuint index) = wrap_glDisableVertexAttribArray;
static void wrap_glDisableVertexAttribArray(GLuint index) {return trampoline<void>("glDisableVertexAttribArray", "glDisableVertexAttribArrayARB", nullptr, nullptr, &pglDisableVertexAttribArray, index);}
extern "C" void APIENTRY glDisableVertexAttribArray(GLuint index) {return (*pglDisableVertexAttribArray)(index);}
static void wrap_glDisablei(GLenum target, GLuint index);
static void (APIENTRYP pglDisablei)(GLenum target, GLuint index) = wrap_glDisablei;
static void wrap_glDisablei(GLenum target, GLuint index) {return trampoline<void>("glDisablei", nullptr, nullptr, nullptr, &pglDisablei, target, index);}
extern "C" void APIENTRY glDisablei(GLenum target, GLuint index) {return (*pglDisablei)(target, index);}
static void wrap_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
static void (APIENTRYP pglDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) = wrap_glDispatchCompute;
static void wrap_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {return trampoline<void>("glDispatchCompute", nullptr, nullptr, nullptr, &pglDispatchCompute, num_groups_x, num_groups_y, num_groups_z);}
extern "C" void APIENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {return (*pglDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);}
static void wrap_glDispatchComputeGroupSize(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
static void (APIENTRYP pglDispatchComputeGroupSize)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) = wrap_glDispatchComputeGroupSize;
static void wrap_glDispatchComputeGroupSize(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {return trampoline<void>("glDispatchComputeGroupSize", "glDispatchComputeGroupSizeARB", nullptr, nullptr, &pglDispatchComputeGroupSize, num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);}
extern "C" void APIENTRY glDispatchComputeGroupSize(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {return (*pglDispatchComputeGroupSize)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);}
static void wrap_glDispatchComputeIndirect(GLintptr indirect);
static void (APIENTRYP pglDispatchComputeIndirect)(GLintptr indirect) = wrap_glDispatchComputeIndirect;
static void wrap_glDispatchComputeIndirect(GLintptr indirect) {return trampoline<void>("glDispatchComputeIndirect", nullptr, nullptr, nullptr, &pglDispatchComputeIndirect, indirect);}
extern "C" void APIENTRY glDispatchComputeIndirect(GLintptr indirect) {return (*pglDispatchComputeIndirect)(indirect);}
static void wrap_glDrawArrays(GLenum mode, GLint first, GLsizei count);
static void (APIENTRYP pglDrawArrays)(GLenum mode, GLint first, GLsizei count) = wrap_glDrawArrays;
static void wrap_glDrawArrays(GLenum mode, GLint first, GLsizei count) {return trampoline<void>("glDrawArrays", "glDrawArraysEXT", nullptr, nullptr, &pglDrawArrays, mode, first, count);}
extern "C" void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count) {return (*pglDrawArrays)(mode, first, count);}
static void wrap_glDrawArraysIndirect(GLenum mode, const void *indirect);
static void (APIENTRYP pglDrawArraysIndirect)(GLenum mode, const void *indirect) = wrap_glDrawArraysIndirect;
static void wrap_glDrawArraysIndirect(GLenum mode, const void *indirect) {return trampoline<void>("glDrawArraysIndirect", nullptr, nullptr, nullptr, &pglDrawArraysIndirect, mode, indirect);}
extern "C" void APIENTRY glDrawArraysIndirect(GLenum mode, const void *indirect) {return (*pglDrawArraysIndirect)(mode, indirect);}
static void wrap_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
static void (APIENTRYP pglDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) = wrap_glDrawArraysInstanced;
static void wrap_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {return trampoline<void>("glDrawArraysInstanced", "glDrawArraysInstancedARB", "glDrawArraysInstancedEXT", nullptr, &pglDrawArraysInstanced, mode, first, count, instancecount);}
extern "C" void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {return (*pglDrawArraysInstanced)(mode, first, count, instancecount);}
static void wrap_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
static void (APIENTRYP pglDrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) = wrap_glDrawArraysInstancedBaseInstance;
static void wrap_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {return trampoline<void>("glDrawArraysInstancedBaseInstance", nullptr, nullptr, nullptr, &pglDrawArraysInstancedBaseInstance, mode, first, count, instancecount, baseinstance);}
extern "C" void APIENTRY glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {return (*pglDrawArraysInstancedBaseInstance)(mode, first, count, instancecount, baseinstance);}
static void wrap_glDrawBuffer(GLenum mode);
static void (APIENTRYP pglDrawBuffer)(GLenum mode) = wrap_glDrawBuffer;
static void wrap_glDrawBuffer(GLenum mode) {return trampoline<void>("glDrawBuffer", nullptr, nullptr, nullptr, &pglDrawBuffer, mode);}
extern "C" void APIENTRY glDrawBuffer(GLenum mode) {return (*pglDrawBuffer)(mode);}
static void wrap_glDrawBuffers(GLsizei n, const GLenum *bufs);
static void (APIENTRYP pglDrawBuffers)(GLsizei n, const GLenum *bufs) = wrap_glDrawBuffers;
static void wrap_glDrawBuffers(GLsizei n, const GLenum *bufs) {return trampoline<void>("glDrawBuffers", "glDrawBuffersARB", "glDrawBuffersATI", nullptr, &pglDrawBuffers, n, bufs);}
extern "C" void APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs) {return (*pglDrawBuffers)(n, bufs);}
static void wrap_glDrawCommands(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
static void (APIENTRYP pglDrawCommands)(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) = wrap_glDrawCommands;
static void wrap_glDrawCommands(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) {return trampoline<void>("glDrawCommands", "glDrawCommandsNV", nullptr, nullptr, &pglDrawCommands, primitiveMode, buffer, indirects, sizes, count);}
extern "C" void APIENTRY glDrawCommands(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) {return (*pglDrawCommands)(primitiveMode, buffer, indirects, sizes, count);}
static void wrap_glDrawCommandsAddress(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
static void (APIENTRYP pglDrawCommandsAddress)(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) = wrap_glDrawCommandsAddress;
static void wrap_glDrawCommandsAddress(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) {return trampoline<void>("glDrawCommandsAddress", "glDrawCommandsAddressNV", nullptr, nullptr, &pglDrawCommandsAddress, primitiveMode, indirects, sizes, count);}
extern "C" void APIENTRY glDrawCommandsAddress(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) {return (*pglDrawCommandsAddress)(primitiveMode, indirects, sizes, count);}
static void wrap_glDrawCommandsStates(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
static void (APIENTRYP pglDrawCommandsStates)(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) = wrap_glDrawCommandsStates;
static void wrap_glDrawCommandsStates(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {return trampoline<void>("glDrawCommandsStates", "glDrawCommandsStatesNV", nullptr, nullptr, &pglDrawCommandsStates, buffer, indirects, sizes, states, fbos, count);}
extern "C" void APIENTRY glDrawCommandsStates(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {return (*pglDrawCommandsStates)(buffer, indirects, sizes, states, fbos, count);}
static void wrap_glDrawCommandsStatesAddress(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
static void (APIENTRYP pglDrawCommandsStatesAddress)(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) = wrap_glDrawCommandsStatesAddress;
static void wrap_glDrawCommandsStatesAddress(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {return trampoline<void>("glDrawCommandsStatesAddress", "glDrawCommandsStatesAddressNV", nullptr, nullptr, &pglDrawCommandsStatesAddress, indirects, sizes, states, fbos, count);}
extern "C" void APIENTRY glDrawCommandsStatesAddress(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {return (*pglDrawCommandsStatesAddress)(indirects, sizes, states, fbos, count);}
static void wrap_glDrawElementArray(GLenum mode, GLint first, GLsizei count);
static void (APIENTRYP pglDrawElementArray)(GLenum mode, GLint first, GLsizei count) = wrap_glDrawElementArray;
static void wrap_glDrawElementArray(GLenum mode, GLint first, GLsizei count) {return trampoline<void>("glDrawElementArray", "glDrawElementArrayAPPLE", "glDrawElementArrayATI", nullptr, &pglDrawElementArray, mode, first, count);}
extern "C" void APIENTRY glDrawElementArray(GLenum mode, GLint first, GLsizei count) {return (*pglDrawElementArray)(mode, first, count);}
static void wrap_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
static void (APIENTRYP pglDrawElements)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) = wrap_glDrawElements;
static void wrap_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) {return trampoline<void>("glDrawElements", nullptr, nullptr, nullptr, &pglDrawElements, mode, count, type, indices);}
extern "C" void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) {return (*pglDrawElements)(mode, count, type, indices);}
static void wrap_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
static void (APIENTRYP pglDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) = wrap_glDrawElementsBaseVertex;
static void wrap_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {return trampoline<void>("glDrawElementsBaseVertex", nullptr, nullptr, nullptr, &pglDrawElementsBaseVertex, mode, count, type, indices, basevertex);}
extern "C" void APIENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {return (*pglDrawElementsBaseVertex)(mode, count, type, indices, basevertex);}
static void wrap_glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
static void (APIENTRYP pglDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect) = wrap_glDrawElementsIndirect;
static void wrap_glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {return trampoline<void>("glDrawElementsIndirect", nullptr, nullptr, nullptr, &pglDrawElementsIndirect, mode, type, indirect);}
extern "C" void APIENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {return (*pglDrawElementsIndirect)(mode, type, indirect);}
static void wrap_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
static void (APIENTRYP pglDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) = wrap_glDrawElementsInstanced;
static void wrap_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {return trampoline<void>("glDrawElementsInstanced", "glDrawElementsInstancedARB", "glDrawElementsInstancedEXT", nullptr, &pglDrawElementsInstanced, mode, count, type, indices, instancecount);}
extern "C" void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {return (*pglDrawElementsInstanced)(mode, count, type, indices, instancecount);}
static void wrap_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
static void (APIENTRYP pglDrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) = wrap_glDrawElementsInstancedBaseInstance;
static void wrap_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {return trampoline<void>("glDrawElementsInstancedBaseInstance", nullptr, nullptr, nullptr, &pglDrawElementsInstancedBaseInstance, mode, count, type, indices, instancecount, baseinstance);}
extern "C" void APIENTRY glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {return (*pglDrawElementsInstancedBaseInstance)(mode, count, type, indices, instancecount, baseinstance);}
static void wrap_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
static void (APIENTRYP pglDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) = wrap_glDrawElementsInstancedBaseVertex;
static void wrap_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {return trampoline<void>("glDrawElementsInstancedBaseVertex", nullptr, nullptr, nullptr, &pglDrawElementsInstancedBaseVertex, mode, count, type, indices, instancecount, basevertex);}
extern "C" void APIENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {return (*pglDrawElementsInstancedBaseVertex)(mode, count, type, indices, instancecount, basevertex);}
static void wrap_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
static void (APIENTRYP pglDrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) = wrap_glDrawElementsInstancedBaseVertexBaseInstance;
static void wrap_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {return trampoline<void>("glDrawElementsInstancedBaseVertexBaseInstance", nullptr, nullptr, nullptr, &pglDrawElementsInstancedBaseVertexBaseInstance, mode, count, type, indices, instancecount, basevertex, baseinstance);}
extern "C" void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {return (*pglDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, instancecount, basevertex, baseinstance);}
static void wrap_glDrawMeshArrays(GLenum mode, GLint first, GLsizei count, GLsizei width);
static void (APIENTRYP pglDrawMeshArrays)(GLenum mode, GLint first, GLsizei count, GLsizei width) = wrap_glDrawMeshArrays;
static void wrap_glDrawMeshArrays(GLenum mode, GLint first, GLsizei count, GLsizei width) {return trampoline<void>("glDrawMeshArrays", "glDrawMeshArraysSUN", nullptr, nullptr, &pglDrawMeshArrays, mode, first, count, width);}
extern "C" void APIENTRY glDrawMeshArrays(GLenum mode, GLint first, GLsizei count, GLsizei width) {return (*pglDrawMeshArrays)(mode, first, count, width);}
static void wrap_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glDrawPixels;
static void wrap_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glDrawPixels", nullptr, nullptr, nullptr, &pglDrawPixels, width, height, format, type, pixels);}
extern "C" void APIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglDrawPixels)(width, height, format, type, pixels);}
static void wrap_glDrawRangeElementArray(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
static void (APIENTRYP pglDrawRangeElementArray)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) = wrap_glDrawRangeElementArray;
static void wrap_glDrawRangeElementArray(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {return trampoline<void>("glDrawRangeElementArray", "glDrawRangeElementArrayAPPLE", "glDrawRangeElementArrayATI", nullptr, &pglDrawRangeElementArray, mode, start, end, first, count);}
extern "C" void APIENTRY glDrawRangeElementArray(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {return (*pglDrawRangeElementArray)(mode, start, end, first, count);}
static void wrap_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
static void (APIENTRYP pglDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) = wrap_glDrawRangeElements;
static void wrap_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) {return trampoline<void>("glDrawRangeElements", "glDrawRangeElementsEXT", nullptr, nullptr, &pglDrawRangeElements, mode, start, end, count, type, indices);}
extern "C" void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) {return (*pglDrawRangeElements)(mode, start, end, count, type, indices);}
static void wrap_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
static void (APIENTRYP pglDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) = wrap_glDrawRangeElementsBaseVertex;
static void wrap_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {return trampoline<void>("glDrawRangeElementsBaseVertex", nullptr, nullptr, nullptr, &pglDrawRangeElementsBaseVertex, mode, start, end, count, type, indices, basevertex);}
extern "C" void APIENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {return (*pglDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);}
static void wrap_glDrawTexture(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
static void (APIENTRYP pglDrawTexture)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) = wrap_glDrawTexture;
static void wrap_glDrawTexture(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {return trampoline<void>("glDrawTexture", "glDrawTextureNV", nullptr, nullptr, &pglDrawTexture, texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);}
extern "C" void APIENTRY glDrawTexture(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {return (*pglDrawTexture)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);}
static void wrap_glDrawTransformFeedback(GLenum mode, GLuint id);
static void (APIENTRYP pglDrawTransformFeedback)(GLenum mode, GLuint id) = wrap_glDrawTransformFeedback;
static void wrap_glDrawTransformFeedback(GLenum mode, GLuint id) {return trampoline<void>("glDrawTransformFeedback", "glDrawTransformFeedbackNV", nullptr, nullptr, &pglDrawTransformFeedback, mode, id);}
extern "C" void APIENTRY glDrawTransformFeedback(GLenum mode, GLuint id) {return (*pglDrawTransformFeedback)(mode, id);}
static void wrap_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
static void (APIENTRYP pglDrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount) = wrap_glDrawTransformFeedbackInstanced;
static void wrap_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {return trampoline<void>("glDrawTransformFeedbackInstanced", nullptr, nullptr, nullptr, &pglDrawTransformFeedbackInstanced, mode, id, instancecount);}
extern "C" void APIENTRY glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {return (*pglDrawTransformFeedbackInstanced)(mode, id, instancecount);}
static void wrap_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
static void (APIENTRYP pglDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream) = wrap_glDrawTransformFeedbackStream;
static void wrap_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {return trampoline<void>("glDrawTransformFeedbackStream", nullptr, nullptr, nullptr, &pglDrawTransformFeedbackStream, mode, id, stream);}
extern "C" void APIENTRY glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {return (*pglDrawTransformFeedbackStream)(mode, id, stream);}
static void wrap_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
static void (APIENTRYP pglDrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) = wrap_glDrawTransformFeedbackStreamInstanced;
static void wrap_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {return trampoline<void>("glDrawTransformFeedbackStreamInstanced", nullptr, nullptr, nullptr, &pglDrawTransformFeedbackStreamInstanced, mode, id, stream, instancecount);}
extern "C" void APIENTRY glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {return (*pglDrawTransformFeedbackStreamInstanced)(mode, id, stream, instancecount);}
static void wrap_glEGLImageTargetRenderbufferStorage(GLenum target, GLeglImageOES image);
static void (APIENTRYP pglEGLImageTargetRenderbufferStorage)(GLenum target, GLeglImageOES image) = wrap_glEGLImageTargetRenderbufferStorage;
static void wrap_glEGLImageTargetRenderbufferStorage(GLenum target, GLeglImageOES image) {return trampoline<void>("glEGLImageTargetRenderbufferStorage", "glEGLImageTargetRenderbufferStorageOES", nullptr, nullptr, &pglEGLImageTargetRenderbufferStorage, target, image);}
extern "C" void APIENTRY glEGLImageTargetRenderbufferStorage(GLenum target, GLeglImageOES image) {return (*pglEGLImageTargetRenderbufferStorage)(target, image);}
static void wrap_glEGLImageTargetTexture2D(GLenum target, GLeglImageOES image);
static void (APIENTRYP pglEGLImageTargetTexture2D)(GLenum target, GLeglImageOES image) = wrap_glEGLImageTargetTexture2D;
static void wrap_glEGLImageTargetTexture2D(GLenum target, GLeglImageOES image) {return trampoline<void>("glEGLImageTargetTexture2D", "glEGLImageTargetTexture2DOES", nullptr, nullptr, &pglEGLImageTargetTexture2D, target, image);}
extern "C" void APIENTRY glEGLImageTargetTexture2D(GLenum target, GLeglImageOES image) {return (*pglEGLImageTargetTexture2D)(target, image);}
static void wrap_glEdgeFlag(GLboolean flag);
static void (APIENTRYP pglEdgeFlag)(GLboolean flag) = wrap_glEdgeFlag;
static void wrap_glEdgeFlag(GLboolean flag) {return trampoline<void>("glEdgeFlag", nullptr, nullptr, nullptr, &pglEdgeFlag, flag);}
extern "C" void APIENTRY glEdgeFlag(GLboolean flag) {return (*pglEdgeFlag)(flag);}
static void wrap_glEdgeFlagFormat(GLsizei stride);
static void (APIENTRYP pglEdgeFlagFormat)(GLsizei stride) = wrap_glEdgeFlagFormat;
static void wrap_glEdgeFlagFormat(GLsizei stride) {return trampoline<void>("glEdgeFlagFormat", "glEdgeFlagFormatNV", nullptr, nullptr, &pglEdgeFlagFormat, stride);}
extern "C" void APIENTRY glEdgeFlagFormat(GLsizei stride) {return (*pglEdgeFlagFormat)(stride);}
static void wrap_glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
static void (APIENTRYP pglEdgeFlagPointer)(GLsizei stride, const GLvoid *ptr) = wrap_glEdgeFlagPointer;
static void wrap_glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr) {return trampoline<void>("glEdgeFlagPointer", "glEdgeFlagPointerEXT", nullptr, nullptr, &pglEdgeFlagPointer, stride, ptr);}
extern "C" void APIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr) {return (*pglEdgeFlagPointer)(stride, ptr);}
static void wrap_glEdgeFlagPointerList(GLint stride, const GLboolean **pointer, GLint ptrstride);
static void (APIENTRYP pglEdgeFlagPointerList)(GLint stride, const GLboolean **pointer, GLint ptrstride) = wrap_glEdgeFlagPointerList;
static void wrap_glEdgeFlagPointerList(GLint stride, const GLboolean **pointer, GLint ptrstride) {return trampoline<void>("glEdgeFlagPointerList", "glEdgeFlagPointerListIBM", nullptr, nullptr, &pglEdgeFlagPointerList, stride, pointer, ptrstride);}
extern "C" void APIENTRY glEdgeFlagPointerList(GLint stride, const GLboolean **pointer, GLint ptrstride) {return (*pglEdgeFlagPointerList)(stride, pointer, ptrstride);}
static void wrap_glEdgeFlagv(const GLboolean *flag);
static void (APIENTRYP pglEdgeFlagv)(const GLboolean *flag) = wrap_glEdgeFlagv;
static void wrap_glEdgeFlagv(const GLboolean *flag) {return trampoline<void>("glEdgeFlagv", nullptr, nullptr, nullptr, &pglEdgeFlagv, flag);}
extern "C" void APIENTRY glEdgeFlagv(const GLboolean *flag) {return (*pglEdgeFlagv)(flag);}
static void wrap_glElementPointer(GLenum type, const void *pointer);
static void (APIENTRYP pglElementPointer)(GLenum type, const void *pointer) = wrap_glElementPointer;
static void wrap_glElementPointer(GLenum type, const void *pointer) {return trampoline<void>("glElementPointer", "glElementPointerAPPLE", "glElementPointerATI", nullptr, &pglElementPointer, type, pointer);}
extern "C" void APIENTRY glElementPointer(GLenum type, const void *pointer) {return (*pglElementPointer)(type, pointer);}
static void wrap_glEnable(GLenum cap);
static void (APIENTRYP pglEnable)(GLenum cap) = wrap_glEnable;
static void wrap_glEnable(GLenum cap) {return trampoline<void>("glEnable", nullptr, nullptr, nullptr, &pglEnable, cap);}
extern "C" void APIENTRY glEnable(GLenum cap) {return (*pglEnable)(cap);}
static void wrap_glEnableClientState(GLenum cap);
static void (APIENTRYP pglEnableClientState)(GLenum cap) = wrap_glEnableClientState;
static void wrap_glEnableClientState(GLenum cap) {return trampoline<void>("glEnableClientState", nullptr, nullptr, nullptr, &pglEnableClientState, cap);}
extern "C" void APIENTRY glEnableClientState(GLenum cap) {return (*pglEnableClientState)(cap);}
static void wrap_glEnableClientStateIndexed(GLenum array, GLuint index);
static void (APIENTRYP pglEnableClientStateIndexed)(GLenum array, GLuint index) = wrap_glEnableClientStateIndexed;
static void wrap_glEnableClientStateIndexed(GLenum array, GLuint index) {return trampoline<void>("glEnableClientStateIndexed", "glEnableClientStateIndexedEXT", nullptr, nullptr, &pglEnableClientStateIndexed, array, index);}
extern "C" void APIENTRY glEnableClientStateIndexed(GLenum array, GLuint index) {return (*pglEnableClientStateIndexed)(array, index);}
static void wrap_glEnableClientStatei(GLenum array, GLuint index);
static void (APIENTRYP pglEnableClientStatei)(GLenum array, GLuint index) = wrap_glEnableClientStatei;
static void wrap_glEnableClientStatei(GLenum array, GLuint index) {return trampoline<void>("glEnableClientStatei", "glEnableClientStateiEXT", nullptr, nullptr, &pglEnableClientStatei, array, index);}
extern "C" void APIENTRY glEnableClientStatei(GLenum array, GLuint index) {return (*pglEnableClientStatei)(array, index);}
static void wrap_glEnableIndexed(GLenum target, GLuint index);
static void (APIENTRYP pglEnableIndexed)(GLenum target, GLuint index) = wrap_glEnableIndexed;
static void wrap_glEnableIndexed(GLenum target, GLuint index) {return trampoline<void>("glEnableIndexed", "glEnableIndexedEXT", nullptr, nullptr, &pglEnableIndexed, target, index);}
extern "C" void APIENTRY glEnableIndexed(GLenum target, GLuint index) {return (*pglEnableIndexed)(target, index);}
static void wrap_glEnableVariantClientState(GLuint id);
static void (APIENTRYP pglEnableVariantClientState)(GLuint id) = wrap_glEnableVariantClientState;
static void wrap_glEnableVariantClientState(GLuint id) {return trampoline<void>("glEnableVariantClientState", "glEnableVariantClientStateEXT", nullptr, nullptr, &pglEnableVariantClientState, id);}
extern "C" void APIENTRY glEnableVariantClientState(GLuint id) {return (*pglEnableVariantClientState)(id);}
static void wrap_glEnableVertexArray(GLuint vaobj, GLenum array);
static void (APIENTRYP pglEnableVertexArray)(GLuint vaobj, GLenum array) = wrap_glEnableVertexArray;
static void wrap_glEnableVertexArray(GLuint vaobj, GLenum array) {return trampoline<void>("glEnableVertexArray", "glEnableVertexArrayEXT", nullptr, nullptr, &pglEnableVertexArray, vaobj, array);}
extern "C" void APIENTRY glEnableVertexArray(GLuint vaobj, GLenum array) {return (*pglEnableVertexArray)(vaobj, array);}
static void wrap_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
static void (APIENTRYP pglEnableVertexArrayAttrib)(GLuint vaobj, GLuint index) = wrap_glEnableVertexArrayAttrib;
static void wrap_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {return trampoline<void>("glEnableVertexArrayAttrib", "glEnableVertexArrayAttribEXT", nullptr, nullptr, &pglEnableVertexArrayAttrib, vaobj, index);}
extern "C" void APIENTRY glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {return (*pglEnableVertexArrayAttrib)(vaobj, index);}
static void wrap_glEnableVertexAttrib(GLuint index, GLenum pname);
static void (APIENTRYP pglEnableVertexAttrib)(GLuint index, GLenum pname) = wrap_glEnableVertexAttrib;
static void wrap_glEnableVertexAttrib(GLuint index, GLenum pname) {return trampoline<void>("glEnableVertexAttrib", "glEnableVertexAttribAPPLE", nullptr, nullptr, &pglEnableVertexAttrib, index, pname);}
extern "C" void APIENTRY glEnableVertexAttrib(GLuint index, GLenum pname) {return (*pglEnableVertexAttrib)(index, pname);}
static void wrap_glEnableVertexAttribArray(GLuint index);
static void (APIENTRYP pglEnableVertexAttribArray)(GLuint index) = wrap_glEnableVertexAttribArray;
static void wrap_glEnableVertexAttribArray(GLuint index) {return trampoline<void>("glEnableVertexAttribArray", "glEnableVertexAttribArrayARB", nullptr, nullptr, &pglEnableVertexAttribArray, index);}
extern "C" void APIENTRY glEnableVertexAttribArray(GLuint index) {return (*pglEnableVertexAttribArray)(index);}
static void wrap_glEnablei(GLenum target, GLuint index);
static void (APIENTRYP pglEnablei)(GLenum target, GLuint index) = wrap_glEnablei;
static void wrap_glEnablei(GLenum target, GLuint index) {return trampoline<void>("glEnablei", nullptr, nullptr, nullptr, &pglEnablei, target, index);}
extern "C" void APIENTRY glEnablei(GLenum target, GLuint index) {return (*pglEnablei)(target, index);}
static void wrap_glEnd(void);
static void (APIENTRYP pglEnd)(void) = wrap_glEnd;
static void wrap_glEnd(void) {return trampoline<void>("glEnd", nullptr, nullptr, nullptr, &pglEnd);}
extern "C" void APIENTRY glEnd(void) {return (*pglEnd)();}
static void wrap_glEndConditionalRender(void);
static void (APIENTRYP pglEndConditionalRender)(void) = wrap_glEndConditionalRender;
static void wrap_glEndConditionalRender(void) {return trampoline<void>("glEndConditionalRender", "glEndConditionalRenderNVX", "glEndConditionalRenderNV", nullptr, &pglEndConditionalRender);}
extern "C" void APIENTRY glEndConditionalRender(void) {return (*pglEndConditionalRender)();}
static void wrap_glEndFragmentShader(void);
static void (APIENTRYP pglEndFragmentShader)(void) = wrap_glEndFragmentShader;
static void wrap_glEndFragmentShader(void) {return trampoline<void>("glEndFragmentShader", "glEndFragmentShaderATI", nullptr, nullptr, &pglEndFragmentShader);}
extern "C" void APIENTRY glEndFragmentShader(void) {return (*pglEndFragmentShader)();}
static void wrap_glEndList(void);
static void (APIENTRYP pglEndList)(void) = wrap_glEndList;
static void wrap_glEndList(void) {return trampoline<void>("glEndList", nullptr, nullptr, nullptr, &pglEndList);}
extern "C" void APIENTRY glEndList(void) {return (*pglEndList)();}
static void wrap_glEndOcclusionQuery(void);
static void (APIENTRYP pglEndOcclusionQuery)(void) = wrap_glEndOcclusionQuery;
static void wrap_glEndOcclusionQuery(void) {return trampoline<void>("glEndOcclusionQuery", "glEndOcclusionQueryNV", nullptr, nullptr, &pglEndOcclusionQuery);}
extern "C" void APIENTRY glEndOcclusionQuery(void) {return (*pglEndOcclusionQuery)();}
static void wrap_glEndPerfMonitor(GLuint monitor);
static void (APIENTRYP pglEndPerfMonitor)(GLuint monitor) = wrap_glEndPerfMonitor;
static void wrap_glEndPerfMonitor(GLuint monitor) {return trampoline<void>("glEndPerfMonitor", "glEndPerfMonitorAMD", nullptr, nullptr, &pglEndPerfMonitor, monitor);}
extern "C" void APIENTRY glEndPerfMonitor(GLuint monitor) {return (*pglEndPerfMonitor)(monitor);}
static void wrap_glEndPerfQuery(GLuint queryHandle);
static void (APIENTRYP pglEndPerfQuery)(GLuint queryHandle) = wrap_glEndPerfQuery;
static void wrap_glEndPerfQuery(GLuint queryHandle) {return trampoline<void>("glEndPerfQuery", "glEndPerfQueryINTEL", nullptr, nullptr, &pglEndPerfQuery, queryHandle);}
extern "C" void APIENTRY glEndPerfQuery(GLuint queryHandle) {return (*pglEndPerfQuery)(queryHandle);}
static void wrap_glEndQuery(GLenum target);
static void (APIENTRYP pglEndQuery)(GLenum target) = wrap_glEndQuery;
static void wrap_glEndQuery(GLenum target) {return trampoline<void>("glEndQuery", "glEndQueryARB", nullptr, nullptr, &pglEndQuery, target);}
extern "C" void APIENTRY glEndQuery(GLenum target) {return (*pglEndQuery)(target);}
static void wrap_glEndQueryIndexed(GLenum target, GLuint index);
static void (APIENTRYP pglEndQueryIndexed)(GLenum target, GLuint index) = wrap_glEndQueryIndexed;
static void wrap_glEndQueryIndexed(GLenum target, GLuint index) {return trampoline<void>("glEndQueryIndexed", nullptr, nullptr, nullptr, &pglEndQueryIndexed, target, index);}
extern "C" void APIENTRY glEndQueryIndexed(GLenum target, GLuint index) {return (*pglEndQueryIndexed)(target, index);}
static void wrap_glEndTransformFeedback(void);
static void (APIENTRYP pglEndTransformFeedback)(void) = wrap_glEndTransformFeedback;
static void wrap_glEndTransformFeedback(void) {return trampoline<void>("glEndTransformFeedback", "glEndTransformFeedbackEXT", "glEndTransformFeedbackNV", nullptr, &pglEndTransformFeedback);}
extern "C" void APIENTRY glEndTransformFeedback(void) {return (*pglEndTransformFeedback)();}
static void wrap_glEndVertexShader(void);
static void (APIENTRYP pglEndVertexShader)(void) = wrap_glEndVertexShader;
static void wrap_glEndVertexShader(void) {return trampoline<void>("glEndVertexShader", "glEndVertexShaderEXT", nullptr, nullptr, &pglEndVertexShader);}
extern "C" void APIENTRY glEndVertexShader(void) {return (*pglEndVertexShader)();}
static void wrap_glEndVideoCapture(GLuint video_capture_slot);
static void (APIENTRYP pglEndVideoCapture)(GLuint video_capture_slot) = wrap_glEndVideoCapture;
static void wrap_glEndVideoCapture(GLuint video_capture_slot) {return trampoline<void>("glEndVideoCapture", "glEndVideoCaptureNV", nullptr, nullptr, &pglEndVideoCapture, video_capture_slot);}
extern "C" void APIENTRY glEndVideoCapture(GLuint video_capture_slot) {return (*pglEndVideoCapture)(video_capture_slot);}
static void wrap_glEvalCoord1d(GLdouble u);
static void (APIENTRYP pglEvalCoord1d)(GLdouble u) = wrap_glEvalCoord1d;
static void wrap_glEvalCoord1d(GLdouble u) {return trampoline<void>("glEvalCoord1d", nullptr, nullptr, nullptr, &pglEvalCoord1d, u);}
extern "C" void APIENTRY glEvalCoord1d(GLdouble u) {return (*pglEvalCoord1d)(u);}
static void wrap_glEvalCoord1dv(const GLdouble *u);
static void (APIENTRYP pglEvalCoord1dv)(const GLdouble *u) = wrap_glEvalCoord1dv;
static void wrap_glEvalCoord1dv(const GLdouble *u) {return trampoline<void>("glEvalCoord1dv", nullptr, nullptr, nullptr, &pglEvalCoord1dv, u);}
extern "C" void APIENTRY glEvalCoord1dv(const GLdouble *u) {return (*pglEvalCoord1dv)(u);}
static void wrap_glEvalCoord1f(GLfloat u);
static void (APIENTRYP pglEvalCoord1f)(GLfloat u) = wrap_glEvalCoord1f;
static void wrap_glEvalCoord1f(GLfloat u) {return trampoline<void>("glEvalCoord1f", nullptr, nullptr, nullptr, &pglEvalCoord1f, u);}
extern "C" void APIENTRY glEvalCoord1f(GLfloat u) {return (*pglEvalCoord1f)(u);}
static void wrap_glEvalCoord1fv(const GLfloat *u);
static void (APIENTRYP pglEvalCoord1fv)(const GLfloat *u) = wrap_glEvalCoord1fv;
static void wrap_glEvalCoord1fv(const GLfloat *u) {return trampoline<void>("glEvalCoord1fv", nullptr, nullptr, nullptr, &pglEvalCoord1fv, u);}
extern "C" void APIENTRY glEvalCoord1fv(const GLfloat *u) {return (*pglEvalCoord1fv)(u);}
static void wrap_glEvalCoord1x(GLfixed u);
static void (APIENTRYP pglEvalCoord1x)(GLfixed u) = wrap_glEvalCoord1x;
static void wrap_glEvalCoord1x(GLfixed u) {return trampoline<void>("glEvalCoord1x", "glEvalCoord1xOES", nullptr, nullptr, &pglEvalCoord1x, u);}
extern "C" void APIENTRY glEvalCoord1x(GLfixed u) {return (*pglEvalCoord1x)(u);}
static void wrap_glEvalCoord1xv(const GLfixed *coords);
static void (APIENTRYP pglEvalCoord1xv)(const GLfixed *coords) = wrap_glEvalCoord1xv;
static void wrap_glEvalCoord1xv(const GLfixed *coords) {return trampoline<void>("glEvalCoord1xv", "glEvalCoord1xvOES", nullptr, nullptr, &pglEvalCoord1xv, coords);}
extern "C" void APIENTRY glEvalCoord1xv(const GLfixed *coords) {return (*pglEvalCoord1xv)(coords);}
static void wrap_glEvalCoord2d(GLdouble u, GLdouble v);
static void (APIENTRYP pglEvalCoord2d)(GLdouble u, GLdouble v) = wrap_glEvalCoord2d;
static void wrap_glEvalCoord2d(GLdouble u, GLdouble v) {return trampoline<void>("glEvalCoord2d", nullptr, nullptr, nullptr, &pglEvalCoord2d, u, v);}
extern "C" void APIENTRY glEvalCoord2d(GLdouble u, GLdouble v) {return (*pglEvalCoord2d)(u, v);}
static void wrap_glEvalCoord2dv(const GLdouble *u);
static void (APIENTRYP pglEvalCoord2dv)(const GLdouble *u) = wrap_glEvalCoord2dv;
static void wrap_glEvalCoord2dv(const GLdouble *u) {return trampoline<void>("glEvalCoord2dv", nullptr, nullptr, nullptr, &pglEvalCoord2dv, u);}
extern "C" void APIENTRY glEvalCoord2dv(const GLdouble *u) {return (*pglEvalCoord2dv)(u);}
static void wrap_glEvalCoord2f(GLfloat u, GLfloat v);
static void (APIENTRYP pglEvalCoord2f)(GLfloat u, GLfloat v) = wrap_glEvalCoord2f;
static void wrap_glEvalCoord2f(GLfloat u, GLfloat v) {return trampoline<void>("glEvalCoord2f", nullptr, nullptr, nullptr, &pglEvalCoord2f, u, v);}
extern "C" void APIENTRY glEvalCoord2f(GLfloat u, GLfloat v) {return (*pglEvalCoord2f)(u, v);}
static void wrap_glEvalCoord2fv(const GLfloat *u);
static void (APIENTRYP pglEvalCoord2fv)(const GLfloat *u) = wrap_glEvalCoord2fv;
static void wrap_glEvalCoord2fv(const GLfloat *u) {return trampoline<void>("glEvalCoord2fv", nullptr, nullptr, nullptr, &pglEvalCoord2fv, u);}
extern "C" void APIENTRY glEvalCoord2fv(const GLfloat *u) {return (*pglEvalCoord2fv)(u);}
static void wrap_glEvalCoord2x(GLfixed u, GLfixed v);
static void (APIENTRYP pglEvalCoord2x)(GLfixed u, GLfixed v) = wrap_glEvalCoord2x;
static void wrap_glEvalCoord2x(GLfixed u, GLfixed v) {return trampoline<void>("glEvalCoord2x", "glEvalCoord2xOES", nullptr, nullptr, &pglEvalCoord2x, u, v);}
extern "C" void APIENTRY glEvalCoord2x(GLfixed u, GLfixed v) {return (*pglEvalCoord2x)(u, v);}
static void wrap_glEvalCoord2xv(const GLfixed *coords);
static void (APIENTRYP pglEvalCoord2xv)(const GLfixed *coords) = wrap_glEvalCoord2xv;
static void wrap_glEvalCoord2xv(const GLfixed *coords) {return trampoline<void>("glEvalCoord2xv", "glEvalCoord2xvOES", nullptr, nullptr, &pglEvalCoord2xv, coords);}
extern "C" void APIENTRY glEvalCoord2xv(const GLfixed *coords) {return (*pglEvalCoord2xv)(coords);}
static void wrap_glEvalMaps(GLenum target, GLenum mode);
static void (APIENTRYP pglEvalMaps)(GLenum target, GLenum mode) = wrap_glEvalMaps;
static void wrap_glEvalMaps(GLenum target, GLenum mode) {return trampoline<void>("glEvalMaps", "glEvalMapsNV", nullptr, nullptr, &pglEvalMaps, target, mode);}
extern "C" void APIENTRY glEvalMaps(GLenum target, GLenum mode) {return (*pglEvalMaps)(target, mode);}
static void wrap_glEvalMesh1(GLenum mode, GLint i1, GLint i2);
static void (APIENTRYP pglEvalMesh1)(GLenum mode, GLint i1, GLint i2) = wrap_glEvalMesh1;
static void wrap_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {return trampoline<void>("glEvalMesh1", nullptr, nullptr, nullptr, &pglEvalMesh1, mode, i1, i2);}
extern "C" void APIENTRY glEvalMesh1(GLenum mode, GLint i1, GLint i2) {return (*pglEvalMesh1)(mode, i1, i2);}
static void wrap_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
static void (APIENTRYP pglEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) = wrap_glEvalMesh2;
static void wrap_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {return trampoline<void>("glEvalMesh2", nullptr, nullptr, nullptr, &pglEvalMesh2, mode, i1, i2, j1, j2);}
extern "C" void APIENTRY glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {return (*pglEvalMesh2)(mode, i1, i2, j1, j2);}
static void wrap_glEvalPoint1(GLint i);
static void (APIENTRYP pglEvalPoint1)(GLint i) = wrap_glEvalPoint1;
static void wrap_glEvalPoint1(GLint i) {return trampoline<void>("glEvalPoint1", nullptr, nullptr, nullptr, &pglEvalPoint1, i);}
extern "C" void APIENTRY glEvalPoint1(GLint i) {return (*pglEvalPoint1)(i);}
static void wrap_glEvalPoint2(GLint i, GLint j);
static void (APIENTRYP pglEvalPoint2)(GLint i, GLint j) = wrap_glEvalPoint2;
static void wrap_glEvalPoint2(GLint i, GLint j) {return trampoline<void>("glEvalPoint2", nullptr, nullptr, nullptr, &pglEvalPoint2, i, j);}
extern "C" void APIENTRY glEvalPoint2(GLint i, GLint j) {return (*pglEvalPoint2)(i, j);}
static void wrap_glEvaluateDepthValues(void);
static void (APIENTRYP pglEvaluateDepthValues)(void) = wrap_glEvaluateDepthValues;
static void wrap_glEvaluateDepthValues(void) {return trampoline<void>("glEvaluateDepthValues", "glEvaluateDepthValuesARB", nullptr, nullptr, &pglEvaluateDepthValues);}
extern "C" void APIENTRY glEvaluateDepthValues(void) {return (*pglEvaluateDepthValues)();}
static void wrap_glExecuteProgram(GLenum target, GLuint id, const GLfloat *params);
static void (APIENTRYP pglExecuteProgram)(GLenum target, GLuint id, const GLfloat *params) = wrap_glExecuteProgram;
static void wrap_glExecuteProgram(GLenum target, GLuint id, const GLfloat *params) {return trampoline<void>("glExecuteProgram", "glExecuteProgramNV", nullptr, nullptr, &pglExecuteProgram, target, id, params);}
extern "C" void APIENTRY glExecuteProgram(GLenum target, GLuint id, const GLfloat *params) {return (*pglExecuteProgram)(target, id, params);}
static void wrap_glExtractComponent(GLuint res, GLuint src, GLuint num);
static void (APIENTRYP pglExtractComponent)(GLuint res, GLuint src, GLuint num) = wrap_glExtractComponent;
static void wrap_glExtractComponent(GLuint res, GLuint src, GLuint num) {return trampoline<void>("glExtractComponent", "glExtractComponentEXT", nullptr, nullptr, &pglExtractComponent, res, src, num);}
extern "C" void APIENTRY glExtractComponent(GLuint res, GLuint src, GLuint num) {return (*pglExtractComponent)(res, src, num);}
static void wrap_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
static void (APIENTRYP pglFeedbackBuffer)(GLsizei size, GLenum type, GLfloat *buffer) = wrap_glFeedbackBuffer;
static void wrap_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {return trampoline<void>("glFeedbackBuffer", nullptr, nullptr, nullptr, &pglFeedbackBuffer, size, type, buffer);}
extern "C" void APIENTRY glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {return (*pglFeedbackBuffer)(size, type, buffer);}
static void wrap_glFeedbackBufferx(GLsizei n, GLenum type, const GLfixed *buffer);
static void (APIENTRYP pglFeedbackBufferx)(GLsizei n, GLenum type, const GLfixed *buffer) = wrap_glFeedbackBufferx;
static void wrap_glFeedbackBufferx(GLsizei n, GLenum type, const GLfixed *buffer) {return trampoline<void>("glFeedbackBufferx", "glFeedbackBufferxOES", nullptr, nullptr, &pglFeedbackBufferx, n, type, buffer);}
extern "C" void APIENTRY glFeedbackBufferx(GLsizei n, GLenum type, const GLfixed *buffer) {return (*pglFeedbackBufferx)(n, type, buffer);}
static GLsync wrap_glFenceSync(GLenum condition, GLbitfield flags);
static GLsync (APIENTRYP pglFenceSync)(GLenum condition, GLbitfield flags) = wrap_glFenceSync;
static GLsync wrap_glFenceSync(GLenum condition, GLbitfield flags) {return trampoline<GLsync>("glFenceSync", nullptr, nullptr, nullptr, &pglFenceSync, condition, flags);}
extern "C" GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags) {return (*pglFenceSync)(condition, flags);}
static void wrap_glFinalCombinerInput(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
static void (APIENTRYP pglFinalCombinerInput)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) = wrap_glFinalCombinerInput;
static void wrap_glFinalCombinerInput(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {return trampoline<void>("glFinalCombinerInput", "glFinalCombinerInputNV", nullptr, nullptr, &pglFinalCombinerInput, variable, input, mapping, componentUsage);}
extern "C" void APIENTRY glFinalCombinerInput(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {return (*pglFinalCombinerInput)(variable, input, mapping, componentUsage);}
static void wrap_glFinish(void);
static void (APIENTRYP pglFinish)(void) = wrap_glFinish;
static void wrap_glFinish(void) {return trampoline<void>("glFinish", nullptr, nullptr, nullptr, &pglFinish);}
extern "C" void APIENTRY glFinish(void) {return (*pglFinish)();}
static GLint wrap_glFinishAsync(GLuint *markerp);
static GLint (APIENTRYP pglFinishAsync)(GLuint *markerp) = wrap_glFinishAsync;
static GLint wrap_glFinishAsync(GLuint *markerp) {return trampoline<GLint>("glFinishAsync", "glFinishAsyncSGIX", nullptr, nullptr, &pglFinishAsync, markerp);}
extern "C" GLint APIENTRY glFinishAsync(GLuint *markerp) {return (*pglFinishAsync)(markerp);}
static void wrap_glFinishFence(GLuint fence);
static void (APIENTRYP pglFinishFence)(GLuint fence) = wrap_glFinishFence;
static void wrap_glFinishFence(GLuint fence) {return trampoline<void>("glFinishFence", "glFinishFenceAPPLE", "glFinishFenceNV", nullptr, &pglFinishFence, fence);}
extern "C" void APIENTRY glFinishFence(GLuint fence) {return (*pglFinishFence)(fence);}
static void wrap_glFinishObject(GLenum object, GLint name);
static void (APIENTRYP pglFinishObject)(GLenum object, GLint name) = wrap_glFinishObject;
static void wrap_glFinishObject(GLenum object, GLint name) {return trampoline<void>("glFinishObject", "glFinishObjectAPPLE", nullptr, nullptr, &pglFinishObject, object, name);}
extern "C" void APIENTRY glFinishObject(GLenum object, GLint name) {return (*pglFinishObject)(object, name);}
static void wrap_glFinishTexture(void);
static void (APIENTRYP pglFinishTexture)(void) = wrap_glFinishTexture;
static void wrap_glFinishTexture(void) {return trampoline<void>("glFinishTexture", "glFinishTextureSUNX", nullptr, nullptr, &pglFinishTexture);}
extern "C" void APIENTRY glFinishTexture(void) {return (*pglFinishTexture)();}
static void wrap_glFlush(void);
static void (APIENTRYP pglFlush)(void) = wrap_glFlush;
static void wrap_glFlush(void) {return trampoline<void>("glFlush", nullptr, nullptr, nullptr, &pglFlush);}
extern "C" void APIENTRY glFlush(void) {return (*pglFlush)();}
static void wrap_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
static void (APIENTRYP pglFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length) = wrap_glFlushMappedBufferRange;
static void wrap_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {return trampoline<void>("glFlushMappedBufferRange", "glFlushMappedBufferRangeAPPLE", nullptr, nullptr, &pglFlushMappedBufferRange, target, offset, length);}
extern "C" void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {return (*pglFlushMappedBufferRange)(target, offset, length);}
static void wrap_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
static void (APIENTRYP pglFlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length) = wrap_glFlushMappedNamedBufferRange;
static void wrap_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {return trampoline<void>("glFlushMappedNamedBufferRange", "glFlushMappedNamedBufferRangeEXT", nullptr, nullptr, &pglFlushMappedNamedBufferRange, buffer, offset, length);}
extern "C" void APIENTRY glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {return (*pglFlushMappedNamedBufferRange)(buffer, offset, length);}
static void wrap_glFlushPixelDataRange(GLenum target);
static void (APIENTRYP pglFlushPixelDataRange)(GLenum target) = wrap_glFlushPixelDataRange;
static void wrap_glFlushPixelDataRange(GLenum target) {return trampoline<void>("glFlushPixelDataRange", "glFlushPixelDataRangeNV", nullptr, nullptr, &pglFlushPixelDataRange, target);}
extern "C" void APIENTRY glFlushPixelDataRange(GLenum target) {return (*pglFlushPixelDataRange)(target);}
static void wrap_glFlushRaster(void);
static void (APIENTRYP pglFlushRaster)(void) = wrap_glFlushRaster;
static void wrap_glFlushRaster(void) {return trampoline<void>("glFlushRaster", "glFlushRasterSGIX", nullptr, nullptr, &pglFlushRaster);}
extern "C" void APIENTRY glFlushRaster(void) {return (*pglFlushRaster)();}
static void wrap_glFlushStaticData(GLenum target);
static void (APIENTRYP pglFlushStaticData)(GLenum target) = wrap_glFlushStaticData;
static void wrap_glFlushStaticData(GLenum target) {return trampoline<void>("glFlushStaticData", "glFlushStaticDataIBM", nullptr, nullptr, &pglFlushStaticData, target);}
extern "C" void APIENTRY glFlushStaticData(GLenum target) {return (*pglFlushStaticData)(target);}
static void wrap_glFlushVertexArrayRange(GLsizei length, void *pointer);
static void (APIENTRYP pglFlushVertexArrayRange)(GLsizei length, void *pointer) = wrap_glFlushVertexArrayRange;
static void wrap_glFlushVertexArrayRange(GLsizei length, void *pointer) {return trampoline<void>("glFlushVertexArrayRange", "glFlushVertexArrayRangeAPPLE", "glFlushVertexArrayRangeNV", nullptr, &pglFlushVertexArrayRange, length, pointer);}
extern "C" void APIENTRY glFlushVertexArrayRange(GLsizei length, void *pointer) {return (*pglFlushVertexArrayRange)(length, pointer);}
static void wrap_glFogCoordFormat(GLenum type, GLsizei stride);
static void (APIENTRYP pglFogCoordFormat)(GLenum type, GLsizei stride) = wrap_glFogCoordFormat;
static void wrap_glFogCoordFormat(GLenum type, GLsizei stride) {return trampoline<void>("glFogCoordFormat", "glFogCoordFormatNV", nullptr, nullptr, &pglFogCoordFormat, type, stride);}
extern "C" void APIENTRY glFogCoordFormat(GLenum type, GLsizei stride) {return (*pglFogCoordFormat)(type, stride);}
static void wrap_glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglFogCoordPointer)(GLenum type, GLsizei stride, const void *pointer) = wrap_glFogCoordPointer;
static void wrap_glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glFogCoordPointer", "glFogCoordPointerEXT", nullptr, nullptr, &pglFogCoordPointer, type, stride, pointer);}
extern "C" void APIENTRY glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) {return (*pglFogCoordPointer)(type, stride, pointer);}
static void wrap_glFogCoordPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglFogCoordPointerList)(GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glFogCoordPointerList;
static void wrap_glFogCoordPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glFogCoordPointerList", "glFogCoordPointerListIBM", nullptr, nullptr, &pglFogCoordPointerList, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glFogCoordPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglFogCoordPointerList)(type, stride, pointer, ptrstride);}
static void wrap_glFogCoordd(GLdouble coord);
static void (APIENTRYP pglFogCoordd)(GLdouble coord) = wrap_glFogCoordd;
static void wrap_glFogCoordd(GLdouble coord) {return trampoline<void>("glFogCoordd", "glFogCoorddEXT", nullptr, nullptr, &pglFogCoordd, coord);}
extern "C" void APIENTRY glFogCoordd(GLdouble coord) {return (*pglFogCoordd)(coord);}
static void wrap_glFogCoorddv(const GLdouble *coord);
static void (APIENTRYP pglFogCoorddv)(const GLdouble *coord) = wrap_glFogCoorddv;
static void wrap_glFogCoorddv(const GLdouble *coord) {return trampoline<void>("glFogCoorddv", "glFogCoorddvEXT", nullptr, nullptr, &pglFogCoorddv, coord);}
extern "C" void APIENTRY glFogCoorddv(const GLdouble *coord) {return (*pglFogCoorddv)(coord);}
static void wrap_glFogCoordf(GLfloat coord);
static void (APIENTRYP pglFogCoordf)(GLfloat coord) = wrap_glFogCoordf;
static void wrap_glFogCoordf(GLfloat coord) {return trampoline<void>("glFogCoordf", "glFogCoordfEXT", nullptr, nullptr, &pglFogCoordf, coord);}
extern "C" void APIENTRY glFogCoordf(GLfloat coord) {return (*pglFogCoordf)(coord);}
static void wrap_glFogCoordfv(const GLfloat *coord);
static void (APIENTRYP pglFogCoordfv)(const GLfloat *coord) = wrap_glFogCoordfv;
static void wrap_glFogCoordfv(const GLfloat *coord) {return trampoline<void>("glFogCoordfv", "glFogCoordfvEXT", nullptr, nullptr, &pglFogCoordfv, coord);}
extern "C" void APIENTRY glFogCoordfv(const GLfloat *coord) {return (*pglFogCoordfv)(coord);}
static void wrap_glFogCoordh(GLhalfNV fog);
static void (APIENTRYP pglFogCoordh)(GLhalfNV fog) = wrap_glFogCoordh;
static void wrap_glFogCoordh(GLhalfNV fog) {return trampoline<void>("glFogCoordh", "glFogCoordhNV", nullptr, nullptr, &pglFogCoordh, fog);}
extern "C" void APIENTRY glFogCoordh(GLhalfNV fog) {return (*pglFogCoordh)(fog);}
static void wrap_glFogCoordhv(const GLhalfNV *fog);
static void (APIENTRYP pglFogCoordhv)(const GLhalfNV *fog) = wrap_glFogCoordhv;
static void wrap_glFogCoordhv(const GLhalfNV *fog) {return trampoline<void>("glFogCoordhv", "glFogCoordhvNV", nullptr, nullptr, &pglFogCoordhv, fog);}
extern "C" void APIENTRY glFogCoordhv(const GLhalfNV *fog) {return (*pglFogCoordhv)(fog);}
static void wrap_glFogFunc(GLsizei n, const GLfloat *points);
static void (APIENTRYP pglFogFunc)(GLsizei n, const GLfloat *points) = wrap_glFogFunc;
static void wrap_glFogFunc(GLsizei n, const GLfloat *points) {return trampoline<void>("glFogFunc", "glFogFuncSGIS", nullptr, nullptr, &pglFogFunc, n, points);}
extern "C" void APIENTRY glFogFunc(GLsizei n, const GLfloat *points) {return (*pglFogFunc)(n, points);}
static void wrap_glFogf(GLenum pname, GLfloat param);
static void (APIENTRYP pglFogf)(GLenum pname, GLfloat param) = wrap_glFogf;
static void wrap_glFogf(GLenum pname, GLfloat param) {return trampoline<void>("glFogf", nullptr, nullptr, nullptr, &pglFogf, pname, param);}
extern "C" void APIENTRY glFogf(GLenum pname, GLfloat param) {return (*pglFogf)(pname, param);}
static void wrap_glFogfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglFogfv)(GLenum pname, const GLfloat *params) = wrap_glFogfv;
static void wrap_glFogfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glFogfv", nullptr, nullptr, nullptr, &pglFogfv, pname, params);}
extern "C" void APIENTRY glFogfv(GLenum pname, const GLfloat *params) {return (*pglFogfv)(pname, params);}
static void wrap_glFogi(GLenum pname, GLint param);
static void (APIENTRYP pglFogi)(GLenum pname, GLint param) = wrap_glFogi;
static void wrap_glFogi(GLenum pname, GLint param) {return trampoline<void>("glFogi", nullptr, nullptr, nullptr, &pglFogi, pname, param);}
extern "C" void APIENTRY glFogi(GLenum pname, GLint param) {return (*pglFogi)(pname, param);}
static void wrap_glFogiv(GLenum pname, const GLint *params);
static void (APIENTRYP pglFogiv)(GLenum pname, const GLint *params) = wrap_glFogiv;
static void wrap_glFogiv(GLenum pname, const GLint *params) {return trampoline<void>("glFogiv", nullptr, nullptr, nullptr, &pglFogiv, pname, params);}
extern "C" void APIENTRY glFogiv(GLenum pname, const GLint *params) {return (*pglFogiv)(pname, params);}
static void wrap_glFogx(GLenum pname, GLfixed param);
static void (APIENTRYP pglFogx)(GLenum pname, GLfixed param) = wrap_glFogx;
static void wrap_glFogx(GLenum pname, GLfixed param) {return trampoline<void>("glFogx", "glFogxOES", nullptr, nullptr, &pglFogx, pname, param);}
extern "C" void APIENTRY glFogx(GLenum pname, GLfixed param) {return (*pglFogx)(pname, param);}
static void wrap_glFogxv(GLenum pname, const GLfixed *param);
static void (APIENTRYP pglFogxv)(GLenum pname, const GLfixed *param) = wrap_glFogxv;
static void wrap_glFogxv(GLenum pname, const GLfixed *param) {return trampoline<void>("glFogxv", "glFogxvOES", nullptr, nullptr, &pglFogxv, pname, param);}
extern "C" void APIENTRY glFogxv(GLenum pname, const GLfixed *param) {return (*pglFogxv)(pname, param);}
static void wrap_glFragmentColorMaterial(GLenum face, GLenum mode);
static void (APIENTRYP pglFragmentColorMaterial)(GLenum face, GLenum mode) = wrap_glFragmentColorMaterial;
static void wrap_glFragmentColorMaterial(GLenum face, GLenum mode) {return trampoline<void>("glFragmentColorMaterial", "glFragmentColorMaterialSGIX", nullptr, nullptr, &pglFragmentColorMaterial, face, mode);}
extern "C" void APIENTRY glFragmentColorMaterial(GLenum face, GLenum mode) {return (*pglFragmentColorMaterial)(face, mode);}
static void wrap_glFragmentCoverageColor(GLuint color);
static void (APIENTRYP pglFragmentCoverageColor)(GLuint color) = wrap_glFragmentCoverageColor;
static void wrap_glFragmentCoverageColor(GLuint color) {return trampoline<void>("glFragmentCoverageColor", "glFragmentCoverageColorNV", nullptr, nullptr, &pglFragmentCoverageColor, color);}
extern "C" void APIENTRY glFragmentCoverageColor(GLuint color) {return (*pglFragmentCoverageColor)(color);}
static void wrap_glFragmentLightModelf(GLenum pname, GLfloat param);
static void (APIENTRYP pglFragmentLightModelf)(GLenum pname, GLfloat param) = wrap_glFragmentLightModelf;
static void wrap_glFragmentLightModelf(GLenum pname, GLfloat param) {return trampoline<void>("glFragmentLightModelf", "glFragmentLightModelfSGIX", nullptr, nullptr, &pglFragmentLightModelf, pname, param);}
extern "C" void APIENTRY glFragmentLightModelf(GLenum pname, GLfloat param) {return (*pglFragmentLightModelf)(pname, param);}
static void wrap_glFragmentLightModelfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglFragmentLightModelfv)(GLenum pname, const GLfloat *params) = wrap_glFragmentLightModelfv;
static void wrap_glFragmentLightModelfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glFragmentLightModelfv", "glFragmentLightModelfvSGIX", nullptr, nullptr, &pglFragmentLightModelfv, pname, params);}
extern "C" void APIENTRY glFragmentLightModelfv(GLenum pname, const GLfloat *params) {return (*pglFragmentLightModelfv)(pname, params);}
static void wrap_glFragmentLightModeli(GLenum pname, GLint param);
static void (APIENTRYP pglFragmentLightModeli)(GLenum pname, GLint param) = wrap_glFragmentLightModeli;
static void wrap_glFragmentLightModeli(GLenum pname, GLint param) {return trampoline<void>("glFragmentLightModeli", "glFragmentLightModeliSGIX", nullptr, nullptr, &pglFragmentLightModeli, pname, param);}
extern "C" void APIENTRY glFragmentLightModeli(GLenum pname, GLint param) {return (*pglFragmentLightModeli)(pname, param);}
static void wrap_glFragmentLightModeliv(GLenum pname, const GLint *params);
static void (APIENTRYP pglFragmentLightModeliv)(GLenum pname, const GLint *params) = wrap_glFragmentLightModeliv;
static void wrap_glFragmentLightModeliv(GLenum pname, const GLint *params) {return trampoline<void>("glFragmentLightModeliv", "glFragmentLightModelivSGIX", nullptr, nullptr, &pglFragmentLightModeliv, pname, params);}
extern "C" void APIENTRY glFragmentLightModeliv(GLenum pname, const GLint *params) {return (*pglFragmentLightModeliv)(pname, params);}
static void wrap_glFragmentLightf(GLenum light, GLenum pname, GLfloat param);
static void (APIENTRYP pglFragmentLightf)(GLenum light, GLenum pname, GLfloat param) = wrap_glFragmentLightf;
static void wrap_glFragmentLightf(GLenum light, GLenum pname, GLfloat param) {return trampoline<void>("glFragmentLightf", "glFragmentLightfSGIX", nullptr, nullptr, &pglFragmentLightf, light, pname, param);}
extern "C" void APIENTRY glFragmentLightf(GLenum light, GLenum pname, GLfloat param) {return (*pglFragmentLightf)(light, pname, param);}
static void wrap_glFragmentLightfv(GLenum light, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglFragmentLightfv)(GLenum light, GLenum pname, const GLfloat *params) = wrap_glFragmentLightfv;
static void wrap_glFragmentLightfv(GLenum light, GLenum pname, const GLfloat *params) {return trampoline<void>("glFragmentLightfv", "glFragmentLightfvSGIX", nullptr, nullptr, &pglFragmentLightfv, light, pname, params);}
extern "C" void APIENTRY glFragmentLightfv(GLenum light, GLenum pname, const GLfloat *params) {return (*pglFragmentLightfv)(light, pname, params);}
static void wrap_glFragmentLighti(GLenum light, GLenum pname, GLint param);
static void (APIENTRYP pglFragmentLighti)(GLenum light, GLenum pname, GLint param) = wrap_glFragmentLighti;
static void wrap_glFragmentLighti(GLenum light, GLenum pname, GLint param) {return trampoline<void>("glFragmentLighti", "glFragmentLightiSGIX", nullptr, nullptr, &pglFragmentLighti, light, pname, param);}
extern "C" void APIENTRY glFragmentLighti(GLenum light, GLenum pname, GLint param) {return (*pglFragmentLighti)(light, pname, param);}
static void wrap_glFragmentLightiv(GLenum light, GLenum pname, const GLint *params);
static void (APIENTRYP pglFragmentLightiv)(GLenum light, GLenum pname, const GLint *params) = wrap_glFragmentLightiv;
static void wrap_glFragmentLightiv(GLenum light, GLenum pname, const GLint *params) {return trampoline<void>("glFragmentLightiv", "glFragmentLightivSGIX", nullptr, nullptr, &pglFragmentLightiv, light, pname, params);}
extern "C" void APIENTRY glFragmentLightiv(GLenum light, GLenum pname, const GLint *params) {return (*pglFragmentLightiv)(light, pname, params);}
static void wrap_glFragmentMaterialf(GLenum face, GLenum pname, GLfloat param);
static void (APIENTRYP pglFragmentMaterialf)(GLenum face, GLenum pname, GLfloat param) = wrap_glFragmentMaterialf;
static void wrap_glFragmentMaterialf(GLenum face, GLenum pname, GLfloat param) {return trampoline<void>("glFragmentMaterialf", "glFragmentMaterialfSGIX", nullptr, nullptr, &pglFragmentMaterialf, face, pname, param);}
extern "C" void APIENTRY glFragmentMaterialf(GLenum face, GLenum pname, GLfloat param) {return (*pglFragmentMaterialf)(face, pname, param);}
static void wrap_glFragmentMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglFragmentMaterialfv)(GLenum face, GLenum pname, const GLfloat *params) = wrap_glFragmentMaterialfv;
static void wrap_glFragmentMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {return trampoline<void>("glFragmentMaterialfv", "glFragmentMaterialfvSGIX", nullptr, nullptr, &pglFragmentMaterialfv, face, pname, params);}
extern "C" void APIENTRY glFragmentMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {return (*pglFragmentMaterialfv)(face, pname, params);}
static void wrap_glFragmentMateriali(GLenum face, GLenum pname, GLint param);
static void (APIENTRYP pglFragmentMateriali)(GLenum face, GLenum pname, GLint param) = wrap_glFragmentMateriali;
static void wrap_glFragmentMateriali(GLenum face, GLenum pname, GLint param) {return trampoline<void>("glFragmentMateriali", "glFragmentMaterialiSGIX", nullptr, nullptr, &pglFragmentMateriali, face, pname, param);}
extern "C" void APIENTRY glFragmentMateriali(GLenum face, GLenum pname, GLint param) {return (*pglFragmentMateriali)(face, pname, param);}
static void wrap_glFragmentMaterialiv(GLenum face, GLenum pname, const GLint *params);
static void (APIENTRYP pglFragmentMaterialiv)(GLenum face, GLenum pname, const GLint *params) = wrap_glFragmentMaterialiv;
static void wrap_glFragmentMaterialiv(GLenum face, GLenum pname, const GLint *params) {return trampoline<void>("glFragmentMaterialiv", "glFragmentMaterialivSGIX", nullptr, nullptr, &pglFragmentMaterialiv, face, pname, params);}
extern "C" void APIENTRY glFragmentMaterialiv(GLenum face, GLenum pname, const GLint *params) {return (*pglFragmentMaterialiv)(face, pname, params);}
static void wrap_glFrameTerminator(void);
static void (APIENTRYP pglFrameTerminator)(void) = wrap_glFrameTerminator;
static void wrap_glFrameTerminator(void) {return trampoline<void>("glFrameTerminator", "glFrameTerminatorGREMEDY", nullptr, nullptr, &pglFrameTerminator);}
extern "C" void APIENTRY glFrameTerminator(void) {return (*pglFrameTerminator)();}
static void wrap_glFrameZoom(GLint factor);
static void (APIENTRYP pglFrameZoom)(GLint factor) = wrap_glFrameZoom;
static void wrap_glFrameZoom(GLint factor) {return trampoline<void>("glFrameZoom", "glFrameZoomSGIX", nullptr, nullptr, &pglFrameZoom, factor);}
extern "C" void APIENTRY glFrameZoom(GLint factor) {return (*pglFrameZoom)(factor);}
static void wrap_glFramebufferDrawBuffer(GLuint framebuffer, GLenum mode);
static void (APIENTRYP pglFramebufferDrawBuffer)(GLuint framebuffer, GLenum mode) = wrap_glFramebufferDrawBuffer;
static void wrap_glFramebufferDrawBuffer(GLuint framebuffer, GLenum mode) {return trampoline<void>("glFramebufferDrawBuffer", "glFramebufferDrawBufferEXT", nullptr, nullptr, &pglFramebufferDrawBuffer, framebuffer, mode);}
extern "C" void APIENTRY glFramebufferDrawBuffer(GLuint framebuffer, GLenum mode) {return (*pglFramebufferDrawBuffer)(framebuffer, mode);}
static void wrap_glFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
static void (APIENTRYP pglFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum *bufs) = wrap_glFramebufferDrawBuffers;
static void wrap_glFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {return trampoline<void>("glFramebufferDrawBuffers", "glFramebufferDrawBuffersEXT", nullptr, nullptr, &pglFramebufferDrawBuffers, framebuffer, n, bufs);}
extern "C" void APIENTRY glFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {return (*pglFramebufferDrawBuffers)(framebuffer, n, bufs);}
static void wrap_glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglFramebufferParameteri)(GLenum target, GLenum pname, GLint param) = wrap_glFramebufferParameteri;
static void wrap_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {return trampoline<void>("glFramebufferParameteri", nullptr, nullptr, nullptr, &pglFramebufferParameteri, target, pname, param);}
extern "C" void APIENTRY glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {return (*pglFramebufferParameteri)(target, pname, param);}
static void wrap_glFramebufferReadBuffer(GLuint framebuffer, GLenum mode);
static void (APIENTRYP pglFramebufferReadBuffer)(GLuint framebuffer, GLenum mode) = wrap_glFramebufferReadBuffer;
static void wrap_glFramebufferReadBuffer(GLuint framebuffer, GLenum mode) {return trampoline<void>("glFramebufferReadBuffer", "glFramebufferReadBufferEXT", nullptr, nullptr, &pglFramebufferReadBuffer, framebuffer, mode);}
extern "C" void APIENTRY glFramebufferReadBuffer(GLuint framebuffer, GLenum mode) {return (*pglFramebufferReadBuffer)(framebuffer, mode);}
static void wrap_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
static void (APIENTRYP pglFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = wrap_glFramebufferRenderbuffer;
static void wrap_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {return trampoline<void>("glFramebufferRenderbuffer", "glFramebufferRenderbufferEXT", nullptr, nullptr, &pglFramebufferRenderbuffer, target, attachment, renderbuffertarget, renderbuffer);}
extern "C" void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {return (*pglFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);}
static void wrap_glFramebufferSampleLocationsfv(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglFramebufferSampleLocationsfv)(GLenum target, GLuint start, GLsizei count, const GLfloat *v) = wrap_glFramebufferSampleLocationsfv;
static void wrap_glFramebufferSampleLocationsfv(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {return trampoline<void>("glFramebufferSampleLocationsfv", "glFramebufferSampleLocationsfvARB", "glFramebufferSampleLocationsfvNV", nullptr, &pglFramebufferSampleLocationsfv, target, start, count, v);}
extern "C" void APIENTRY glFramebufferSampleLocationsfv(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {return (*pglFramebufferSampleLocationsfv)(target, start, count, v);}
static void wrap_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
static void (APIENTRYP pglFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level) = wrap_glFramebufferTexture;
static void wrap_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {return trampoline<void>("glFramebufferTexture", "glFramebufferTextureARB", "glFramebufferTextureEXT", nullptr, &pglFramebufferTexture, target, attachment, texture, level);}
extern "C" void APIENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {return (*pglFramebufferTexture)(target, attachment, texture, level);}
static void wrap_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
static void (APIENTRYP pglFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = wrap_glFramebufferTexture1D;
static void wrap_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return trampoline<void>("glFramebufferTexture1D", "glFramebufferTexture1DEXT", nullptr, nullptr, &pglFramebufferTexture1D, target, attachment, textarget, texture, level);}
extern "C" void APIENTRY glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return (*pglFramebufferTexture1D)(target, attachment, textarget, texture, level);}
static void wrap_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
static void (APIENTRYP pglFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = wrap_glFramebufferTexture2D;
static void wrap_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return trampoline<void>("glFramebufferTexture2D", "glFramebufferTexture2DEXT", nullptr, nullptr, &pglFramebufferTexture2D, target, attachment, textarget, texture, level);}
extern "C" void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return (*pglFramebufferTexture2D)(target, attachment, textarget, texture, level);}
static void wrap_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
static void (APIENTRYP pglFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = wrap_glFramebufferTexture3D;
static void wrap_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {return trampoline<void>("glFramebufferTexture3D", "glFramebufferTexture3DEXT", nullptr, nullptr, &pglFramebufferTexture3D, target, attachment, textarget, texture, level, zoffset);}
extern "C" void APIENTRY glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {return (*pglFramebufferTexture3D)(target, attachment, textarget, texture, level, zoffset);}
static void wrap_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
static void (APIENTRYP pglFramebufferTextureFace)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) = wrap_glFramebufferTextureFace;
static void wrap_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {return trampoline<void>("glFramebufferTextureFace", "glFramebufferTextureFaceARB", "glFramebufferTextureFaceEXT", nullptr, &pglFramebufferTextureFace, target, attachment, texture, level, face);}
extern "C" void APIENTRY glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {return (*pglFramebufferTextureFace)(target, attachment, texture, level, face);}
static void wrap_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
static void (APIENTRYP pglFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = wrap_glFramebufferTextureLayer;
static void wrap_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {return trampoline<void>("glFramebufferTextureLayer", "glFramebufferTextureLayerARB", "glFramebufferTextureLayerEXT", nullptr, &pglFramebufferTextureLayer, target, attachment, texture, level, layer);}
extern "C" void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {return (*pglFramebufferTextureLayer)(target, attachment, texture, level, layer);}
static void wrap_glFramebufferTextureMultiview(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
static void (APIENTRYP pglFramebufferTextureMultiview)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) = wrap_glFramebufferTextureMultiview;
static void wrap_glFramebufferTextureMultiview(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {return trampoline<void>("glFramebufferTextureMultiview", "glFramebufferTextureMultiviewOVR", nullptr, nullptr, &pglFramebufferTextureMultiview, target, attachment, texture, level, baseViewIndex, numViews);}
extern "C" void APIENTRY glFramebufferTextureMultiview(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {return (*pglFramebufferTextureMultiview)(target, attachment, texture, level, baseViewIndex, numViews);}
static void wrap_glFreeObjectBuffer(GLuint buffer);
static void (APIENTRYP pglFreeObjectBuffer)(GLuint buffer) = wrap_glFreeObjectBuffer;
static void wrap_glFreeObjectBuffer(GLuint buffer) {return trampoline<void>("glFreeObjectBuffer", "glFreeObjectBufferATI", nullptr, nullptr, &pglFreeObjectBuffer, buffer);}
extern "C" void APIENTRY glFreeObjectBuffer(GLuint buffer) {return (*pglFreeObjectBuffer)(buffer);}
static void wrap_glFrontFace(GLenum mode);
static void (APIENTRYP pglFrontFace)(GLenum mode) = wrap_glFrontFace;
static void wrap_glFrontFace(GLenum mode) {return trampoline<void>("glFrontFace", nullptr, nullptr, nullptr, &pglFrontFace, mode);}
extern "C" void APIENTRY glFrontFace(GLenum mode) {return (*pglFrontFace)(mode);}
static void wrap_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val);
static void (APIENTRYP pglFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val) = wrap_glFrustum;
static void wrap_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val) {return trampoline<void>("glFrustum", nullptr, nullptr, nullptr, &pglFrustum, left, right, bottom, top, near_val, far_val);}
extern "C" void APIENTRY glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val) {return (*pglFrustum)(left, right, bottom, top, near_val, far_val);}
static void wrap_glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
static void (APIENTRYP pglFrustumf)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) = wrap_glFrustumf;
static void wrap_glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {return trampoline<void>("glFrustumf", "glFrustumfOES", nullptr, nullptr, &pglFrustumf, l, r, b, t, n, f);}
extern "C" void APIENTRY glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {return (*pglFrustumf)(l, r, b, t, n, f);}
static void wrap_glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
static void (APIENTRYP pglFrustumx)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) = wrap_glFrustumx;
static void wrap_glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {return trampoline<void>("glFrustumx", "glFrustumxOES", nullptr, nullptr, &pglFrustumx, l, r, b, t, n, f);}
extern "C" void APIENTRY glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {return (*pglFrustumx)(l, r, b, t, n, f);}
static GLuint wrap_glGenAsyncMarkers(GLsizei range);
static GLuint (APIENTRYP pglGenAsyncMarkers)(GLsizei range) = wrap_glGenAsyncMarkers;
static GLuint wrap_glGenAsyncMarkers(GLsizei range) {return trampoline<GLuint>("glGenAsyncMarkers", "glGenAsyncMarkersSGIX", nullptr, nullptr, &pglGenAsyncMarkers, range);}
extern "C" GLuint APIENTRY glGenAsyncMarkers(GLsizei range) {return (*pglGenAsyncMarkers)(range);}
static void wrap_glGenBuffers(GLsizei n, GLuint *buffers);
static void (APIENTRYP pglGenBuffers)(GLsizei n, GLuint *buffers) = wrap_glGenBuffers;
static void wrap_glGenBuffers(GLsizei n, GLuint *buffers) {return trampoline<void>("glGenBuffers", "glGenBuffersARB", nullptr, nullptr, &pglGenBuffers, n, buffers);}
extern "C" void APIENTRY glGenBuffers(GLsizei n, GLuint *buffers) {return (*pglGenBuffers)(n, buffers);}
static void wrap_glGenFences(GLsizei n, GLuint *fences);
static void (APIENTRYP pglGenFences)(GLsizei n, GLuint *fences) = wrap_glGenFences;
static void wrap_glGenFences(GLsizei n, GLuint *fences) {return trampoline<void>("glGenFences", "glGenFencesAPPLE", "glGenFencesNV", nullptr, &pglGenFences, n, fences);}
extern "C" void APIENTRY glGenFences(GLsizei n, GLuint *fences) {return (*pglGenFences)(n, fences);}
static GLuint wrap_glGenFragmentShaders(GLuint range);
static GLuint (APIENTRYP pglGenFragmentShaders)(GLuint range) = wrap_glGenFragmentShaders;
static GLuint wrap_glGenFragmentShaders(GLuint range) {return trampoline<GLuint>("glGenFragmentShaders", "glGenFragmentShadersATI", nullptr, nullptr, &pglGenFragmentShaders, range);}
extern "C" GLuint APIENTRY glGenFragmentShaders(GLuint range) {return (*pglGenFragmentShaders)(range);}
static void wrap_glGenFramebuffers(GLsizei n, GLuint *framebuffers);
static void (APIENTRYP pglGenFramebuffers)(GLsizei n, GLuint *framebuffers) = wrap_glGenFramebuffers;
static void wrap_glGenFramebuffers(GLsizei n, GLuint *framebuffers) {return trampoline<void>("glGenFramebuffers", "glGenFramebuffersEXT", nullptr, nullptr, &pglGenFramebuffers, n, framebuffers);}
extern "C" void APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers) {return (*pglGenFramebuffers)(n, framebuffers);}
static GLuint wrap_glGenLists(GLsizei range);
static GLuint (APIENTRYP pglGenLists)(GLsizei range) = wrap_glGenLists;
static GLuint wrap_glGenLists(GLsizei range) {return trampoline<GLuint>("glGenLists", nullptr, nullptr, nullptr, &pglGenLists, range);}
extern "C" GLuint APIENTRY glGenLists(GLsizei range) {return (*pglGenLists)(range);}
static void wrap_glGenNames(GLenum identifier, GLuint num, GLuint *names);
static void (APIENTRYP pglGenNames)(GLenum identifier, GLuint num, GLuint *names) = wrap_glGenNames;
static void wrap_glGenNames(GLenum identifier, GLuint num, GLuint *names) {return trampoline<void>("glGenNames", "glGenNamesAMD", nullptr, nullptr, &pglGenNames, identifier, num, names);}
extern "C" void APIENTRY glGenNames(GLenum identifier, GLuint num, GLuint *names) {return (*pglGenNames)(identifier, num, names);}
static void wrap_glGenOcclusionQueries(GLsizei n, GLuint *ids);
static void (APIENTRYP pglGenOcclusionQueries)(GLsizei n, GLuint *ids) = wrap_glGenOcclusionQueries;
static void wrap_glGenOcclusionQueries(GLsizei n, GLuint *ids) {return trampoline<void>("glGenOcclusionQueries", "glGenOcclusionQueriesNV", nullptr, nullptr, &pglGenOcclusionQueries, n, ids);}
extern "C" void APIENTRY glGenOcclusionQueries(GLsizei n, GLuint *ids) {return (*pglGenOcclusionQueries)(n, ids);}
static GLuint wrap_glGenPaths(GLsizei range);
static GLuint (APIENTRYP pglGenPaths)(GLsizei range) = wrap_glGenPaths;
static GLuint wrap_glGenPaths(GLsizei range) {return trampoline<GLuint>("glGenPaths", "glGenPathsNV", nullptr, nullptr, &pglGenPaths, range);}
extern "C" GLuint APIENTRY glGenPaths(GLsizei range) {return (*pglGenPaths)(range);}
static void wrap_glGenPerfMonitors(GLsizei n, GLuint *monitors);
static void (APIENTRYP pglGenPerfMonitors)(GLsizei n, GLuint *monitors) = wrap_glGenPerfMonitors;
static void wrap_glGenPerfMonitors(GLsizei n, GLuint *monitors) {return trampoline<void>("glGenPerfMonitors", "glGenPerfMonitorsAMD", nullptr, nullptr, &pglGenPerfMonitors, n, monitors);}
extern "C" void APIENTRY glGenPerfMonitors(GLsizei n, GLuint *monitors) {return (*pglGenPerfMonitors)(n, monitors);}
static void wrap_glGenProgramPipelines(GLsizei n, GLuint *pipelines);
static void (APIENTRYP pglGenProgramPipelines)(GLsizei n, GLuint *pipelines) = wrap_glGenProgramPipelines;
static void wrap_glGenProgramPipelines(GLsizei n, GLuint *pipelines) {return trampoline<void>("glGenProgramPipelines", nullptr, nullptr, nullptr, &pglGenProgramPipelines, n, pipelines);}
extern "C" void APIENTRY glGenProgramPipelines(GLsizei n, GLuint *pipelines) {return (*pglGenProgramPipelines)(n, pipelines);}
static void wrap_glGenPrograms(GLsizei n, GLuint *programs);
static void (APIENTRYP pglGenPrograms)(GLsizei n, GLuint *programs) = wrap_glGenPrograms;
static void wrap_glGenPrograms(GLsizei n, GLuint *programs) {return trampoline<void>("glGenPrograms", "glGenProgramsARB", "glGenProgramsNV", nullptr, &pglGenPrograms, n, programs);}
extern "C" void APIENTRY glGenPrograms(GLsizei n, GLuint *programs) {return (*pglGenPrograms)(n, programs);}
static void wrap_glGenQueries(GLsizei n, GLuint *ids);
static void (APIENTRYP pglGenQueries)(GLsizei n, GLuint *ids) = wrap_glGenQueries;
static void wrap_glGenQueries(GLsizei n, GLuint *ids) {return trampoline<void>("glGenQueries", "glGenQueriesARB", nullptr, nullptr, &pglGenQueries, n, ids);}
extern "C" void APIENTRY glGenQueries(GLsizei n, GLuint *ids) {return (*pglGenQueries)(n, ids);}
static void wrap_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
static void (APIENTRYP pglGenRenderbuffers)(GLsizei n, GLuint *renderbuffers) = wrap_glGenRenderbuffers;
static void wrap_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {return trampoline<void>("glGenRenderbuffers", "glGenRenderbuffersEXT", nullptr, nullptr, &pglGenRenderbuffers, n, renderbuffers);}
extern "C" void APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {return (*pglGenRenderbuffers)(n, renderbuffers);}
static void wrap_glGenSamplers(GLsizei count, GLuint *samplers);
static void (APIENTRYP pglGenSamplers)(GLsizei count, GLuint *samplers) = wrap_glGenSamplers;
static void wrap_glGenSamplers(GLsizei count, GLuint *samplers) {return trampoline<void>("glGenSamplers", nullptr, nullptr, nullptr, &pglGenSamplers, count, samplers);}
extern "C" void APIENTRY glGenSamplers(GLsizei count, GLuint *samplers) {return (*pglGenSamplers)(count, samplers);}
static GLuint wrap_glGenSymbols(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
static GLuint (APIENTRYP pglGenSymbols)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) = wrap_glGenSymbols;
static GLuint wrap_glGenSymbols(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {return trampoline<GLuint>("glGenSymbols", "glGenSymbolsEXT", nullptr, nullptr, &pglGenSymbols, datatype, storagetype, range, components);}
extern "C" GLuint APIENTRY glGenSymbols(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {return (*pglGenSymbols)(datatype, storagetype, range, components);}
static void wrap_glGenTextures(GLsizei n, GLuint *textures);
static void (APIENTRYP pglGenTextures)(GLsizei n, GLuint *textures) = wrap_glGenTextures;
static void wrap_glGenTextures(GLsizei n, GLuint *textures) {return trampoline<void>("glGenTextures", "glGenTexturesEXT", nullptr, nullptr, &pglGenTextures, n, textures);}
extern "C" void APIENTRY glGenTextures(GLsizei n, GLuint *textures) {return (*pglGenTextures)(n, textures);}
static void wrap_glGenTransformFeedbacks(GLsizei n, GLuint *ids);
static void (APIENTRYP pglGenTransformFeedbacks)(GLsizei n, GLuint *ids) = wrap_glGenTransformFeedbacks;
static void wrap_glGenTransformFeedbacks(GLsizei n, GLuint *ids) {return trampoline<void>("glGenTransformFeedbacks", "glGenTransformFeedbacksNV", nullptr, nullptr, &pglGenTransformFeedbacks, n, ids);}
extern "C" void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids) {return (*pglGenTransformFeedbacks)(n, ids);}
static void wrap_glGenVertexArrays(GLsizei n, GLuint *arrays);
static void (APIENTRYP pglGenVertexArrays)(GLsizei n, GLuint *arrays) = wrap_glGenVertexArrays;
static void wrap_glGenVertexArrays(GLsizei n, GLuint *arrays) {return trampoline<void>("glGenVertexArrays", "glGenVertexArraysAPPLE", nullptr, nullptr, &pglGenVertexArrays, n, arrays);}
extern "C" void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays) {return (*pglGenVertexArrays)(n, arrays);}
static GLuint wrap_glGenVertexShaders(GLuint range);
static GLuint (APIENTRYP pglGenVertexShaders)(GLuint range) = wrap_glGenVertexShaders;
static GLuint wrap_glGenVertexShaders(GLuint range) {return trampoline<GLuint>("glGenVertexShaders", "glGenVertexShadersEXT", nullptr, nullptr, &pglGenVertexShaders, range);}
extern "C" GLuint APIENTRY glGenVertexShaders(GLuint range) {return (*pglGenVertexShaders)(range);}
static void wrap_glGenerateMipmap(GLenum target);
static void (APIENTRYP pglGenerateMipmap)(GLenum target) = wrap_glGenerateMipmap;
static void wrap_glGenerateMipmap(GLenum target) {return trampoline<void>("glGenerateMipmap", "glGenerateMipmapEXT", nullptr, nullptr, &pglGenerateMipmap, target);}
extern "C" void APIENTRY glGenerateMipmap(GLenum target) {return (*pglGenerateMipmap)(target);}
static void wrap_glGenerateMultiTexMipmap(GLenum texunit, GLenum target);
static void (APIENTRYP pglGenerateMultiTexMipmap)(GLenum texunit, GLenum target) = wrap_glGenerateMultiTexMipmap;
static void wrap_glGenerateMultiTexMipmap(GLenum texunit, GLenum target) {return trampoline<void>("glGenerateMultiTexMipmap", "glGenerateMultiTexMipmapEXT", nullptr, nullptr, &pglGenerateMultiTexMipmap, texunit, target);}
extern "C" void APIENTRY glGenerateMultiTexMipmap(GLenum texunit, GLenum target) {return (*pglGenerateMultiTexMipmap)(texunit, target);}
static void wrap_glGenerateTextureMipmap(GLuint texture);
static void (APIENTRYP pglGenerateTextureMipmap)(GLuint texture) = wrap_glGenerateTextureMipmap;
static void wrap_glGenerateTextureMipmap(GLuint texture) {return trampoline<void>("glGenerateTextureMipmap", "glGenerateTextureMipmapEXT", nullptr, nullptr, &pglGenerateTextureMipmap, texture);}
extern "C" void APIENTRY glGenerateTextureMipmap(GLuint texture) {return (*pglGenerateTextureMipmap)(texture);}
static void wrap_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
static void (APIENTRYP pglGetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) = wrap_glGetActiveAtomicCounterBufferiv;
static void wrap_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {return trampoline<void>("glGetActiveAtomicCounterBufferiv", nullptr, nullptr, nullptr, &pglGetActiveAtomicCounterBufferiv, program, bufferIndex, pname, params);}
extern "C" void APIENTRY glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {return (*pglGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params);}
static void wrap_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
static void (APIENTRYP pglGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) = wrap_glGetActiveAttrib;
static void wrap_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {return trampoline<void>("glGetActiveAttrib", "glGetActiveAttribARB", nullptr, nullptr, &pglGetActiveAttrib, program, index, bufSize, length, size, type, name);}
extern "C" void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {return (*pglGetActiveAttrib)(program, index, bufSize, length, size, type, name);}
static void wrap_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
static void (APIENTRYP pglGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) = wrap_glGetActiveSubroutineName;
static void wrap_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {return trampoline<void>("glGetActiveSubroutineName", nullptr, nullptr, nullptr, &pglGetActiveSubroutineName, program, shadertype, index, bufsize, length, name);}
extern "C" void APIENTRY glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {return (*pglGetActiveSubroutineName)(program, shadertype, index, bufsize, length, name);}
static void wrap_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
static void (APIENTRYP pglGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) = wrap_glGetActiveSubroutineUniformName;
static void wrap_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {return trampoline<void>("glGetActiveSubroutineUniformName", nullptr, nullptr, nullptr, &pglGetActiveSubroutineUniformName, program, shadertype, index, bufsize, length, name);}
extern "C" void APIENTRY glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {return (*pglGetActiveSubroutineUniformName)(program, shadertype, index, bufsize, length, name);}
static void wrap_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
static void (APIENTRYP pglGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) = wrap_glGetActiveSubroutineUniformiv;
static void wrap_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {return trampoline<void>("glGetActiveSubroutineUniformiv", nullptr, nullptr, nullptr, &pglGetActiveSubroutineUniformiv, program, shadertype, index, pname, values);}
extern "C" void APIENTRY glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {return (*pglGetActiveSubroutineUniformiv)(program, shadertype, index, pname, values);}
static void wrap_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
static void (APIENTRYP pglGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) = wrap_glGetActiveUniform;
static void wrap_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {return trampoline<void>("glGetActiveUniform", "glGetActiveUniformARB", nullptr, nullptr, &pglGetActiveUniform, program, index, bufSize, length, size, type, name);}
extern "C" void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {return (*pglGetActiveUniform)(program, index, bufSize, length, size, type, name);}
static void wrap_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
static void (APIENTRYP pglGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) = wrap_glGetActiveUniformBlockName;
static void wrap_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {return trampoline<void>("glGetActiveUniformBlockName", nullptr, nullptr, nullptr, &pglGetActiveUniformBlockName, program, uniformBlockIndex, bufSize, length, uniformBlockName);}
extern "C" void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {return (*pglGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);}
static void wrap_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
static void (APIENTRYP pglGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) = wrap_glGetActiveUniformBlockiv;
static void wrap_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {return trampoline<void>("glGetActiveUniformBlockiv", nullptr, nullptr, nullptr, &pglGetActiveUniformBlockiv, program, uniformBlockIndex, pname, params);}
extern "C" void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {return (*pglGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params);}
static void wrap_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
static void (APIENTRYP pglGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) = wrap_glGetActiveUniformName;
static void wrap_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {return trampoline<void>("glGetActiveUniformName", nullptr, nullptr, nullptr, &pglGetActiveUniformName, program, uniformIndex, bufSize, length, uniformName);}
extern "C" void APIENTRY glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {return (*pglGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);}
static void wrap_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
static void (APIENTRYP pglGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) = wrap_glGetActiveUniformsiv;
static void wrap_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {return trampoline<void>("glGetActiveUniformsiv", nullptr, nullptr, nullptr, &pglGetActiveUniformsiv, program, uniformCount, uniformIndices, pname, params);}
extern "C" void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {return (*pglGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params);}
static void wrap_glGetActiveVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
static void (APIENTRYP pglGetActiveVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) = wrap_glGetActiveVarying;
static void wrap_glGetActiveVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {return trampoline<void>("glGetActiveVarying", "glGetActiveVaryingNV", nullptr, nullptr, &pglGetActiveVarying, program, index, bufSize, length, size, type, name);}
extern "C" void APIENTRY glGetActiveVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {return (*pglGetActiveVarying)(program, index, bufSize, length, size, type, name);}
static void wrap_glGetArrayObjectfv(GLenum array, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetArrayObjectfv)(GLenum array, GLenum pname, GLfloat *params) = wrap_glGetArrayObjectfv;
static void wrap_glGetArrayObjectfv(GLenum array, GLenum pname, GLfloat *params) {return trampoline<void>("glGetArrayObjectfv", "glGetArrayObjectfvATI", nullptr, nullptr, &pglGetArrayObjectfv, array, pname, params);}
extern "C" void APIENTRY glGetArrayObjectfv(GLenum array, GLenum pname, GLfloat *params) {return (*pglGetArrayObjectfv)(array, pname, params);}
static void wrap_glGetArrayObjectiv(GLenum array, GLenum pname, GLint *params);
static void (APIENTRYP pglGetArrayObjectiv)(GLenum array, GLenum pname, GLint *params) = wrap_glGetArrayObjectiv;
static void wrap_glGetArrayObjectiv(GLenum array, GLenum pname, GLint *params) {return trampoline<void>("glGetArrayObjectiv", "glGetArrayObjectivATI", nullptr, nullptr, &pglGetArrayObjectiv, array, pname, params);}
extern "C" void APIENTRY glGetArrayObjectiv(GLenum array, GLenum pname, GLint *params) {return (*pglGetArrayObjectiv)(array, pname, params);}
static void wrap_glGetAttachedObjects(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
static void (APIENTRYP pglGetAttachedObjects)(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) = wrap_glGetAttachedObjects;
static void wrap_glGetAttachedObjects(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) {return trampoline<void>("glGetAttachedObjects", "glGetAttachedObjectsARB", nullptr, nullptr, &pglGetAttachedObjects, containerObj, maxCount, count, obj);}
extern "C" void APIENTRY glGetAttachedObjects(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) {return (*pglGetAttachedObjects)(containerObj, maxCount, count, obj);}
static void wrap_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
static void (APIENTRYP pglGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) = wrap_glGetAttachedShaders;
static void wrap_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {return trampoline<void>("glGetAttachedShaders", nullptr, nullptr, nullptr, &pglGetAttachedShaders, program, maxCount, count, shaders);}
extern "C" void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {return (*pglGetAttachedShaders)(program, maxCount, count, shaders);}
static GLint wrap_glGetAttribLocation(GLuint program, const GLchar *name);
static GLint (APIENTRYP pglGetAttribLocation)(GLuint program, const GLchar *name) = wrap_glGetAttribLocation;
static GLint wrap_glGetAttribLocation(GLuint program, const GLchar *name) {return trampoline<GLint>("glGetAttribLocation", "glGetAttribLocationARB", nullptr, nullptr, &pglGetAttribLocation, program, name);}
extern "C" GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar *name) {return (*pglGetAttribLocation)(program, name);}
static void wrap_glGetBooleanIndexedv(GLenum target, GLuint index, GLboolean *data);
static void (APIENTRYP pglGetBooleanIndexedv)(GLenum target, GLuint index, GLboolean *data) = wrap_glGetBooleanIndexedv;
static void wrap_glGetBooleanIndexedv(GLenum target, GLuint index, GLboolean *data) {return trampoline<void>("glGetBooleanIndexedv", "glGetBooleanIndexedvEXT", nullptr, nullptr, &pglGetBooleanIndexedv, target, index, data);}
extern "C" void APIENTRY glGetBooleanIndexedv(GLenum target, GLuint index, GLboolean *data) {return (*pglGetBooleanIndexedv)(target, index, data);}
static void wrap_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
static void (APIENTRYP pglGetBooleani_v)(GLenum target, GLuint index, GLboolean *data) = wrap_glGetBooleani_v;
static void wrap_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {return trampoline<void>("glGetBooleani_v", nullptr, nullptr, nullptr, &pglGetBooleani_v, target, index, data);}
extern "C" void APIENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {return (*pglGetBooleani_v)(target, index, data);}
static void wrap_glGetBooleanv(GLenum pname, GLboolean *params);
static void (APIENTRYP pglGetBooleanv)(GLenum pname, GLboolean *params) = wrap_glGetBooleanv;
static void wrap_glGetBooleanv(GLenum pname, GLboolean *params) {return trampoline<void>("glGetBooleanv", nullptr, nullptr, nullptr, &pglGetBooleanv, pname, params);}
extern "C" void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params) {return (*pglGetBooleanv)(pname, params);}
static void wrap_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
static void (APIENTRYP pglGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params) = wrap_glGetBufferParameteri64v;
static void wrap_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {return trampoline<void>("glGetBufferParameteri64v", nullptr, nullptr, nullptr, &pglGetBufferParameteri64v, target, pname, params);}
extern "C" void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {return (*pglGetBufferParameteri64v)(target, pname, params);}
static void wrap_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetBufferParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetBufferParameteriv;
static void wrap_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetBufferParameteriv", "glGetBufferParameterivARB", nullptr, nullptr, &pglGetBufferParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetBufferParameteriv)(target, pname, params);}
static void wrap_glGetBufferParameterui64v(GLenum target, GLenum pname, GLuint64EXT *params);
static void (APIENTRYP pglGetBufferParameterui64v)(GLenum target, GLenum pname, GLuint64EXT *params) = wrap_glGetBufferParameterui64v;
static void wrap_glGetBufferParameterui64v(GLenum target, GLenum pname, GLuint64EXT *params) {return trampoline<void>("glGetBufferParameterui64v", "glGetBufferParameterui64vNV", nullptr, nullptr, &pglGetBufferParameterui64v, target, pname, params);}
extern "C" void APIENTRY glGetBufferParameterui64v(GLenum target, GLenum pname, GLuint64EXT *params) {return (*pglGetBufferParameterui64v)(target, pname, params);}
static void wrap_glGetBufferPointerv(GLenum target, GLenum pname, void **params);
static void (APIENTRYP pglGetBufferPointerv)(GLenum target, GLenum pname, void **params) = wrap_glGetBufferPointerv;
static void wrap_glGetBufferPointerv(GLenum target, GLenum pname, void **params) {return trampoline<void>("glGetBufferPointerv", "glGetBufferPointervARB", nullptr, nullptr, &pglGetBufferPointerv, target, pname, params);}
extern "C" void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, void **params) {return (*pglGetBufferPointerv)(target, pname, params);}
static void wrap_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
static void (APIENTRYP pglGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void *data) = wrap_glGetBufferSubData;
static void wrap_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {return trampoline<void>("glGetBufferSubData", "glGetBufferSubDataARB", nullptr, nullptr, &pglGetBufferSubData, target, offset, size, data);}
extern "C" void APIENTRY glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {return (*pglGetBufferSubData)(target, offset, size, data);}
static void wrap_glGetClipPlane(GLenum plane, GLdouble *equation);
static void (APIENTRYP pglGetClipPlane)(GLenum plane, GLdouble *equation) = wrap_glGetClipPlane;
static void wrap_glGetClipPlane(GLenum plane, GLdouble *equation) {return trampoline<void>("glGetClipPlane", nullptr, nullptr, nullptr, &pglGetClipPlane, plane, equation);}
extern "C" void APIENTRY glGetClipPlane(GLenum plane, GLdouble *equation) {return (*pglGetClipPlane)(plane, equation);}
static void wrap_glGetClipPlanef(GLenum plane, GLfloat *equation);
static void (APIENTRYP pglGetClipPlanef)(GLenum plane, GLfloat *equation) = wrap_glGetClipPlanef;
static void wrap_glGetClipPlanef(GLenum plane, GLfloat *equation) {return trampoline<void>("glGetClipPlanef", "glGetClipPlanefOES", nullptr, nullptr, &pglGetClipPlanef, plane, equation);}
extern "C" void APIENTRY glGetClipPlanef(GLenum plane, GLfloat *equation) {return (*pglGetClipPlanef)(plane, equation);}
static void wrap_glGetClipPlanex(GLenum plane, GLfixed *equation);
static void (APIENTRYP pglGetClipPlanex)(GLenum plane, GLfixed *equation) = wrap_glGetClipPlanex;
static void wrap_glGetClipPlanex(GLenum plane, GLfixed *equation) {return trampoline<void>("glGetClipPlanex", "glGetClipPlanexOES", nullptr, nullptr, &pglGetClipPlanex, plane, equation);}
extern "C" void APIENTRY glGetClipPlanex(GLenum plane, GLfixed *equation) {return (*pglGetClipPlanex)(plane, equation);}
static void wrap_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table);
static void (APIENTRYP pglGetColorTable)(GLenum target, GLenum format, GLenum type, GLvoid *table) = wrap_glGetColorTable;
static void wrap_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table) {return trampoline<void>("glGetColorTable", "glGetColorTableEXT", "glGetColorTableSGI", nullptr, &pglGetColorTable, target, format, type, table);}
extern "C" void APIENTRY glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table) {return (*pglGetColorTable)(target, format, type, table);}
static void wrap_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetColorTableParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetColorTableParameterfv;
static void wrap_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetColorTableParameterfv", "glGetColorTableParameterfvEXT", "glGetColorTableParameterfvSGI", nullptr, &pglGetColorTableParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetColorTableParameterfv)(target, pname, params);}
static void wrap_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetColorTableParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetColorTableParameteriv;
static void wrap_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetColorTableParameteriv", "glGetColorTableParameterivEXT", "glGetColorTableParameterivSGI", nullptr, &pglGetColorTableParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetColorTableParameteriv)(target, pname, params);}
static void wrap_glGetCombinerInputParameterfv(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetCombinerInputParameterfv)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) = wrap_glGetCombinerInputParameterfv;
static void wrap_glGetCombinerInputParameterfv(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) {return trampoline<void>("glGetCombinerInputParameterfv", "glGetCombinerInputParameterfvNV", nullptr, nullptr, &pglGetCombinerInputParameterfv, stage, portion, variable, pname, params);}
extern "C" void APIENTRY glGetCombinerInputParameterfv(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) {return (*pglGetCombinerInputParameterfv)(stage, portion, variable, pname, params);}
static void wrap_glGetCombinerInputParameteriv(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
static void (APIENTRYP pglGetCombinerInputParameteriv)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) = wrap_glGetCombinerInputParameteriv;
static void wrap_glGetCombinerInputParameteriv(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) {return trampoline<void>("glGetCombinerInputParameteriv", "glGetCombinerInputParameterivNV", nullptr, nullptr, &pglGetCombinerInputParameteriv, stage, portion, variable, pname, params);}
extern "C" void APIENTRY glGetCombinerInputParameteriv(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) {return (*pglGetCombinerInputParameteriv)(stage, portion, variable, pname, params);}
static void wrap_glGetCombinerOutputParameterfv(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetCombinerOutputParameterfv)(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) = wrap_glGetCombinerOutputParameterfv;
static void wrap_glGetCombinerOutputParameterfv(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) {return trampoline<void>("glGetCombinerOutputParameterfv", "glGetCombinerOutputParameterfvNV", nullptr, nullptr, &pglGetCombinerOutputParameterfv, stage, portion, pname, params);}
extern "C" void APIENTRY glGetCombinerOutputParameterfv(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) {return (*pglGetCombinerOutputParameterfv)(stage, portion, pname, params);}
static void wrap_glGetCombinerOutputParameteriv(GLenum stage, GLenum portion, GLenum pname, GLint *params);
static void (APIENTRYP pglGetCombinerOutputParameteriv)(GLenum stage, GLenum portion, GLenum pname, GLint *params) = wrap_glGetCombinerOutputParameteriv;
static void wrap_glGetCombinerOutputParameteriv(GLenum stage, GLenum portion, GLenum pname, GLint *params) {return trampoline<void>("glGetCombinerOutputParameteriv", "glGetCombinerOutputParameterivNV", nullptr, nullptr, &pglGetCombinerOutputParameteriv, stage, portion, pname, params);}
extern "C" void APIENTRY glGetCombinerOutputParameteriv(GLenum stage, GLenum portion, GLenum pname, GLint *params) {return (*pglGetCombinerOutputParameteriv)(stage, portion, pname, params);}
static void wrap_glGetCombinerStageParameterfv(GLenum stage, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetCombinerStageParameterfv)(GLenum stage, GLenum pname, GLfloat *params) = wrap_glGetCombinerStageParameterfv;
static void wrap_glGetCombinerStageParameterfv(GLenum stage, GLenum pname, GLfloat *params) {return trampoline<void>("glGetCombinerStageParameterfv", "glGetCombinerStageParameterfvNV", nullptr, nullptr, &pglGetCombinerStageParameterfv, stage, pname, params);}
extern "C" void APIENTRY glGetCombinerStageParameterfv(GLenum stage, GLenum pname, GLfloat *params) {return (*pglGetCombinerStageParameterfv)(stage, pname, params);}
static GLuint wrap_glGetCommandHeader(GLenum tokenID, GLuint size);
static GLuint (APIENTRYP pglGetCommandHeader)(GLenum tokenID, GLuint size) = wrap_glGetCommandHeader;
static GLuint wrap_glGetCommandHeader(GLenum tokenID, GLuint size) {return trampoline<GLuint>("glGetCommandHeader", "glGetCommandHeaderNV", nullptr, nullptr, &pglGetCommandHeader, tokenID, size);}
extern "C" GLuint APIENTRY glGetCommandHeader(GLenum tokenID, GLuint size) {return (*pglGetCommandHeader)(tokenID, size);}
static void wrap_glGetCompressedMultiTexImage(GLenum texunit, GLenum target, GLint lod, void *img);
static void (APIENTRYP pglGetCompressedMultiTexImage)(GLenum texunit, GLenum target, GLint lod, void *img) = wrap_glGetCompressedMultiTexImage;
static void wrap_glGetCompressedMultiTexImage(GLenum texunit, GLenum target, GLint lod, void *img) {return trampoline<void>("glGetCompressedMultiTexImage", "glGetCompressedMultiTexImageEXT", nullptr, nullptr, &pglGetCompressedMultiTexImage, texunit, target, lod, img);}
extern "C" void APIENTRY glGetCompressedMultiTexImage(GLenum texunit, GLenum target, GLint lod, void *img) {return (*pglGetCompressedMultiTexImage)(texunit, target, lod, img);}
static void wrap_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img);
static void (APIENTRYP pglGetCompressedTexImage)(GLenum target, GLint lod, GLvoid *img) = wrap_glGetCompressedTexImage;
static void wrap_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img) {return trampoline<void>("glGetCompressedTexImage", "glGetCompressedTexImageARB", nullptr, nullptr, &pglGetCompressedTexImage, target, lod, img);}
extern "C" void APIENTRY glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img) {return (*pglGetCompressedTexImage)(target, lod, img);}
static void wrap_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
static void (APIENTRYP pglGetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void *pixels) = wrap_glGetCompressedTextureImage;
static void wrap_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) {return trampoline<void>("glGetCompressedTextureImage", "glGetCompressedTextureImageEXT", nullptr, nullptr, &pglGetCompressedTextureImage, texture, level, bufSize, pixels);}
extern "C" void APIENTRY glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) {return (*pglGetCompressedTextureImage)(texture, level, bufSize, pixels);}
static void wrap_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
static void (APIENTRYP pglGetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) = wrap_glGetCompressedTextureSubImage;
static void wrap_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {return trampoline<void>("glGetCompressedTextureSubImage", nullptr, nullptr, nullptr, &pglGetCompressedTextureSubImage, texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);}
extern "C" void APIENTRY glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {return (*pglGetCompressedTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);}
static void wrap_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image);
static void (APIENTRYP pglGetConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLvoid *image) = wrap_glGetConvolutionFilter;
static void wrap_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image) {return trampoline<void>("glGetConvolutionFilter", "glGetConvolutionFilterEXT", nullptr, nullptr, &pglGetConvolutionFilter, target, format, type, image);}
extern "C" void APIENTRY glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image) {return (*pglGetConvolutionFilter)(target, format, type, image);}
static void wrap_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetConvolutionParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetConvolutionParameterfv;
static void wrap_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetConvolutionParameterfv", "glGetConvolutionParameterfvEXT", nullptr, nullptr, &pglGetConvolutionParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetConvolutionParameterfv)(target, pname, params);}
static void wrap_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetConvolutionParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetConvolutionParameteriv;
static void wrap_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetConvolutionParameteriv", "glGetConvolutionParameterivEXT", nullptr, nullptr, &pglGetConvolutionParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetConvolutionParameteriv)(target, pname, params);}
static void wrap_glGetConvolutionParameterxv(GLenum target, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetConvolutionParameterxv)(GLenum target, GLenum pname, GLfixed *params) = wrap_glGetConvolutionParameterxv;
static void wrap_glGetConvolutionParameterxv(GLenum target, GLenum pname, GLfixed *params) {return trampoline<void>("glGetConvolutionParameterxv", "glGetConvolutionParameterxvOES", nullptr, nullptr, &pglGetConvolutionParameterxv, target, pname, params);}
extern "C" void APIENTRY glGetConvolutionParameterxv(GLenum target, GLenum pname, GLfixed *params) {return (*pglGetConvolutionParameterxv)(target, pname, params);}
static void wrap_glGetCoverageModulationTable(GLsizei bufsize, GLfloat *v);
static void (APIENTRYP pglGetCoverageModulationTable)(GLsizei bufsize, GLfloat *v) = wrap_glGetCoverageModulationTable;
static void wrap_glGetCoverageModulationTable(GLsizei bufsize, GLfloat *v) {return trampoline<void>("glGetCoverageModulationTable", "glGetCoverageModulationTableNV", nullptr, nullptr, &pglGetCoverageModulationTable, bufsize, v);}
extern "C" void APIENTRY glGetCoverageModulationTable(GLsizei bufsize, GLfloat *v) {return (*pglGetCoverageModulationTable)(bufsize, v);}
static GLuint wrap_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
static GLuint (APIENTRYP pglGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) = wrap_glGetDebugMessageLog;
static GLuint wrap_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {return trampoline<GLuint>("glGetDebugMessageLog", "glGetDebugMessageLogARB", "glGetDebugMessageLogAMD", nullptr, &pglGetDebugMessageLog, count, bufSize, sources, types, ids, severities, lengths, messageLog);}
extern "C" GLuint APIENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {return (*pglGetDebugMessageLog)(count, bufSize, sources, types, ids, severities, lengths, messageLog);}
static void wrap_glGetDetailTexFunc(GLenum target, GLfloat *points);
static void (APIENTRYP pglGetDetailTexFunc)(GLenum target, GLfloat *points) = wrap_glGetDetailTexFunc;
static void wrap_glGetDetailTexFunc(GLenum target, GLfloat *points) {return trampoline<void>("glGetDetailTexFunc", "glGetDetailTexFuncSGIS", nullptr, nullptr, &pglGetDetailTexFunc, target, points);}
extern "C" void APIENTRY glGetDetailTexFunc(GLenum target, GLfloat *points) {return (*pglGetDetailTexFunc)(target, points);}
static void wrap_glGetDoubleIndexedv(GLenum target, GLuint index, GLdouble *data);
static void (APIENTRYP pglGetDoubleIndexedv)(GLenum target, GLuint index, GLdouble *data) = wrap_glGetDoubleIndexedv;
static void wrap_glGetDoubleIndexedv(GLenum target, GLuint index, GLdouble *data) {return trampoline<void>("glGetDoubleIndexedv", "glGetDoubleIndexedvEXT", nullptr, nullptr, &pglGetDoubleIndexedv, target, index, data);}
extern "C" void APIENTRY glGetDoubleIndexedv(GLenum target, GLuint index, GLdouble *data) {return (*pglGetDoubleIndexedv)(target, index, data);}
static void wrap_glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
static void (APIENTRYP pglGetDoublei_v)(GLenum target, GLuint index, GLdouble *data) = wrap_glGetDoublei_v;
static void wrap_glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {return trampoline<void>("glGetDoublei_v", "glGetDoublei_vEXT", nullptr, nullptr, &pglGetDoublei_v, target, index, data);}
extern "C" void APIENTRY glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {return (*pglGetDoublei_v)(target, index, data);}
static void wrap_glGetDoublev(GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetDoublev)(GLenum pname, GLdouble *params) = wrap_glGetDoublev;
static void wrap_glGetDoublev(GLenum pname, GLdouble *params) {return trampoline<void>("glGetDoublev", nullptr, nullptr, nullptr, &pglGetDoublev, pname, params);}
extern "C" void APIENTRY glGetDoublev(GLenum pname, GLdouble *params) {return (*pglGetDoublev)(pname, params);}
static GLenum wrap_glGetError(void);
static GLenum (APIENTRYP pglGetError)(void) = wrap_glGetError;
static GLenum wrap_glGetError(void) {return trampoline<GLenum>("glGetError", nullptr, nullptr, nullptr, &pglGetError);}
extern "C" GLenum APIENTRY glGetError(void) {return (*pglGetError)();}
static void wrap_glGetFenceiv(GLuint fence, GLenum pname, GLint *params);
static void (APIENTRYP pglGetFenceiv)(GLuint fence, GLenum pname, GLint *params) = wrap_glGetFenceiv;
static void wrap_glGetFenceiv(GLuint fence, GLenum pname, GLint *params) {return trampoline<void>("glGetFenceiv", "glGetFenceivNV", nullptr, nullptr, &pglGetFenceiv, fence, pname, params);}
extern "C" void APIENTRY glGetFenceiv(GLuint fence, GLenum pname, GLint *params) {return (*pglGetFenceiv)(fence, pname, params);}
static void wrap_glGetFinalCombinerInputParameterfv(GLenum variable, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetFinalCombinerInputParameterfv)(GLenum variable, GLenum pname, GLfloat *params) = wrap_glGetFinalCombinerInputParameterfv;
static void wrap_glGetFinalCombinerInputParameterfv(GLenum variable, GLenum pname, GLfloat *params) {return trampoline<void>("glGetFinalCombinerInputParameterfv", "glGetFinalCombinerInputParameterfvNV", nullptr, nullptr, &pglGetFinalCombinerInputParameterfv, variable, pname, params);}
extern "C" void APIENTRY glGetFinalCombinerInputParameterfv(GLenum variable, GLenum pname, GLfloat *params) {return (*pglGetFinalCombinerInputParameterfv)(variable, pname, params);}
static void wrap_glGetFinalCombinerInputParameteriv(GLenum variable, GLenum pname, GLint *params);
static void (APIENTRYP pglGetFinalCombinerInputParameteriv)(GLenum variable, GLenum pname, GLint *params) = wrap_glGetFinalCombinerInputParameteriv;
static void wrap_glGetFinalCombinerInputParameteriv(GLenum variable, GLenum pname, GLint *params) {return trampoline<void>("glGetFinalCombinerInputParameteriv", "glGetFinalCombinerInputParameterivNV", nullptr, nullptr, &pglGetFinalCombinerInputParameteriv, variable, pname, params);}
extern "C" void APIENTRY glGetFinalCombinerInputParameteriv(GLenum variable, GLenum pname, GLint *params) {return (*pglGetFinalCombinerInputParameteriv)(variable, pname, params);}
static void wrap_glGetFirstPerfQueryId(GLuint *queryId);
static void (APIENTRYP pglGetFirstPerfQueryId)(GLuint *queryId) = wrap_glGetFirstPerfQueryId;
static void wrap_glGetFirstPerfQueryId(GLuint *queryId) {return trampoline<void>("glGetFirstPerfQueryId", "glGetFirstPerfQueryIdINTEL", nullptr, nullptr, &pglGetFirstPerfQueryId, queryId);}
extern "C" void APIENTRY glGetFirstPerfQueryId(GLuint *queryId) {return (*pglGetFirstPerfQueryId)(queryId);}
static void wrap_glGetFixedv(GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetFixedv)(GLenum pname, GLfixed *params) = wrap_glGetFixedv;
static void wrap_glGetFixedv(GLenum pname, GLfixed *params) {return trampoline<void>("glGetFixedv", "glGetFixedvOES", nullptr, nullptr, &pglGetFixedv, pname, params);}
extern "C" void APIENTRY glGetFixedv(GLenum pname, GLfixed *params) {return (*pglGetFixedv)(pname, params);}
static void wrap_glGetFloatIndexedv(GLenum target, GLuint index, GLfloat *data);
static void (APIENTRYP pglGetFloatIndexedv)(GLenum target, GLuint index, GLfloat *data) = wrap_glGetFloatIndexedv;
static void wrap_glGetFloatIndexedv(GLenum target, GLuint index, GLfloat *data) {return trampoline<void>("glGetFloatIndexedv", "glGetFloatIndexedvEXT", nullptr, nullptr, &pglGetFloatIndexedv, target, index, data);}
extern "C" void APIENTRY glGetFloatIndexedv(GLenum target, GLuint index, GLfloat *data) {return (*pglGetFloatIndexedv)(target, index, data);}
static void wrap_glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
static void (APIENTRYP pglGetFloati_v)(GLenum target, GLuint index, GLfloat *data) = wrap_glGetFloati_v;
static void wrap_glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {return trampoline<void>("glGetFloati_v", "glGetFloati_vEXT", nullptr, nullptr, &pglGetFloati_v, target, index, data);}
extern "C" void APIENTRY glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {return (*pglGetFloati_v)(target, index, data);}
static void wrap_glGetFloatv(GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetFloatv)(GLenum pname, GLfloat *params) = wrap_glGetFloatv;
static void wrap_glGetFloatv(GLenum pname, GLfloat *params) {return trampoline<void>("glGetFloatv", nullptr, nullptr, nullptr, &pglGetFloatv, pname, params);}
extern "C" void APIENTRY glGetFloatv(GLenum pname, GLfloat *params) {return (*pglGetFloatv)(pname, params);}
static void wrap_glGetFogFunc(GLfloat *points);
static void (APIENTRYP pglGetFogFunc)(GLfloat *points) = wrap_glGetFogFunc;
static void wrap_glGetFogFunc(GLfloat *points) {return trampoline<void>("glGetFogFunc", "glGetFogFuncSGIS", nullptr, nullptr, &pglGetFogFunc, points);}
extern "C" void APIENTRY glGetFogFunc(GLfloat *points) {return (*pglGetFogFunc)(points);}
static GLint wrap_glGetFragDataIndex(GLuint program, const GLchar *name);
static GLint (APIENTRYP pglGetFragDataIndex)(GLuint program, const GLchar *name) = wrap_glGetFragDataIndex;
static GLint wrap_glGetFragDataIndex(GLuint program, const GLchar *name) {return trampoline<GLint>("glGetFragDataIndex", nullptr, nullptr, nullptr, &pglGetFragDataIndex, program, name);}
extern "C" GLint APIENTRY glGetFragDataIndex(GLuint program, const GLchar *name) {return (*pglGetFragDataIndex)(program, name);}
static GLint wrap_glGetFragDataLocation(GLuint program, const GLchar *name);
static GLint (APIENTRYP pglGetFragDataLocation)(GLuint program, const GLchar *name) = wrap_glGetFragDataLocation;
static GLint wrap_glGetFragDataLocation(GLuint program, const GLchar *name) {return trampoline<GLint>("glGetFragDataLocation", "glGetFragDataLocationEXT", nullptr, nullptr, &pglGetFragDataLocation, program, name);}
extern "C" GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name) {return (*pglGetFragDataLocation)(program, name);}
static void wrap_glGetFragmentLightfv(GLenum light, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetFragmentLightfv)(GLenum light, GLenum pname, GLfloat *params) = wrap_glGetFragmentLightfv;
static void wrap_glGetFragmentLightfv(GLenum light, GLenum pname, GLfloat *params) {return trampoline<void>("glGetFragmentLightfv", "glGetFragmentLightfvSGIX", nullptr, nullptr, &pglGetFragmentLightfv, light, pname, params);}
extern "C" void APIENTRY glGetFragmentLightfv(GLenum light, GLenum pname, GLfloat *params) {return (*pglGetFragmentLightfv)(light, pname, params);}
static void wrap_glGetFragmentLightiv(GLenum light, GLenum pname, GLint *params);
static void (APIENTRYP pglGetFragmentLightiv)(GLenum light, GLenum pname, GLint *params) = wrap_glGetFragmentLightiv;
static void wrap_glGetFragmentLightiv(GLenum light, GLenum pname, GLint *params) {return trampoline<void>("glGetFragmentLightiv", "glGetFragmentLightivSGIX", nullptr, nullptr, &pglGetFragmentLightiv, light, pname, params);}
extern "C" void APIENTRY glGetFragmentLightiv(GLenum light, GLenum pname, GLint *params) {return (*pglGetFragmentLightiv)(light, pname, params);}
static void wrap_glGetFragmentMaterialfv(GLenum face, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetFragmentMaterialfv)(GLenum face, GLenum pname, GLfloat *params) = wrap_glGetFragmentMaterialfv;
static void wrap_glGetFragmentMaterialfv(GLenum face, GLenum pname, GLfloat *params) {return trampoline<void>("glGetFragmentMaterialfv", "glGetFragmentMaterialfvSGIX", nullptr, nullptr, &pglGetFragmentMaterialfv, face, pname, params);}
extern "C" void APIENTRY glGetFragmentMaterialfv(GLenum face, GLenum pname, GLfloat *params) {return (*pglGetFragmentMaterialfv)(face, pname, params);}
static void wrap_glGetFragmentMaterialiv(GLenum face, GLenum pname, GLint *params);
static void (APIENTRYP pglGetFragmentMaterialiv)(GLenum face, GLenum pname, GLint *params) = wrap_glGetFragmentMaterialiv;
static void wrap_glGetFragmentMaterialiv(GLenum face, GLenum pname, GLint *params) {return trampoline<void>("glGetFragmentMaterialiv", "glGetFragmentMaterialivSGIX", nullptr, nullptr, &pglGetFragmentMaterialiv, face, pname, params);}
extern "C" void APIENTRY glGetFragmentMaterialiv(GLenum face, GLenum pname, GLint *params) {return (*pglGetFragmentMaterialiv)(face, pname, params);}
static void wrap_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
static void (APIENTRYP pglGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params) = wrap_glGetFramebufferAttachmentParameteriv;
static void wrap_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {return trampoline<void>("glGetFramebufferAttachmentParameteriv", "glGetFramebufferAttachmentParameterivEXT", nullptr, nullptr, &pglGetFramebufferAttachmentParameteriv, target, attachment, pname, params);}
extern "C" void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {return (*pglGetFramebufferAttachmentParameteriv)(target, attachment, pname, params);}
static void wrap_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetFramebufferParameteriv;
static void wrap_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetFramebufferParameteriv", "glGetFramebufferParameterivEXT", nullptr, nullptr, &pglGetFramebufferParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetFramebufferParameteriv)(target, pname, params);}
static GLenum wrap_glGetGraphicsResetStatus(void);
static GLenum (APIENTRYP pglGetGraphicsResetStatus)(void) = wrap_glGetGraphicsResetStatus;
static GLenum wrap_glGetGraphicsResetStatus(void) {return trampoline<GLenum>("glGetGraphicsResetStatus", "glGetGraphicsResetStatusARB", nullptr, nullptr, &pglGetGraphicsResetStatus);}
extern "C" GLenum APIENTRY glGetGraphicsResetStatus(void) {return (*pglGetGraphicsResetStatus)();}
static GLhandleARB wrap_glGetHandle(GLenum pname);
static GLhandleARB (APIENTRYP pglGetHandle)(GLenum pname) = wrap_glGetHandle;
static GLhandleARB wrap_glGetHandle(GLenum pname) {return trampoline<GLhandleARB>("glGetHandle", "glGetHandleARB", nullptr, nullptr, &pglGetHandle, pname);}
extern "C" GLhandleARB APIENTRY glGetHandle(GLenum pname) {return (*pglGetHandle)(pname);}
static void wrap_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
static void (APIENTRYP pglGetHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values) = wrap_glGetHistogram;
static void wrap_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values) {return trampoline<void>("glGetHistogram", "glGetHistogramEXT", nullptr, nullptr, &pglGetHistogram, target, reset, format, type, values);}
extern "C" void APIENTRY glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values) {return (*pglGetHistogram)(target, reset, format, type, values);}
static void wrap_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetHistogramParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetHistogramParameterfv;
static void wrap_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetHistogramParameterfv", "glGetHistogramParameterfvEXT", nullptr, nullptr, &pglGetHistogramParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetHistogramParameterfv)(target, pname, params);}
static void wrap_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetHistogramParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetHistogramParameteriv;
static void wrap_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetHistogramParameteriv", "glGetHistogramParameterivEXT", nullptr, nullptr, &pglGetHistogramParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetHistogramParameteriv)(target, pname, params);}
static void wrap_glGetHistogramParameterxv(GLenum target, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetHistogramParameterxv)(GLenum target, GLenum pname, GLfixed *params) = wrap_glGetHistogramParameterxv;
static void wrap_glGetHistogramParameterxv(GLenum target, GLenum pname, GLfixed *params) {return trampoline<void>("glGetHistogramParameterxv", "glGetHistogramParameterxvOES", nullptr, nullptr, &pglGetHistogramParameterxv, target, pname, params);}
extern "C" void APIENTRY glGetHistogramParameterxv(GLenum target, GLenum pname, GLfixed *params) {return (*pglGetHistogramParameterxv)(target, pname, params);}
static GLuint64 wrap_glGetImageHandle(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
static GLuint64 (APIENTRYP pglGetImageHandle)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) = wrap_glGetImageHandle;
static GLuint64 wrap_glGetImageHandle(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {return trampoline<GLuint64>("glGetImageHandle", "glGetImageHandleARB", "glGetImageHandleNV", nullptr, &pglGetImageHandle, texture, level, layered, layer, format);}
extern "C" GLuint64 APIENTRY glGetImageHandle(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {return (*pglGetImageHandle)(texture, level, layered, layer, format);}
static void wrap_glGetImageTransformParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetImageTransformParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetImageTransformParameterfv;
static void wrap_glGetImageTransformParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetImageTransformParameterfv", "glGetImageTransformParameterfvHP", nullptr, nullptr, &pglGetImageTransformParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetImageTransformParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetImageTransformParameterfv)(target, pname, params);}
static void wrap_glGetImageTransformParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetImageTransformParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetImageTransformParameteriv;
static void wrap_glGetImageTransformParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetImageTransformParameteriv", "glGetImageTransformParameterivHP", nullptr, nullptr, &pglGetImageTransformParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetImageTransformParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetImageTransformParameteriv)(target, pname, params);}
static void wrap_glGetInfoLog(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
static void (APIENTRYP pglGetInfoLog)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) = wrap_glGetInfoLog;
static void wrap_glGetInfoLog(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) {return trampoline<void>("glGetInfoLog", "glGetInfoLogARB", nullptr, nullptr, &pglGetInfoLog, obj, maxLength, length, infoLog);}
extern "C" void APIENTRY glGetInfoLog(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) {return (*pglGetInfoLog)(obj, maxLength, length, infoLog);}
static GLint wrap_glGetInstruments(void);
static GLint (APIENTRYP pglGetInstruments)(void) = wrap_glGetInstruments;
static GLint wrap_glGetInstruments(void) {return trampoline<GLint>("glGetInstruments", "glGetInstrumentsSGIX", nullptr, nullptr, &pglGetInstruments);}
extern "C" GLint APIENTRY glGetInstruments(void) {return (*pglGetInstruments)();}
static void wrap_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
static void (APIENTRYP pglGetInteger64i_v)(GLenum target, GLuint index, GLint64 *data) = wrap_glGetInteger64i_v;
static void wrap_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {return trampoline<void>("glGetInteger64i_v", nullptr, nullptr, nullptr, &pglGetInteger64i_v, target, index, data);}
extern "C" void APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {return (*pglGetInteger64i_v)(target, index, data);}
static void wrap_glGetInteger64v(GLenum pname, GLint64 *data);
static void (APIENTRYP pglGetInteger64v)(GLenum pname, GLint64 *data) = wrap_glGetInteger64v;
static void wrap_glGetInteger64v(GLenum pname, GLint64 *data) {return trampoline<void>("glGetInteger64v", nullptr, nullptr, nullptr, &pglGetInteger64v, pname, data);}
extern "C" void APIENTRY glGetInteger64v(GLenum pname, GLint64 *data) {return (*pglGetInteger64v)(pname, data);}
static void wrap_glGetIntegerIndexedv(GLenum target, GLuint index, GLint *data);
static void (APIENTRYP pglGetIntegerIndexedv)(GLenum target, GLuint index, GLint *data) = wrap_glGetIntegerIndexedv;
static void wrap_glGetIntegerIndexedv(GLenum target, GLuint index, GLint *data) {return trampoline<void>("glGetIntegerIndexedv", "glGetIntegerIndexedvEXT", nullptr, nullptr, &pglGetIntegerIndexedv, target, index, data);}
extern "C" void APIENTRY glGetIntegerIndexedv(GLenum target, GLuint index, GLint *data) {return (*pglGetIntegerIndexedv)(target, index, data);}
static void wrap_glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
static void (APIENTRYP pglGetIntegeri_v)(GLenum target, GLuint index, GLint *data) = wrap_glGetIntegeri_v;
static void wrap_glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {return trampoline<void>("glGetIntegeri_v", nullptr, nullptr, nullptr, &pglGetIntegeri_v, target, index, data);}
extern "C" void APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {return (*pglGetIntegeri_v)(target, index, data);}
static void wrap_glGetIntegerui64i_v(GLenum value, GLuint index, GLuint64EXT *result);
static void (APIENTRYP pglGetIntegerui64i_v)(GLenum value, GLuint index, GLuint64EXT *result) = wrap_glGetIntegerui64i_v;
static void wrap_glGetIntegerui64i_v(GLenum value, GLuint index, GLuint64EXT *result) {return trampoline<void>("glGetIntegerui64i_v", "glGetIntegerui64i_vNV", nullptr, nullptr, &pglGetIntegerui64i_v, value, index, result);}
extern "C" void APIENTRY glGetIntegerui64i_v(GLenum value, GLuint index, GLuint64EXT *result) {return (*pglGetIntegerui64i_v)(value, index, result);}
static void wrap_glGetIntegerui64v(GLenum value, GLuint64EXT *result);
static void (APIENTRYP pglGetIntegerui64v)(GLenum value, GLuint64EXT *result) = wrap_glGetIntegerui64v;
static void wrap_glGetIntegerui64v(GLenum value, GLuint64EXT *result) {return trampoline<void>("glGetIntegerui64v", "glGetIntegerui64vNV", nullptr, nullptr, &pglGetIntegerui64v, value, result);}
extern "C" void APIENTRY glGetIntegerui64v(GLenum value, GLuint64EXT *result) {return (*pglGetIntegerui64v)(value, result);}
static void wrap_glGetIntegerv(GLenum pname, GLint *params);
static void (APIENTRYP pglGetIntegerv)(GLenum pname, GLint *params) = wrap_glGetIntegerv;
static void wrap_glGetIntegerv(GLenum pname, GLint *params) {return trampoline<void>("glGetIntegerv", nullptr, nullptr, nullptr, &pglGetIntegerv, pname, params);}
extern "C" void APIENTRY glGetIntegerv(GLenum pname, GLint *params) {return (*pglGetIntegerv)(pname, params);}
static void wrap_glGetInternalformatSampleiv(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
static void (APIENTRYP pglGetInternalformatSampleiv)(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) = wrap_glGetInternalformatSampleiv;
static void wrap_glGetInternalformatSampleiv(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) {return trampoline<void>("glGetInternalformatSampleiv", "glGetInternalformatSampleivNV", nullptr, nullptr, &pglGetInternalformatSampleiv, target, internalformat, samples, pname, bufSize, params);}
extern "C" void APIENTRY glGetInternalformatSampleiv(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) {return (*pglGetInternalformatSampleiv)(target, internalformat, samples, pname, bufSize, params);}
static void wrap_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
static void (APIENTRYP pglGetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) = wrap_glGetInternalformati64v;
static void wrap_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {return trampoline<void>("glGetInternalformati64v", nullptr, nullptr, nullptr, &pglGetInternalformati64v, target, internalformat, pname, bufSize, params);}
extern "C" void APIENTRY glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {return (*pglGetInternalformati64v)(target, internalformat, pname, bufSize, params);}
static void wrap_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
static void (APIENTRYP pglGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) = wrap_glGetInternalformativ;
static void wrap_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {return trampoline<void>("glGetInternalformativ", nullptr, nullptr, nullptr, &pglGetInternalformativ, target, internalformat, pname, bufSize, params);}
extern "C" void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {return (*pglGetInternalformativ)(target, internalformat, pname, bufSize, params);}
static void wrap_glGetInvariantBooleanv(GLuint id, GLenum value, GLboolean *data);
static void (APIENTRYP pglGetInvariantBooleanv)(GLuint id, GLenum value, GLboolean *data) = wrap_glGetInvariantBooleanv;
static void wrap_glGetInvariantBooleanv(GLuint id, GLenum value, GLboolean *data) {return trampoline<void>("glGetInvariantBooleanv", "glGetInvariantBooleanvEXT", nullptr, nullptr, &pglGetInvariantBooleanv, id, value, data);}
extern "C" void APIENTRY glGetInvariantBooleanv(GLuint id, GLenum value, GLboolean *data) {return (*pglGetInvariantBooleanv)(id, value, data);}
static void wrap_glGetInvariantFloatv(GLuint id, GLenum value, GLfloat *data);
static void (APIENTRYP pglGetInvariantFloatv)(GLuint id, GLenum value, GLfloat *data) = wrap_glGetInvariantFloatv;
static void wrap_glGetInvariantFloatv(GLuint id, GLenum value, GLfloat *data) {return trampoline<void>("glGetInvariantFloatv", "glGetInvariantFloatvEXT", nullptr, nullptr, &pglGetInvariantFloatv, id, value, data);}
extern "C" void APIENTRY glGetInvariantFloatv(GLuint id, GLenum value, GLfloat *data) {return (*pglGetInvariantFloatv)(id, value, data);}
static void wrap_glGetInvariantIntegerv(GLuint id, GLenum value, GLint *data);
static void (APIENTRYP pglGetInvariantIntegerv)(GLuint id, GLenum value, GLint *data) = wrap_glGetInvariantIntegerv;
static void wrap_glGetInvariantIntegerv(GLuint id, GLenum value, GLint *data) {return trampoline<void>("glGetInvariantIntegerv", "glGetInvariantIntegervEXT", nullptr, nullptr, &pglGetInvariantIntegerv, id, value, data);}
extern "C" void APIENTRY glGetInvariantIntegerv(GLuint id, GLenum value, GLint *data) {return (*pglGetInvariantIntegerv)(id, value, data);}
static void wrap_glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetLightfv)(GLenum light, GLenum pname, GLfloat *params) = wrap_glGetLightfv;
static void wrap_glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {return trampoline<void>("glGetLightfv", nullptr, nullptr, nullptr, &pglGetLightfv, light, pname, params);}
extern "C" void APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {return (*pglGetLightfv)(light, pname, params);}
static void wrap_glGetLightiv(GLenum light, GLenum pname, GLint *params);
static void (APIENTRYP pglGetLightiv)(GLenum light, GLenum pname, GLint *params) = wrap_glGetLightiv;
static void wrap_glGetLightiv(GLenum light, GLenum pname, GLint *params) {return trampoline<void>("glGetLightiv", nullptr, nullptr, nullptr, &pglGetLightiv, light, pname, params);}
extern "C" void APIENTRY glGetLightiv(GLenum light, GLenum pname, GLint *params) {return (*pglGetLightiv)(light, pname, params);}
static void wrap_glGetLightx(GLenum light, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetLightx)(GLenum light, GLenum pname, GLfixed *params) = wrap_glGetLightx;
static void wrap_glGetLightx(GLenum light, GLenum pname, GLfixed *params) {return trampoline<void>("glGetLightx", "glGetLightxOES", nullptr, nullptr, &pglGetLightx, light, pname, params);}
extern "C" void APIENTRY glGetLightx(GLenum light, GLenum pname, GLfixed *params) {return (*pglGetLightx)(light, pname, params);}
static void wrap_glGetListParameterfv(GLuint list, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetListParameterfv)(GLuint list, GLenum pname, GLfloat *params) = wrap_glGetListParameterfv;
static void wrap_glGetListParameterfv(GLuint list, GLenum pname, GLfloat *params) {return trampoline<void>("glGetListParameterfv", "glGetListParameterfvSGIX", nullptr, nullptr, &pglGetListParameterfv, list, pname, params);}
extern "C" void APIENTRY glGetListParameterfv(GLuint list, GLenum pname, GLfloat *params) {return (*pglGetListParameterfv)(list, pname, params);}
static void wrap_glGetListParameteriv(GLuint list, GLenum pname, GLint *params);
static void (APIENTRYP pglGetListParameteriv)(GLuint list, GLenum pname, GLint *params) = wrap_glGetListParameteriv;
static void wrap_glGetListParameteriv(GLuint list, GLenum pname, GLint *params) {return trampoline<void>("glGetListParameteriv", "glGetListParameterivSGIX", nullptr, nullptr, &pglGetListParameteriv, list, pname, params);}
extern "C" void APIENTRY glGetListParameteriv(GLuint list, GLenum pname, GLint *params) {return (*pglGetListParameteriv)(list, pname, params);}
static void wrap_glGetLocalConstantBooleanv(GLuint id, GLenum value, GLboolean *data);
static void (APIENTRYP pglGetLocalConstantBooleanv)(GLuint id, GLenum value, GLboolean *data) = wrap_glGetLocalConstantBooleanv;
static void wrap_glGetLocalConstantBooleanv(GLuint id, GLenum value, GLboolean *data) {return trampoline<void>("glGetLocalConstantBooleanv", "glGetLocalConstantBooleanvEXT", nullptr, nullptr, &pglGetLocalConstantBooleanv, id, value, data);}
extern "C" void APIENTRY glGetLocalConstantBooleanv(GLuint id, GLenum value, GLboolean *data) {return (*pglGetLocalConstantBooleanv)(id, value, data);}
static void wrap_glGetLocalConstantFloatv(GLuint id, GLenum value, GLfloat *data);
static void (APIENTRYP pglGetLocalConstantFloatv)(GLuint id, GLenum value, GLfloat *data) = wrap_glGetLocalConstantFloatv;
static void wrap_glGetLocalConstantFloatv(GLuint id, GLenum value, GLfloat *data) {return trampoline<void>("glGetLocalConstantFloatv", "glGetLocalConstantFloatvEXT", nullptr, nullptr, &pglGetLocalConstantFloatv, id, value, data);}
extern "C" void APIENTRY glGetLocalConstantFloatv(GLuint id, GLenum value, GLfloat *data) {return (*pglGetLocalConstantFloatv)(id, value, data);}
static void wrap_glGetLocalConstantIntegerv(GLuint id, GLenum value, GLint *data);
static void (APIENTRYP pglGetLocalConstantIntegerv)(GLuint id, GLenum value, GLint *data) = wrap_glGetLocalConstantIntegerv;
static void wrap_glGetLocalConstantIntegerv(GLuint id, GLenum value, GLint *data) {return trampoline<void>("glGetLocalConstantIntegerv", "glGetLocalConstantIntegervEXT", nullptr, nullptr, &pglGetLocalConstantIntegerv, id, value, data);}
extern "C" void APIENTRY glGetLocalConstantIntegerv(GLuint id, GLenum value, GLint *data) {return (*pglGetLocalConstantIntegerv)(id, value, data);}
static void wrap_glGetMapAttribParameterfv(GLenum target, GLuint index, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMapAttribParameterfv)(GLenum target, GLuint index, GLenum pname, GLfloat *params) = wrap_glGetMapAttribParameterfv;
static void wrap_glGetMapAttribParameterfv(GLenum target, GLuint index, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMapAttribParameterfv", "glGetMapAttribParameterfvNV", nullptr, nullptr, &pglGetMapAttribParameterfv, target, index, pname, params);}
extern "C" void APIENTRY glGetMapAttribParameterfv(GLenum target, GLuint index, GLenum pname, GLfloat *params) {return (*pglGetMapAttribParameterfv)(target, index, pname, params);}
static void wrap_glGetMapAttribParameteriv(GLenum target, GLuint index, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMapAttribParameteriv)(GLenum target, GLuint index, GLenum pname, GLint *params) = wrap_glGetMapAttribParameteriv;
static void wrap_glGetMapAttribParameteriv(GLenum target, GLuint index, GLenum pname, GLint *params) {return trampoline<void>("glGetMapAttribParameteriv", "glGetMapAttribParameterivNV", nullptr, nullptr, &pglGetMapAttribParameteriv, target, index, pname, params);}
extern "C" void APIENTRY glGetMapAttribParameteriv(GLenum target, GLuint index, GLenum pname, GLint *params) {return (*pglGetMapAttribParameteriv)(target, index, pname, params);}
static void wrap_glGetMapControlPoints(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
static void (APIENTRYP pglGetMapControlPoints)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) = wrap_glGetMapControlPoints;
static void wrap_glGetMapControlPoints(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) {return trampoline<void>("glGetMapControlPoints", "glGetMapControlPointsNV", nullptr, nullptr, &pglGetMapControlPoints, target, index, type, ustride, vstride, packed, points);}
extern "C" void APIENTRY glGetMapControlPoints(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) {return (*pglGetMapControlPoints)(target, index, type, ustride, vstride, packed, points);}
static void wrap_glGetMapParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMapParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetMapParameterfv;
static void wrap_glGetMapParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMapParameterfv", "glGetMapParameterfvNV", nullptr, nullptr, &pglGetMapParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetMapParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetMapParameterfv)(target, pname, params);}
static void wrap_glGetMapParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMapParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetMapParameteriv;
static void wrap_glGetMapParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetMapParameteriv", "glGetMapParameterivNV", nullptr, nullptr, &pglGetMapParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetMapParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetMapParameteriv)(target, pname, params);}
static void wrap_glGetMapdv(GLenum target, GLenum query, GLdouble *v);
static void (APIENTRYP pglGetMapdv)(GLenum target, GLenum query, GLdouble *v) = wrap_glGetMapdv;
static void wrap_glGetMapdv(GLenum target, GLenum query, GLdouble *v) {return trampoline<void>("glGetMapdv", nullptr, nullptr, nullptr, &pglGetMapdv, target, query, v);}
extern "C" void APIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble *v) {return (*pglGetMapdv)(target, query, v);}
static void wrap_glGetMapfv(GLenum target, GLenum query, GLfloat *v);
static void (APIENTRYP pglGetMapfv)(GLenum target, GLenum query, GLfloat *v) = wrap_glGetMapfv;
static void wrap_glGetMapfv(GLenum target, GLenum query, GLfloat *v) {return trampoline<void>("glGetMapfv", nullptr, nullptr, nullptr, &pglGetMapfv, target, query, v);}
extern "C" void APIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat *v) {return (*pglGetMapfv)(target, query, v);}
static void wrap_glGetMapiv(GLenum target, GLenum query, GLint *v);
static void (APIENTRYP pglGetMapiv)(GLenum target, GLenum query, GLint *v) = wrap_glGetMapiv;
static void wrap_glGetMapiv(GLenum target, GLenum query, GLint *v) {return trampoline<void>("glGetMapiv", nullptr, nullptr, nullptr, &pglGetMapiv, target, query, v);}
extern "C" void APIENTRY glGetMapiv(GLenum target, GLenum query, GLint *v) {return (*pglGetMapiv)(target, query, v);}
static void wrap_glGetMapxv(GLenum target, GLenum query, GLfixed *v);
static void (APIENTRYP pglGetMapxv)(GLenum target, GLenum query, GLfixed *v) = wrap_glGetMapxv;
static void wrap_glGetMapxv(GLenum target, GLenum query, GLfixed *v) {return trampoline<void>("glGetMapxv", "glGetMapxvOES", nullptr, nullptr, &pglGetMapxv, target, query, v);}
extern "C" void APIENTRY glGetMapxv(GLenum target, GLenum query, GLfixed *v) {return (*pglGetMapxv)(target, query, v);}
static void wrap_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMaterialfv)(GLenum face, GLenum pname, GLfloat *params) = wrap_glGetMaterialfv;
static void wrap_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMaterialfv", nullptr, nullptr, nullptr, &pglGetMaterialfv, face, pname, params);}
extern "C" void APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {return (*pglGetMaterialfv)(face, pname, params);}
static void wrap_glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMaterialiv)(GLenum face, GLenum pname, GLint *params) = wrap_glGetMaterialiv;
static void wrap_glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {return trampoline<void>("glGetMaterialiv", nullptr, nullptr, nullptr, &pglGetMaterialiv, face, pname, params);}
extern "C" void APIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {return (*pglGetMaterialiv)(face, pname, params);}
static void wrap_glGetMaterialx(GLenum face, GLenum pname, GLfixed param);
static void (APIENTRYP pglGetMaterialx)(GLenum face, GLenum pname, GLfixed param) = wrap_glGetMaterialx;
static void wrap_glGetMaterialx(GLenum face, GLenum pname, GLfixed param) {return trampoline<void>("glGetMaterialx", "glGetMaterialxOES", nullptr, nullptr, &pglGetMaterialx, face, pname, param);}
extern "C" void APIENTRY glGetMaterialx(GLenum face, GLenum pname, GLfixed param) {return (*pglGetMaterialx)(face, pname, param);}
static void wrap_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values);
static void (APIENTRYP pglGetMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values) = wrap_glGetMinmax;
static void wrap_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values) {return trampoline<void>("glGetMinmax", "glGetMinmaxEXT", nullptr, nullptr, &pglGetMinmax, target, reset, format, types, values);}
extern "C" void APIENTRY glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values) {return (*pglGetMinmax)(target, reset, format, types, values);}
static void wrap_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMinmaxParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetMinmaxParameterfv;
static void wrap_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMinmaxParameterfv", "glGetMinmaxParameterfvEXT", nullptr, nullptr, &pglGetMinmaxParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetMinmaxParameterfv)(target, pname, params);}
static void wrap_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMinmaxParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetMinmaxParameteriv;
static void wrap_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetMinmaxParameteriv", "glGetMinmaxParameterivEXT", nullptr, nullptr, &pglGetMinmaxParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetMinmaxParameteriv)(target, pname, params);}
static void wrap_glGetMultiTexEnvfv(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMultiTexEnvfv)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) = wrap_glGetMultiTexEnvfv;
static void wrap_glGetMultiTexEnvfv(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMultiTexEnvfv", "glGetMultiTexEnvfvEXT", nullptr, nullptr, &pglGetMultiTexEnvfv, texunit, target, pname, params);}
extern "C" void APIENTRY glGetMultiTexEnvfv(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {return (*pglGetMultiTexEnvfv)(texunit, target, pname, params);}
static void wrap_glGetMultiTexEnviv(GLenum texunit, GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMultiTexEnviv)(GLenum texunit, GLenum target, GLenum pname, GLint *params) = wrap_glGetMultiTexEnviv;
static void wrap_glGetMultiTexEnviv(GLenum texunit, GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetMultiTexEnviv", "glGetMultiTexEnvivEXT", nullptr, nullptr, &pglGetMultiTexEnviv, texunit, target, pname, params);}
extern "C" void APIENTRY glGetMultiTexEnviv(GLenum texunit, GLenum target, GLenum pname, GLint *params) {return (*pglGetMultiTexEnviv)(texunit, target, pname, params);}
static void wrap_glGetMultiTexGendv(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetMultiTexGendv)(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) = wrap_glGetMultiTexGendv;
static void wrap_glGetMultiTexGendv(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {return trampoline<void>("glGetMultiTexGendv", "glGetMultiTexGendvEXT", nullptr, nullptr, &pglGetMultiTexGendv, texunit, coord, pname, params);}
extern "C" void APIENTRY glGetMultiTexGendv(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {return (*pglGetMultiTexGendv)(texunit, coord, pname, params);}
static void wrap_glGetMultiTexGenfv(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMultiTexGenfv)(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) = wrap_glGetMultiTexGenfv;
static void wrap_glGetMultiTexGenfv(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMultiTexGenfv", "glGetMultiTexGenfvEXT", nullptr, nullptr, &pglGetMultiTexGenfv, texunit, coord, pname, params);}
extern "C" void APIENTRY glGetMultiTexGenfv(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {return (*pglGetMultiTexGenfv)(texunit, coord, pname, params);}
static void wrap_glGetMultiTexGeniv(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMultiTexGeniv)(GLenum texunit, GLenum coord, GLenum pname, GLint *params) = wrap_glGetMultiTexGeniv;
static void wrap_glGetMultiTexGeniv(GLenum texunit, GLenum coord, GLenum pname, GLint *params) {return trampoline<void>("glGetMultiTexGeniv", "glGetMultiTexGenivEXT", nullptr, nullptr, &pglGetMultiTexGeniv, texunit, coord, pname, params);}
extern "C" void APIENTRY glGetMultiTexGeniv(GLenum texunit, GLenum coord, GLenum pname, GLint *params) {return (*pglGetMultiTexGeniv)(texunit, coord, pname, params);}
static void wrap_glGetMultiTexImage(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
static void (APIENTRYP pglGetMultiTexImage)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) = wrap_glGetMultiTexImage;
static void wrap_glGetMultiTexImage(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {return trampoline<void>("glGetMultiTexImage", "glGetMultiTexImageEXT", nullptr, nullptr, &pglGetMultiTexImage, texunit, target, level, format, type, pixels);}
extern "C" void APIENTRY glGetMultiTexImage(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {return (*pglGetMultiTexImage)(texunit, target, level, format, type, pixels);}
static void wrap_glGetMultiTexLevelParameterfv(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMultiTexLevelParameterfv)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) = wrap_glGetMultiTexLevelParameterfv;
static void wrap_glGetMultiTexLevelParameterfv(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMultiTexLevelParameterfv", "glGetMultiTexLevelParameterfvEXT", nullptr, nullptr, &pglGetMultiTexLevelParameterfv, texunit, target, level, pname, params);}
extern "C" void APIENTRY glGetMultiTexLevelParameterfv(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {return (*pglGetMultiTexLevelParameterfv)(texunit, target, level, pname, params);}
static void wrap_glGetMultiTexLevelParameteriv(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMultiTexLevelParameteriv)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) = wrap_glGetMultiTexLevelParameteriv;
static void wrap_glGetMultiTexLevelParameteriv(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {return trampoline<void>("glGetMultiTexLevelParameteriv", "glGetMultiTexLevelParameterivEXT", nullptr, nullptr, &pglGetMultiTexLevelParameteriv, texunit, target, level, pname, params);}
extern "C" void APIENTRY glGetMultiTexLevelParameteriv(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {return (*pglGetMultiTexLevelParameteriv)(texunit, target, level, pname, params);}
static void wrap_glGetMultiTexParameterIiv(GLenum texunit, GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMultiTexParameterIiv)(GLenum texunit, GLenum target, GLenum pname, GLint *params) = wrap_glGetMultiTexParameterIiv;
static void wrap_glGetMultiTexParameterIiv(GLenum texunit, GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetMultiTexParameterIiv", "glGetMultiTexParameterIivEXT", nullptr, nullptr, &pglGetMultiTexParameterIiv, texunit, target, pname, params);}
extern "C" void APIENTRY glGetMultiTexParameterIiv(GLenum texunit, GLenum target, GLenum pname, GLint *params) {return (*pglGetMultiTexParameterIiv)(texunit, target, pname, params);}
static void wrap_glGetMultiTexParameterIuiv(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetMultiTexParameterIuiv)(GLenum texunit, GLenum target, GLenum pname, GLuint *params) = wrap_glGetMultiTexParameterIuiv;
static void wrap_glGetMultiTexParameterIuiv(GLenum texunit, GLenum target, GLenum pname, GLuint *params) {return trampoline<void>("glGetMultiTexParameterIuiv", "glGetMultiTexParameterIuivEXT", nullptr, nullptr, &pglGetMultiTexParameterIuiv, texunit, target, pname, params);}
extern "C" void APIENTRY glGetMultiTexParameterIuiv(GLenum texunit, GLenum target, GLenum pname, GLuint *params) {return (*pglGetMultiTexParameterIuiv)(texunit, target, pname, params);}
static void wrap_glGetMultiTexParameterfv(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetMultiTexParameterfv)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) = wrap_glGetMultiTexParameterfv;
static void wrap_glGetMultiTexParameterfv(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetMultiTexParameterfv", "glGetMultiTexParameterfvEXT", nullptr, nullptr, &pglGetMultiTexParameterfv, texunit, target, pname, params);}
extern "C" void APIENTRY glGetMultiTexParameterfv(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {return (*pglGetMultiTexParameterfv)(texunit, target, pname, params);}
static void wrap_glGetMultiTexParameteriv(GLenum texunit, GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetMultiTexParameteriv)(GLenum texunit, GLenum target, GLenum pname, GLint *params) = wrap_glGetMultiTexParameteriv;
static void wrap_glGetMultiTexParameteriv(GLenum texunit, GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetMultiTexParameteriv", "glGetMultiTexParameterivEXT", nullptr, nullptr, &pglGetMultiTexParameteriv, texunit, target, pname, params);}
extern "C" void APIENTRY glGetMultiTexParameteriv(GLenum texunit, GLenum target, GLenum pname, GLint *params) {return (*pglGetMultiTexParameteriv)(texunit, target, pname, params);}
static void wrap_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
static void (APIENTRYP pglGetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val) = wrap_glGetMultisamplefv;
static void wrap_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {return trampoline<void>("glGetMultisamplefv", "glGetMultisamplefvNV", nullptr, nullptr, &pglGetMultisamplefv, pname, index, val);}
extern "C" void APIENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {return (*pglGetMultisamplefv)(pname, index, val);}
static void wrap_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
static void (APIENTRYP pglGetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64 *params) = wrap_glGetNamedBufferParameteri64v;
static void wrap_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {return trampoline<void>("glGetNamedBufferParameteri64v", nullptr, nullptr, nullptr, &pglGetNamedBufferParameteri64v, buffer, pname, params);}
extern "C" void APIENTRY glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {return (*pglGetNamedBufferParameteri64v)(buffer, pname, params);}
static void wrap_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
static void (APIENTRYP pglGetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint *params) = wrap_glGetNamedBufferParameteriv;
static void wrap_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {return trampoline<void>("glGetNamedBufferParameteriv", "glGetNamedBufferParameterivEXT", nullptr, nullptr, &pglGetNamedBufferParameteriv, buffer, pname, params);}
extern "C" void APIENTRY glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {return (*pglGetNamedBufferParameteriv)(buffer, pname, params);}
static void wrap_glGetNamedBufferParameterui64v(GLuint buffer, GLenum pname, GLuint64EXT *params);
static void (APIENTRYP pglGetNamedBufferParameterui64v)(GLuint buffer, GLenum pname, GLuint64EXT *params) = wrap_glGetNamedBufferParameterui64v;
static void wrap_glGetNamedBufferParameterui64v(GLuint buffer, GLenum pname, GLuint64EXT *params) {return trampoline<void>("glGetNamedBufferParameterui64v", "glGetNamedBufferParameterui64vNV", nullptr, nullptr, &pglGetNamedBufferParameterui64v, buffer, pname, params);}
extern "C" void APIENTRY glGetNamedBufferParameterui64v(GLuint buffer, GLenum pname, GLuint64EXT *params) {return (*pglGetNamedBufferParameterui64v)(buffer, pname, params);}
static void wrap_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
static void (APIENTRYP pglGetNamedBufferPointerv)(GLuint buffer, GLenum pname, void **params) = wrap_glGetNamedBufferPointerv;
static void wrap_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {return trampoline<void>("glGetNamedBufferPointerv", "glGetNamedBufferPointervEXT", nullptr, nullptr, &pglGetNamedBufferPointerv, buffer, pname, params);}
extern "C" void APIENTRY glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {return (*pglGetNamedBufferPointerv)(buffer, pname, params);}
static void wrap_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
static void (APIENTRYP pglGetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) = wrap_glGetNamedBufferSubData;
static void wrap_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {return trampoline<void>("glGetNamedBufferSubData", "glGetNamedBufferSubDataEXT", nullptr, nullptr, &pglGetNamedBufferSubData, buffer, offset, size, data);}
extern "C" void APIENTRY glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {return (*pglGetNamedBufferSubData)(buffer, offset, size, data);}
static void wrap_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
static void (APIENTRYP pglGetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) = wrap_glGetNamedFramebufferAttachmentParameteriv;
static void wrap_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {return trampoline<void>("glGetNamedFramebufferAttachmentParameteriv", "glGetNamedFramebufferAttachmentParameterivEXT", nullptr, nullptr, &pglGetNamedFramebufferAttachmentParameteriv, framebuffer, attachment, pname, params);}
extern "C" void APIENTRY glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {return (*pglGetNamedFramebufferAttachmentParameteriv)(framebuffer, attachment, pname, params);}
static void wrap_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
static void (APIENTRYP pglGetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint *param) = wrap_glGetNamedFramebufferParameteriv;
static void wrap_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {return trampoline<void>("glGetNamedFramebufferParameteriv", "glGetNamedFramebufferParameterivEXT", nullptr, nullptr, &pglGetNamedFramebufferParameteriv, framebuffer, pname, param);}
extern "C" void APIENTRY glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {return (*pglGetNamedFramebufferParameteriv)(framebuffer, pname, param);}
static void wrap_glGetNamedProgramLocalParameterIiv(GLuint program, GLenum target, GLuint index, GLint *params);
static void (APIENTRYP pglGetNamedProgramLocalParameterIiv)(GLuint program, GLenum target, GLuint index, GLint *params) = wrap_glGetNamedProgramLocalParameterIiv;
static void wrap_glGetNamedProgramLocalParameterIiv(GLuint program, GLenum target, GLuint index, GLint *params) {return trampoline<void>("glGetNamedProgramLocalParameterIiv", "glGetNamedProgramLocalParameterIivEXT", nullptr, nullptr, &pglGetNamedProgramLocalParameterIiv, program, target, index, params);}
extern "C" void APIENTRY glGetNamedProgramLocalParameterIiv(GLuint program, GLenum target, GLuint index, GLint *params) {return (*pglGetNamedProgramLocalParameterIiv)(program, target, index, params);}
static void wrap_glGetNamedProgramLocalParameterIuiv(GLuint program, GLenum target, GLuint index, GLuint *params);
static void (APIENTRYP pglGetNamedProgramLocalParameterIuiv)(GLuint program, GLenum target, GLuint index, GLuint *params) = wrap_glGetNamedProgramLocalParameterIuiv;
static void wrap_glGetNamedProgramLocalParameterIuiv(GLuint program, GLenum target, GLuint index, GLuint *params) {return trampoline<void>("glGetNamedProgramLocalParameterIuiv", "glGetNamedProgramLocalParameterIuivEXT", nullptr, nullptr, &pglGetNamedProgramLocalParameterIuiv, program, target, index, params);}
extern "C" void APIENTRY glGetNamedProgramLocalParameterIuiv(GLuint program, GLenum target, GLuint index, GLuint *params) {return (*pglGetNamedProgramLocalParameterIuiv)(program, target, index, params);}
static void wrap_glGetNamedProgramLocalParameterdv(GLuint program, GLenum target, GLuint index, GLdouble *params);
static void (APIENTRYP pglGetNamedProgramLocalParameterdv)(GLuint program, GLenum target, GLuint index, GLdouble *params) = wrap_glGetNamedProgramLocalParameterdv;
static void wrap_glGetNamedProgramLocalParameterdv(GLuint program, GLenum target, GLuint index, GLdouble *params) {return trampoline<void>("glGetNamedProgramLocalParameterdv", "glGetNamedProgramLocalParameterdvEXT", nullptr, nullptr, &pglGetNamedProgramLocalParameterdv, program, target, index, params);}
extern "C" void APIENTRY glGetNamedProgramLocalParameterdv(GLuint program, GLenum target, GLuint index, GLdouble *params) {return (*pglGetNamedProgramLocalParameterdv)(program, target, index, params);}
static void wrap_glGetNamedProgramLocalParameterfv(GLuint program, GLenum target, GLuint index, GLfloat *params);
static void (APIENTRYP pglGetNamedProgramLocalParameterfv)(GLuint program, GLenum target, GLuint index, GLfloat *params) = wrap_glGetNamedProgramLocalParameterfv;
static void wrap_glGetNamedProgramLocalParameterfv(GLuint program, GLenum target, GLuint index, GLfloat *params) {return trampoline<void>("glGetNamedProgramLocalParameterfv", "glGetNamedProgramLocalParameterfvEXT", nullptr, nullptr, &pglGetNamedProgramLocalParameterfv, program, target, index, params);}
extern "C" void APIENTRY glGetNamedProgramLocalParameterfv(GLuint program, GLenum target, GLuint index, GLfloat *params) {return (*pglGetNamedProgramLocalParameterfv)(program, target, index, params);}
static void wrap_glGetNamedProgramString(GLuint program, GLenum target, GLenum pname, void *string);
static void (APIENTRYP pglGetNamedProgramString)(GLuint program, GLenum target, GLenum pname, void *string) = wrap_glGetNamedProgramString;
static void wrap_glGetNamedProgramString(GLuint program, GLenum target, GLenum pname, void *string) {return trampoline<void>("glGetNamedProgramString", "glGetNamedProgramStringEXT", nullptr, nullptr, &pglGetNamedProgramString, program, target, pname, string);}
extern "C" void APIENTRY glGetNamedProgramString(GLuint program, GLenum target, GLenum pname, void *string) {return (*pglGetNamedProgramString)(program, target, pname, string);}
static void wrap_glGetNamedProgramiv(GLuint program, GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetNamedProgramiv)(GLuint program, GLenum target, GLenum pname, GLint *params) = wrap_glGetNamedProgramiv;
static void wrap_glGetNamedProgramiv(GLuint program, GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetNamedProgramiv", "glGetNamedProgramivEXT", nullptr, nullptr, &pglGetNamedProgramiv, program, target, pname, params);}
extern "C" void APIENTRY glGetNamedProgramiv(GLuint program, GLenum target, GLenum pname, GLint *params) {return (*pglGetNamedProgramiv)(program, target, pname, params);}
static void wrap_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
static void (APIENTRYP pglGetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint *params) = wrap_glGetNamedRenderbufferParameteriv;
static void wrap_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {return trampoline<void>("glGetNamedRenderbufferParameteriv", "glGetNamedRenderbufferParameterivEXT", nullptr, nullptr, &pglGetNamedRenderbufferParameteriv, renderbuffer, pname, params);}
extern "C" void APIENTRY glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {return (*pglGetNamedRenderbufferParameteriv)(renderbuffer, pname, params);}
static void wrap_glGetNamedString(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
static void (APIENTRYP pglGetNamedString)(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) = wrap_glGetNamedString;
static void wrap_glGetNamedString(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) {return trampoline<void>("glGetNamedString", "glGetNamedStringARB", nullptr, nullptr, &pglGetNamedString, namelen, name, bufSize, stringlen, string);}
extern "C" void APIENTRY glGetNamedString(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) {return (*pglGetNamedString)(namelen, name, bufSize, stringlen, string);}
static void wrap_glGetNamedStringiv(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
static void (APIENTRYP pglGetNamedStringiv)(GLint namelen, const GLchar *name, GLenum pname, GLint *params) = wrap_glGetNamedStringiv;
static void wrap_glGetNamedStringiv(GLint namelen, const GLchar *name, GLenum pname, GLint *params) {return trampoline<void>("glGetNamedStringiv", "glGetNamedStringivARB", nullptr, nullptr, &pglGetNamedStringiv, namelen, name, pname, params);}
extern "C" void APIENTRY glGetNamedStringiv(GLint namelen, const GLchar *name, GLenum pname, GLint *params) {return (*pglGetNamedStringiv)(namelen, name, pname, params);}
static void wrap_glGetNextPerfQueryId(GLuint queryId, GLuint *nextQueryId);
static void (APIENTRYP pglGetNextPerfQueryId)(GLuint queryId, GLuint *nextQueryId) = wrap_glGetNextPerfQueryId;
static void wrap_glGetNextPerfQueryId(GLuint queryId, GLuint *nextQueryId) {return trampoline<void>("glGetNextPerfQueryId", "glGetNextPerfQueryIdINTEL", nullptr, nullptr, &pglGetNextPerfQueryId, queryId, nextQueryId);}
extern "C" void APIENTRY glGetNextPerfQueryId(GLuint queryId, GLuint *nextQueryId) {return (*pglGetNextPerfQueryId)(queryId, nextQueryId);}
static void wrap_glGetObjectBufferfv(GLuint buffer, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetObjectBufferfv)(GLuint buffer, GLenum pname, GLfloat *params) = wrap_glGetObjectBufferfv;
static void wrap_glGetObjectBufferfv(GLuint buffer, GLenum pname, GLfloat *params) {return trampoline<void>("glGetObjectBufferfv", "glGetObjectBufferfvATI", nullptr, nullptr, &pglGetObjectBufferfv, buffer, pname, params);}
extern "C" void APIENTRY glGetObjectBufferfv(GLuint buffer, GLenum pname, GLfloat *params) {return (*pglGetObjectBufferfv)(buffer, pname, params);}
static void wrap_glGetObjectBufferiv(GLuint buffer, GLenum pname, GLint *params);
static void (APIENTRYP pglGetObjectBufferiv)(GLuint buffer, GLenum pname, GLint *params) = wrap_glGetObjectBufferiv;
static void wrap_glGetObjectBufferiv(GLuint buffer, GLenum pname, GLint *params) {return trampoline<void>("glGetObjectBufferiv", "glGetObjectBufferivATI", nullptr, nullptr, &pglGetObjectBufferiv, buffer, pname, params);}
extern "C" void APIENTRY glGetObjectBufferiv(GLuint buffer, GLenum pname, GLint *params) {return (*pglGetObjectBufferiv)(buffer, pname, params);}
static void wrap_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
static void (APIENTRYP pglGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) = wrap_glGetObjectLabel;
static void wrap_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {return trampoline<void>("glGetObjectLabel", "glGetObjectLabelEXT", nullptr, nullptr, &pglGetObjectLabel, identifier, name, bufSize, length, label);}
extern "C" void APIENTRY glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {return (*pglGetObjectLabel)(identifier, name, bufSize, length, label);}
static void wrap_glGetObjectParameterfv(GLhandleARB obj, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetObjectParameterfv)(GLhandleARB obj, GLenum pname, GLfloat *params) = wrap_glGetObjectParameterfv;
static void wrap_glGetObjectParameterfv(GLhandleARB obj, GLenum pname, GLfloat *params) {return trampoline<void>("glGetObjectParameterfv", "glGetObjectParameterfvARB", nullptr, nullptr, &pglGetObjectParameterfv, obj, pname, params);}
extern "C" void APIENTRY glGetObjectParameterfv(GLhandleARB obj, GLenum pname, GLfloat *params) {return (*pglGetObjectParameterfv)(obj, pname, params);}
static void wrap_glGetObjectParameteriv(GLhandleARB obj, GLenum pname, GLint *params);
static void (APIENTRYP pglGetObjectParameteriv)(GLhandleARB obj, GLenum pname, GLint *params) = wrap_glGetObjectParameteriv;
static void wrap_glGetObjectParameteriv(GLhandleARB obj, GLenum pname, GLint *params) {return trampoline<void>("glGetObjectParameteriv", "glGetObjectParameterivARB", "glGetObjectParameterivAPPLE", nullptr, &pglGetObjectParameteriv, obj, pname, params);}
extern "C" void APIENTRY glGetObjectParameteriv(GLhandleARB obj, GLenum pname, GLint *params) {return (*pglGetObjectParameteriv)(obj, pname, params);}
static void wrap_glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
static void (APIENTRYP pglGetObjectPtrLabel)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) = wrap_glGetObjectPtrLabel;
static void wrap_glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {return trampoline<void>("glGetObjectPtrLabel", nullptr, nullptr, nullptr, &pglGetObjectPtrLabel, ptr, bufSize, length, label);}
extern "C" void APIENTRY glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {return (*pglGetObjectPtrLabel)(ptr, bufSize, length, label);}
static void wrap_glGetOcclusionQueryiv(GLuint id, GLenum pname, GLint *params);
static void (APIENTRYP pglGetOcclusionQueryiv)(GLuint id, GLenum pname, GLint *params) = wrap_glGetOcclusionQueryiv;
static void wrap_glGetOcclusionQueryiv(GLuint id, GLenum pname, GLint *params) {return trampoline<void>("glGetOcclusionQueryiv", "glGetOcclusionQueryivNV", nullptr, nullptr, &pglGetOcclusionQueryiv, id, pname, params);}
extern "C" void APIENTRY glGetOcclusionQueryiv(GLuint id, GLenum pname, GLint *params) {return (*pglGetOcclusionQueryiv)(id, pname, params);}
static void wrap_glGetOcclusionQueryuiv(GLuint id, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetOcclusionQueryuiv)(GLuint id, GLenum pname, GLuint *params) = wrap_glGetOcclusionQueryuiv;
static void wrap_glGetOcclusionQueryuiv(GLuint id, GLenum pname, GLuint *params) {return trampoline<void>("glGetOcclusionQueryuiv", "glGetOcclusionQueryuivNV", nullptr, nullptr, &pglGetOcclusionQueryuiv, id, pname, params);}
extern "C" void APIENTRY glGetOcclusionQueryuiv(GLuint id, GLenum pname, GLuint *params) {return (*pglGetOcclusionQueryuiv)(id, pname, params);}
static void wrap_glGetPathColorGenfv(GLenum color, GLenum pname, GLfloat *value);
static void (APIENTRYP pglGetPathColorGenfv)(GLenum color, GLenum pname, GLfloat *value) = wrap_glGetPathColorGenfv;
static void wrap_glGetPathColorGenfv(GLenum color, GLenum pname, GLfloat *value) {return trampoline<void>("glGetPathColorGenfv", "glGetPathColorGenfvNV", nullptr, nullptr, &pglGetPathColorGenfv, color, pname, value);}
extern "C" void APIENTRY glGetPathColorGenfv(GLenum color, GLenum pname, GLfloat *value) {return (*pglGetPathColorGenfv)(color, pname, value);}
static void wrap_glGetPathColorGeniv(GLenum color, GLenum pname, GLint *value);
static void (APIENTRYP pglGetPathColorGeniv)(GLenum color, GLenum pname, GLint *value) = wrap_glGetPathColorGeniv;
static void wrap_glGetPathColorGeniv(GLenum color, GLenum pname, GLint *value) {return trampoline<void>("glGetPathColorGeniv", "glGetPathColorGenivNV", nullptr, nullptr, &pglGetPathColorGeniv, color, pname, value);}
extern "C" void APIENTRY glGetPathColorGeniv(GLenum color, GLenum pname, GLint *value) {return (*pglGetPathColorGeniv)(color, pname, value);}
static void wrap_glGetPathCommands(GLuint path, GLubyte *commands);
static void (APIENTRYP pglGetPathCommands)(GLuint path, GLubyte *commands) = wrap_glGetPathCommands;
static void wrap_glGetPathCommands(GLuint path, GLubyte *commands) {return trampoline<void>("glGetPathCommands", "glGetPathCommandsNV", nullptr, nullptr, &pglGetPathCommands, path, commands);}
extern "C" void APIENTRY glGetPathCommands(GLuint path, GLubyte *commands) {return (*pglGetPathCommands)(path, commands);}
static void wrap_glGetPathCoords(GLuint path, GLfloat *coords);
static void (APIENTRYP pglGetPathCoords)(GLuint path, GLfloat *coords) = wrap_glGetPathCoords;
static void wrap_glGetPathCoords(GLuint path, GLfloat *coords) {return trampoline<void>("glGetPathCoords", "glGetPathCoordsNV", nullptr, nullptr, &pglGetPathCoords, path, coords);}
extern "C" void APIENTRY glGetPathCoords(GLuint path, GLfloat *coords) {return (*pglGetPathCoords)(path, coords);}
static void wrap_glGetPathDashArray(GLuint path, GLfloat *dashArray);
static void (APIENTRYP pglGetPathDashArray)(GLuint path, GLfloat *dashArray) = wrap_glGetPathDashArray;
static void wrap_glGetPathDashArray(GLuint path, GLfloat *dashArray) {return trampoline<void>("glGetPathDashArray", "glGetPathDashArrayNV", nullptr, nullptr, &pglGetPathDashArray, path, dashArray);}
extern "C" void APIENTRY glGetPathDashArray(GLuint path, GLfloat *dashArray) {return (*pglGetPathDashArray)(path, dashArray);}
static GLfloat wrap_glGetPathLength(GLuint path, GLsizei startSegment, GLsizei numSegments);
static GLfloat (APIENTRYP pglGetPathLength)(GLuint path, GLsizei startSegment, GLsizei numSegments) = wrap_glGetPathLength;
static GLfloat wrap_glGetPathLength(GLuint path, GLsizei startSegment, GLsizei numSegments) {return trampoline<GLfloat>("glGetPathLength", "glGetPathLengthNV", nullptr, nullptr, &pglGetPathLength, path, startSegment, numSegments);}
extern "C" GLfloat APIENTRY glGetPathLength(GLuint path, GLsizei startSegment, GLsizei numSegments) {return (*pglGetPathLength)(path, startSegment, numSegments);}
static void wrap_glGetPathMetricRange(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
static void (APIENTRYP pglGetPathMetricRange)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) = wrap_glGetPathMetricRange;
static void wrap_glGetPathMetricRange(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {return trampoline<void>("glGetPathMetricRange", "glGetPathMetricRangeNV", nullptr, nullptr, &pglGetPathMetricRange, metricQueryMask, firstPathName, numPaths, stride, metrics);}
extern "C" void APIENTRY glGetPathMetricRange(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {return (*pglGetPathMetricRange)(metricQueryMask, firstPathName, numPaths, stride, metrics);}
static void wrap_glGetPathMetrics(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
static void (APIENTRYP pglGetPathMetrics)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) = wrap_glGetPathMetrics;
static void wrap_glGetPathMetrics(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {return trampoline<void>("glGetPathMetrics", "glGetPathMetricsNV", nullptr, nullptr, &pglGetPathMetrics, metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);}
extern "C" void APIENTRY glGetPathMetrics(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {return (*pglGetPathMetrics)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);}
static void wrap_glGetPathParameterfv(GLuint path, GLenum pname, GLfloat *value);
static void (APIENTRYP pglGetPathParameterfv)(GLuint path, GLenum pname, GLfloat *value) = wrap_glGetPathParameterfv;
static void wrap_glGetPathParameterfv(GLuint path, GLenum pname, GLfloat *value) {return trampoline<void>("glGetPathParameterfv", "glGetPathParameterfvNV", nullptr, nullptr, &pglGetPathParameterfv, path, pname, value);}
extern "C" void APIENTRY glGetPathParameterfv(GLuint path, GLenum pname, GLfloat *value) {return (*pglGetPathParameterfv)(path, pname, value);}
static void wrap_glGetPathParameteriv(GLuint path, GLenum pname, GLint *value);
static void (APIENTRYP pglGetPathParameteriv)(GLuint path, GLenum pname, GLint *value) = wrap_glGetPathParameteriv;
static void wrap_glGetPathParameteriv(GLuint path, GLenum pname, GLint *value) {return trampoline<void>("glGetPathParameteriv", "glGetPathParameterivNV", nullptr, nullptr, &pglGetPathParameteriv, path, pname, value);}
extern "C" void APIENTRY glGetPathParameteriv(GLuint path, GLenum pname, GLint *value) {return (*pglGetPathParameteriv)(path, pname, value);}
static void wrap_glGetPathSpacing(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
static void (APIENTRYP pglGetPathSpacing)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) = wrap_glGetPathSpacing;
static void wrap_glGetPathSpacing(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {return trampoline<void>("glGetPathSpacing", "glGetPathSpacingNV", nullptr, nullptr, &pglGetPathSpacing, pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);}
extern "C" void APIENTRY glGetPathSpacing(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {return (*pglGetPathSpacing)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);}
static void wrap_glGetPathTexGenfv(GLenum texCoordSet, GLenum pname, GLfloat *value);
static void (APIENTRYP pglGetPathTexGenfv)(GLenum texCoordSet, GLenum pname, GLfloat *value) = wrap_glGetPathTexGenfv;
static void wrap_glGetPathTexGenfv(GLenum texCoordSet, GLenum pname, GLfloat *value) {return trampoline<void>("glGetPathTexGenfv", "glGetPathTexGenfvNV", nullptr, nullptr, &pglGetPathTexGenfv, texCoordSet, pname, value);}
extern "C" void APIENTRY glGetPathTexGenfv(GLenum texCoordSet, GLenum pname, GLfloat *value) {return (*pglGetPathTexGenfv)(texCoordSet, pname, value);}
static void wrap_glGetPathTexGeniv(GLenum texCoordSet, GLenum pname, GLint *value);
static void (APIENTRYP pglGetPathTexGeniv)(GLenum texCoordSet, GLenum pname, GLint *value) = wrap_glGetPathTexGeniv;
static void wrap_glGetPathTexGeniv(GLenum texCoordSet, GLenum pname, GLint *value) {return trampoline<void>("glGetPathTexGeniv", "glGetPathTexGenivNV", nullptr, nullptr, &pglGetPathTexGeniv, texCoordSet, pname, value);}
extern "C" void APIENTRY glGetPathTexGeniv(GLenum texCoordSet, GLenum pname, GLint *value) {return (*pglGetPathTexGeniv)(texCoordSet, pname, value);}
static void wrap_glGetPerfCounterInfo(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
static void (APIENTRYP pglGetPerfCounterInfo)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) = wrap_glGetPerfCounterInfo;
static void wrap_glGetPerfCounterInfo(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) {return trampoline<void>("glGetPerfCounterInfo", "glGetPerfCounterInfoINTEL", nullptr, nullptr, &pglGetPerfCounterInfo, queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);}
extern "C" void APIENTRY glGetPerfCounterInfo(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) {return (*pglGetPerfCounterInfo)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);}
static void wrap_glGetPerfMonitorCounterData(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
static void (APIENTRYP pglGetPerfMonitorCounterData)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) = wrap_glGetPerfMonitorCounterData;
static void wrap_glGetPerfMonitorCounterData(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {return trampoline<void>("glGetPerfMonitorCounterData", "glGetPerfMonitorCounterDataAMD", nullptr, nullptr, &pglGetPerfMonitorCounterData, monitor, pname, dataSize, data, bytesWritten);}
extern "C" void APIENTRY glGetPerfMonitorCounterData(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {return (*pglGetPerfMonitorCounterData)(monitor, pname, dataSize, data, bytesWritten);}
static void wrap_glGetPerfMonitorCounterInfo(GLuint group, GLuint counter, GLenum pname, void *data);
static void (APIENTRYP pglGetPerfMonitorCounterInfo)(GLuint group, GLuint counter, GLenum pname, void *data) = wrap_glGetPerfMonitorCounterInfo;
static void wrap_glGetPerfMonitorCounterInfo(GLuint group, GLuint counter, GLenum pname, void *data) {return trampoline<void>("glGetPerfMonitorCounterInfo", "glGetPerfMonitorCounterInfoAMD", nullptr, nullptr, &pglGetPerfMonitorCounterInfo, group, counter, pname, data);}
extern "C" void APIENTRY glGetPerfMonitorCounterInfo(GLuint group, GLuint counter, GLenum pname, void *data) {return (*pglGetPerfMonitorCounterInfo)(group, counter, pname, data);}
static void wrap_glGetPerfMonitorCounterString(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
static void (APIENTRYP pglGetPerfMonitorCounterString)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) = wrap_glGetPerfMonitorCounterString;
static void wrap_glGetPerfMonitorCounterString(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {return trampoline<void>("glGetPerfMonitorCounterString", "glGetPerfMonitorCounterStringAMD", nullptr, nullptr, &pglGetPerfMonitorCounterString, group, counter, bufSize, length, counterString);}
extern "C" void APIENTRY glGetPerfMonitorCounterString(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {return (*pglGetPerfMonitorCounterString)(group, counter, bufSize, length, counterString);}
static void wrap_glGetPerfMonitorCounters(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
static void (APIENTRYP pglGetPerfMonitorCounters)(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) = wrap_glGetPerfMonitorCounters;
static void wrap_glGetPerfMonitorCounters(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) {return trampoline<void>("glGetPerfMonitorCounters", "glGetPerfMonitorCountersAMD", nullptr, nullptr, &pglGetPerfMonitorCounters, group, numCounters, maxActiveCounters, counterSize, counters);}
extern "C" void APIENTRY glGetPerfMonitorCounters(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) {return (*pglGetPerfMonitorCounters)(group, numCounters, maxActiveCounters, counterSize, counters);}
static void wrap_glGetPerfMonitorGroupString(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
static void (APIENTRYP pglGetPerfMonitorGroupString)(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) = wrap_glGetPerfMonitorGroupString;
static void wrap_glGetPerfMonitorGroupString(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {return trampoline<void>("glGetPerfMonitorGroupString", "glGetPerfMonitorGroupStringAMD", nullptr, nullptr, &pglGetPerfMonitorGroupString, group, bufSize, length, groupString);}
extern "C" void APIENTRY glGetPerfMonitorGroupString(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {return (*pglGetPerfMonitorGroupString)(group, bufSize, length, groupString);}
static void wrap_glGetPerfMonitorGroups(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
static void (APIENTRYP pglGetPerfMonitorGroups)(GLint *numGroups, GLsizei groupsSize, GLuint *groups) = wrap_glGetPerfMonitorGroups;
static void wrap_glGetPerfMonitorGroups(GLint *numGroups, GLsizei groupsSize, GLuint *groups) {return trampoline<void>("glGetPerfMonitorGroups", "glGetPerfMonitorGroupsAMD", nullptr, nullptr, &pglGetPerfMonitorGroups, numGroups, groupsSize, groups);}
extern "C" void APIENTRY glGetPerfMonitorGroups(GLint *numGroups, GLsizei groupsSize, GLuint *groups) {return (*pglGetPerfMonitorGroups)(numGroups, groupsSize, groups);}
static void wrap_glGetPerfQueryData(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
static void (APIENTRYP pglGetPerfQueryData)(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) = wrap_glGetPerfQueryData;
static void wrap_glGetPerfQueryData(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) {return trampoline<void>("glGetPerfQueryData", "glGetPerfQueryDataINTEL", nullptr, nullptr, &pglGetPerfQueryData, queryHandle, flags, dataSize, data, bytesWritten);}
extern "C" void APIENTRY glGetPerfQueryData(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) {return (*pglGetPerfQueryData)(queryHandle, flags, dataSize, data, bytesWritten);}
static void wrap_glGetPerfQueryIdByName(GLchar *queryName, GLuint *queryId);
static void (APIENTRYP pglGetPerfQueryIdByName)(GLchar *queryName, GLuint *queryId) = wrap_glGetPerfQueryIdByName;
static void wrap_glGetPerfQueryIdByName(GLchar *queryName, GLuint *queryId) {return trampoline<void>("glGetPerfQueryIdByName", "glGetPerfQueryIdByNameINTEL", nullptr, nullptr, &pglGetPerfQueryIdByName, queryName, queryId);}
extern "C" void APIENTRY glGetPerfQueryIdByName(GLchar *queryName, GLuint *queryId) {return (*pglGetPerfQueryIdByName)(queryName, queryId);}
static void wrap_glGetPerfQueryInfo(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
static void (APIENTRYP pglGetPerfQueryInfo)(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) = wrap_glGetPerfQueryInfo;
static void wrap_glGetPerfQueryInfo(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) {return trampoline<void>("glGetPerfQueryInfo", "glGetPerfQueryInfoINTEL", nullptr, nullptr, &pglGetPerfQueryInfo, queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);}
extern "C" void APIENTRY glGetPerfQueryInfo(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) {return (*pglGetPerfQueryInfo)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);}
static void wrap_glGetPixelMapfv(GLenum map, GLfloat *values);
static void (APIENTRYP pglGetPixelMapfv)(GLenum map, GLfloat *values) = wrap_glGetPixelMapfv;
static void wrap_glGetPixelMapfv(GLenum map, GLfloat *values) {return trampoline<void>("glGetPixelMapfv", nullptr, nullptr, nullptr, &pglGetPixelMapfv, map, values);}
extern "C" void APIENTRY glGetPixelMapfv(GLenum map, GLfloat *values) {return (*pglGetPixelMapfv)(map, values);}
static void wrap_glGetPixelMapuiv(GLenum map, GLuint *values);
static void (APIENTRYP pglGetPixelMapuiv)(GLenum map, GLuint *values) = wrap_glGetPixelMapuiv;
static void wrap_glGetPixelMapuiv(GLenum map, GLuint *values) {return trampoline<void>("glGetPixelMapuiv", nullptr, nullptr, nullptr, &pglGetPixelMapuiv, map, values);}
extern "C" void APIENTRY glGetPixelMapuiv(GLenum map, GLuint *values) {return (*pglGetPixelMapuiv)(map, values);}
static void wrap_glGetPixelMapusv(GLenum map, GLushort *values);
static void (APIENTRYP pglGetPixelMapusv)(GLenum map, GLushort *values) = wrap_glGetPixelMapusv;
static void wrap_glGetPixelMapusv(GLenum map, GLushort *values) {return trampoline<void>("glGetPixelMapusv", nullptr, nullptr, nullptr, &pglGetPixelMapusv, map, values);}
extern "C" void APIENTRY glGetPixelMapusv(GLenum map, GLushort *values) {return (*pglGetPixelMapusv)(map, values);}
static void wrap_glGetPixelMapxv(GLenum map, GLint size, GLfixed *values);
static void (APIENTRYP pglGetPixelMapxv)(GLenum map, GLint size, GLfixed *values) = wrap_glGetPixelMapxv;
static void wrap_glGetPixelMapxv(GLenum map, GLint size, GLfixed *values) {return trampoline<void>("glGetPixelMapxv", nullptr, nullptr, nullptr, &pglGetPixelMapxv, map, size, values);}
extern "C" void APIENTRY glGetPixelMapxv(GLenum map, GLint size, GLfixed *values) {return (*pglGetPixelMapxv)(map, size, values);}
static void wrap_glGetPixelTexGenParameterfv(GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetPixelTexGenParameterfv)(GLenum pname, GLfloat *params) = wrap_glGetPixelTexGenParameterfv;
static void wrap_glGetPixelTexGenParameterfv(GLenum pname, GLfloat *params) {return trampoline<void>("glGetPixelTexGenParameterfv", "glGetPixelTexGenParameterfvSGIS", nullptr, nullptr, &pglGetPixelTexGenParameterfv, pname, params);}
extern "C" void APIENTRY glGetPixelTexGenParameterfv(GLenum pname, GLfloat *params) {return (*pglGetPixelTexGenParameterfv)(pname, params);}
static void wrap_glGetPixelTexGenParameteriv(GLenum pname, GLint *params);
static void (APIENTRYP pglGetPixelTexGenParameteriv)(GLenum pname, GLint *params) = wrap_glGetPixelTexGenParameteriv;
static void wrap_glGetPixelTexGenParameteriv(GLenum pname, GLint *params) {return trampoline<void>("glGetPixelTexGenParameteriv", "glGetPixelTexGenParameterivSGIS", nullptr, nullptr, &pglGetPixelTexGenParameteriv, pname, params);}
extern "C" void APIENTRY glGetPixelTexGenParameteriv(GLenum pname, GLint *params) {return (*pglGetPixelTexGenParameteriv)(pname, params);}
static void wrap_glGetPixelTransformParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetPixelTransformParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetPixelTransformParameterfv;
static void wrap_glGetPixelTransformParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetPixelTransformParameterfv", "glGetPixelTransformParameterfvEXT", nullptr, nullptr, &pglGetPixelTransformParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetPixelTransformParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetPixelTransformParameterfv)(target, pname, params);}
static void wrap_glGetPixelTransformParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetPixelTransformParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetPixelTransformParameteriv;
static void wrap_glGetPixelTransformParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetPixelTransformParameteriv", "glGetPixelTransformParameterivEXT", nullptr, nullptr, &pglGetPixelTransformParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetPixelTransformParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetPixelTransformParameteriv)(target, pname, params);}
static void wrap_glGetPointerIndexedv(GLenum target, GLuint index, void **data);
static void (APIENTRYP pglGetPointerIndexedv)(GLenum target, GLuint index, void **data) = wrap_glGetPointerIndexedv;
static void wrap_glGetPointerIndexedv(GLenum target, GLuint index, void **data) {return trampoline<void>("glGetPointerIndexedv", "glGetPointerIndexedvEXT", nullptr, nullptr, &pglGetPointerIndexedv, target, index, data);}
extern "C" void APIENTRY glGetPointerIndexedv(GLenum target, GLuint index, void **data) {return (*pglGetPointerIndexedv)(target, index, data);}
static void wrap_glGetPointeri_v(GLenum pname, GLuint index, void **params);
static void (APIENTRYP pglGetPointeri_v)(GLenum pname, GLuint index, void **params) = wrap_glGetPointeri_v;
static void wrap_glGetPointeri_v(GLenum pname, GLuint index, void **params) {return trampoline<void>("glGetPointeri_v", "glGetPointeri_vEXT", nullptr, nullptr, &pglGetPointeri_v, pname, index, params);}
extern "C" void APIENTRY glGetPointeri_v(GLenum pname, GLuint index, void **params) {return (*pglGetPointeri_v)(pname, index, params);}
static void wrap_glGetPointerv(GLenum pname, GLvoid **params);
static void (APIENTRYP pglGetPointerv)(GLenum pname, GLvoid **params) = wrap_glGetPointerv;
static void wrap_glGetPointerv(GLenum pname, GLvoid **params) {return trampoline<void>("glGetPointerv", "glGetPointervEXT", nullptr, nullptr, &pglGetPointerv, pname, params);}
extern "C" void APIENTRY glGetPointerv(GLenum pname, GLvoid **params) {return (*pglGetPointerv)(pname, params);}
static void wrap_glGetPolygonStipple(GLubyte *mask);
static void (APIENTRYP pglGetPolygonStipple)(GLubyte *mask) = wrap_glGetPolygonStipple;
static void wrap_glGetPolygonStipple(GLubyte *mask) {return trampoline<void>("glGetPolygonStipple", nullptr, nullptr, nullptr, &pglGetPolygonStipple, mask);}
extern "C" void APIENTRY glGetPolygonStipple(GLubyte *mask) {return (*pglGetPolygonStipple)(mask);}
static void wrap_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
static void (APIENTRYP pglGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) = wrap_glGetProgramBinary;
static void wrap_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {return trampoline<void>("glGetProgramBinary", nullptr, nullptr, nullptr, &pglGetProgramBinary, program, bufSize, length, binaryFormat, binary);}
extern "C" void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {return (*pglGetProgramBinary)(program, bufSize, length, binaryFormat, binary);}
static void wrap_glGetProgramEnvParameterIiv(GLenum target, GLuint index, GLint *params);
static void (APIENTRYP pglGetProgramEnvParameterIiv)(GLenum target, GLuint index, GLint *params) = wrap_glGetProgramEnvParameterIiv;
static void wrap_glGetProgramEnvParameterIiv(GLenum target, GLuint index, GLint *params) {return trampoline<void>("glGetProgramEnvParameterIiv", "glGetProgramEnvParameterIivNV", nullptr, nullptr, &pglGetProgramEnvParameterIiv, target, index, params);}
extern "C" void APIENTRY glGetProgramEnvParameterIiv(GLenum target, GLuint index, GLint *params) {return (*pglGetProgramEnvParameterIiv)(target, index, params);}
static void wrap_glGetProgramEnvParameterIuiv(GLenum target, GLuint index, GLuint *params);
static void (APIENTRYP pglGetProgramEnvParameterIuiv)(GLenum target, GLuint index, GLuint *params) = wrap_glGetProgramEnvParameterIuiv;
static void wrap_glGetProgramEnvParameterIuiv(GLenum target, GLuint index, GLuint *params) {return trampoline<void>("glGetProgramEnvParameterIuiv", "glGetProgramEnvParameterIuivNV", nullptr, nullptr, &pglGetProgramEnvParameterIuiv, target, index, params);}
extern "C" void APIENTRY glGetProgramEnvParameterIuiv(GLenum target, GLuint index, GLuint *params) {return (*pglGetProgramEnvParameterIuiv)(target, index, params);}
static void wrap_glGetProgramEnvParameterdv(GLenum target, GLuint index, GLdouble *params);
static void (APIENTRYP pglGetProgramEnvParameterdv)(GLenum target, GLuint index, GLdouble *params) = wrap_glGetProgramEnvParameterdv;
static void wrap_glGetProgramEnvParameterdv(GLenum target, GLuint index, GLdouble *params) {return trampoline<void>("glGetProgramEnvParameterdv", "glGetProgramEnvParameterdvARB", nullptr, nullptr, &pglGetProgramEnvParameterdv, target, index, params);}
extern "C" void APIENTRY glGetProgramEnvParameterdv(GLenum target, GLuint index, GLdouble *params) {return (*pglGetProgramEnvParameterdv)(target, index, params);}
static void wrap_glGetProgramEnvParameterfv(GLenum target, GLuint index, GLfloat *params);
static void (APIENTRYP pglGetProgramEnvParameterfv)(GLenum target, GLuint index, GLfloat *params) = wrap_glGetProgramEnvParameterfv;
static void wrap_glGetProgramEnvParameterfv(GLenum target, GLuint index, GLfloat *params) {return trampoline<void>("glGetProgramEnvParameterfv", "glGetProgramEnvParameterfvARB", nullptr, nullptr, &pglGetProgramEnvParameterfv, target, index, params);}
extern "C" void APIENTRY glGetProgramEnvParameterfv(GLenum target, GLuint index, GLfloat *params) {return (*pglGetProgramEnvParameterfv)(target, index, params);}
static void wrap_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
static void (APIENTRYP pglGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) = wrap_glGetProgramInfoLog;
static void wrap_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {return trampoline<void>("glGetProgramInfoLog", nullptr, nullptr, nullptr, &pglGetProgramInfoLog, program, bufSize, length, infoLog);}
extern "C" void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {return (*pglGetProgramInfoLog)(program, bufSize, length, infoLog);}
static void wrap_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
static void (APIENTRYP pglGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params) = wrap_glGetProgramInterfaceiv;
static void wrap_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {return trampoline<void>("glGetProgramInterfaceiv", nullptr, nullptr, nullptr, &pglGetProgramInterfaceiv, program, programInterface, pname, params);}
extern "C" void APIENTRY glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {return (*pglGetProgramInterfaceiv)(program, programInterface, pname, params);}
static void wrap_glGetProgramLocalParameterIiv(GLenum target, GLuint index, GLint *params);
static void (APIENTRYP pglGetProgramLocalParameterIiv)(GLenum target, GLuint index, GLint *params) = wrap_glGetProgramLocalParameterIiv;
static void wrap_glGetProgramLocalParameterIiv(GLenum target, GLuint index, GLint *params) {return trampoline<void>("glGetProgramLocalParameterIiv", "glGetProgramLocalParameterIivNV", nullptr, nullptr, &pglGetProgramLocalParameterIiv, target, index, params);}
extern "C" void APIENTRY glGetProgramLocalParameterIiv(GLenum target, GLuint index, GLint *params) {return (*pglGetProgramLocalParameterIiv)(target, index, params);}
static void wrap_glGetProgramLocalParameterIuiv(GLenum target, GLuint index, GLuint *params);
static void (APIENTRYP pglGetProgramLocalParameterIuiv)(GLenum target, GLuint index, GLuint *params) = wrap_glGetProgramLocalParameterIuiv;
static void wrap_glGetProgramLocalParameterIuiv(GLenum target, GLuint index, GLuint *params) {return trampoline<void>("glGetProgramLocalParameterIuiv", "glGetProgramLocalParameterIuivNV", nullptr, nullptr, &pglGetProgramLocalParameterIuiv, target, index, params);}
extern "C" void APIENTRY glGetProgramLocalParameterIuiv(GLenum target, GLuint index, GLuint *params) {return (*pglGetProgramLocalParameterIuiv)(target, index, params);}
static void wrap_glGetProgramLocalParameterdv(GLenum target, GLuint index, GLdouble *params);
static void (APIENTRYP pglGetProgramLocalParameterdv)(GLenum target, GLuint index, GLdouble *params) = wrap_glGetProgramLocalParameterdv;
static void wrap_glGetProgramLocalParameterdv(GLenum target, GLuint index, GLdouble *params) {return trampoline<void>("glGetProgramLocalParameterdv", "glGetProgramLocalParameterdvARB", nullptr, nullptr, &pglGetProgramLocalParameterdv, target, index, params);}
extern "C" void APIENTRY glGetProgramLocalParameterdv(GLenum target, GLuint index, GLdouble *params) {return (*pglGetProgramLocalParameterdv)(target, index, params);}
static void wrap_glGetProgramLocalParameterfv(GLenum target, GLuint index, GLfloat *params);
static void (APIENTRYP pglGetProgramLocalParameterfv)(GLenum target, GLuint index, GLfloat *params) = wrap_glGetProgramLocalParameterfv;
static void wrap_glGetProgramLocalParameterfv(GLenum target, GLuint index, GLfloat *params) {return trampoline<void>("glGetProgramLocalParameterfv", "glGetProgramLocalParameterfvARB", nullptr, nullptr, &pglGetProgramLocalParameterfv, target, index, params);}
extern "C" void APIENTRY glGetProgramLocalParameterfv(GLenum target, GLuint index, GLfloat *params) {return (*pglGetProgramLocalParameterfv)(target, index, params);}
static void wrap_glGetProgramNamedParameterdv(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
static void (APIENTRYP pglGetProgramNamedParameterdv)(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) = wrap_glGetProgramNamedParameterdv;
static void wrap_glGetProgramNamedParameterdv(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) {return trampoline<void>("glGetProgramNamedParameterdv", "glGetProgramNamedParameterdvNV", nullptr, nullptr, &pglGetProgramNamedParameterdv, id, len, name, params);}
extern "C" void APIENTRY glGetProgramNamedParameterdv(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) {return (*pglGetProgramNamedParameterdv)(id, len, name, params);}
static void wrap_glGetProgramNamedParameterfv(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
static void (APIENTRYP pglGetProgramNamedParameterfv)(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) = wrap_glGetProgramNamedParameterfv;
static void wrap_glGetProgramNamedParameterfv(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) {return trampoline<void>("glGetProgramNamedParameterfv", "glGetProgramNamedParameterfvNV", nullptr, nullptr, &pglGetProgramNamedParameterfv, id, len, name, params);}
extern "C" void APIENTRY glGetProgramNamedParameterfv(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) {return (*pglGetProgramNamedParameterfv)(id, len, name, params);}
static void wrap_glGetProgramParameterdv(GLenum target, GLuint index, GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetProgramParameterdv)(GLenum target, GLuint index, GLenum pname, GLdouble *params) = wrap_glGetProgramParameterdv;
static void wrap_glGetProgramParameterdv(GLenum target, GLuint index, GLenum pname, GLdouble *params) {return trampoline<void>("glGetProgramParameterdv", "glGetProgramParameterdvNV", nullptr, nullptr, &pglGetProgramParameterdv, target, index, pname, params);}
extern "C" void APIENTRY glGetProgramParameterdv(GLenum target, GLuint index, GLenum pname, GLdouble *params) {return (*pglGetProgramParameterdv)(target, index, pname, params);}
static void wrap_glGetProgramParameterfv(GLenum target, GLuint index, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetProgramParameterfv)(GLenum target, GLuint index, GLenum pname, GLfloat *params) = wrap_glGetProgramParameterfv;
static void wrap_glGetProgramParameterfv(GLenum target, GLuint index, GLenum pname, GLfloat *params) {return trampoline<void>("glGetProgramParameterfv", "glGetProgramParameterfvNV", nullptr, nullptr, &pglGetProgramParameterfv, target, index, pname, params);}
extern "C" void APIENTRY glGetProgramParameterfv(GLenum target, GLuint index, GLenum pname, GLfloat *params) {return (*pglGetProgramParameterfv)(target, index, pname, params);}
static void wrap_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
static void (APIENTRYP pglGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) = wrap_glGetProgramPipelineInfoLog;
static void wrap_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {return trampoline<void>("glGetProgramPipelineInfoLog", nullptr, nullptr, nullptr, &pglGetProgramPipelineInfoLog, pipeline, bufSize, length, infoLog);}
extern "C" void APIENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {return (*pglGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);}
static void wrap_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
static void (APIENTRYP pglGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params) = wrap_glGetProgramPipelineiv;
static void wrap_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {return trampoline<void>("glGetProgramPipelineiv", nullptr, nullptr, nullptr, &pglGetProgramPipelineiv, pipeline, pname, params);}
extern "C" void APIENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {return (*pglGetProgramPipelineiv)(pipeline, pname, params);}
static GLuint wrap_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
static GLuint (APIENTRYP pglGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name) = wrap_glGetProgramResourceIndex;
static GLuint wrap_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {return trampoline<GLuint>("glGetProgramResourceIndex", nullptr, nullptr, nullptr, &pglGetProgramResourceIndex, program, programInterface, name);}
extern "C" GLuint APIENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {return (*pglGetProgramResourceIndex)(program, programInterface, name);}
static GLint wrap_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
static GLint (APIENTRYP pglGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name) = wrap_glGetProgramResourceLocation;
static GLint wrap_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {return trampoline<GLint>("glGetProgramResourceLocation", nullptr, nullptr, nullptr, &pglGetProgramResourceLocation, program, programInterface, name);}
extern "C" GLint APIENTRY glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {return (*pglGetProgramResourceLocation)(program, programInterface, name);}
static GLint wrap_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
static GLint (APIENTRYP pglGetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar *name) = wrap_glGetProgramResourceLocationIndex;
static GLint wrap_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {return trampoline<GLint>("glGetProgramResourceLocationIndex", nullptr, nullptr, nullptr, &pglGetProgramResourceLocationIndex, program, programInterface, name);}
extern "C" GLint APIENTRY glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {return (*pglGetProgramResourceLocationIndex)(program, programInterface, name);}
static void wrap_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
static void (APIENTRYP pglGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) = wrap_glGetProgramResourceName;
static void wrap_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {return trampoline<void>("glGetProgramResourceName", nullptr, nullptr, nullptr, &pglGetProgramResourceName, program, programInterface, index, bufSize, length, name);}
extern "C" void APIENTRY glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {return (*pglGetProgramResourceName)(program, programInterface, index, bufSize, length, name);}
static void wrap_glGetProgramResourcefv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
static void (APIENTRYP pglGetProgramResourcefv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) = wrap_glGetProgramResourcefv;
static void wrap_glGetProgramResourcefv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) {return trampoline<void>("glGetProgramResourcefv", "glGetProgramResourcefvNV", nullptr, nullptr, &pglGetProgramResourcefv, program, programInterface, index, propCount, props, bufSize, length, params);}
extern "C" void APIENTRY glGetProgramResourcefv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) {return (*pglGetProgramResourcefv)(program, programInterface, index, propCount, props, bufSize, length, params);}
static void wrap_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
static void (APIENTRYP pglGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) = wrap_glGetProgramResourceiv;
static void wrap_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {return trampoline<void>("glGetProgramResourceiv", nullptr, nullptr, nullptr, &pglGetProgramResourceiv, program, programInterface, index, propCount, props, bufSize, length, params);}
extern "C" void APIENTRY glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {return (*pglGetProgramResourceiv)(program, programInterface, index, propCount, props, bufSize, length, params);}
static void wrap_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
static void (APIENTRYP pglGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint *values) = wrap_glGetProgramStageiv;
static void wrap_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {return trampoline<void>("glGetProgramStageiv", nullptr, nullptr, nullptr, &pglGetProgramStageiv, program, shadertype, pname, values);}
extern "C" void APIENTRY glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {return (*pglGetProgramStageiv)(program, shadertype, pname, values);}
static void wrap_glGetProgramString(GLenum target, GLenum pname, void *string);
static void (APIENTRYP pglGetProgramString)(GLenum target, GLenum pname, void *string) = wrap_glGetProgramString;
static void wrap_glGetProgramString(GLenum target, GLenum pname, void *string) {return trampoline<void>("glGetProgramString", "glGetProgramStringARB", "glGetProgramStringNV", nullptr, &pglGetProgramString, target, pname, string);}
extern "C" void APIENTRY glGetProgramString(GLenum target, GLenum pname, void *string) {return (*pglGetProgramString)(target, pname, string);}
static void wrap_glGetProgramSubroutineParameteruiv(GLenum target, GLuint index, GLuint *param);
static void (APIENTRYP pglGetProgramSubroutineParameteruiv)(GLenum target, GLuint index, GLuint *param) = wrap_glGetProgramSubroutineParameteruiv;
static void wrap_glGetProgramSubroutineParameteruiv(GLenum target, GLuint index, GLuint *param) {return trampoline<void>("glGetProgramSubroutineParameteruiv", "glGetProgramSubroutineParameteruivNV", nullptr, nullptr, &pglGetProgramSubroutineParameteruiv, target, index, param);}
extern "C" void APIENTRY glGetProgramSubroutineParameteruiv(GLenum target, GLuint index, GLuint *param) {return (*pglGetProgramSubroutineParameteruiv)(target, index, param);}
static void wrap_glGetProgramiv(GLuint program, GLenum pname, GLint *params);
static void (APIENTRYP pglGetProgramiv)(GLuint program, GLenum pname, GLint *params) = wrap_glGetProgramiv;
static void wrap_glGetProgramiv(GLuint program, GLenum pname, GLint *params) {return trampoline<void>("glGetProgramiv", "glGetProgramivARB", "glGetProgramivNV", nullptr, &pglGetProgramiv, program, pname, params);}
extern "C" void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params) {return (*pglGetProgramiv)(program, pname, params);}
static void wrap_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
static void (APIENTRYP pglGetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = wrap_glGetQueryBufferObjecti64v;
static void wrap_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return trampoline<void>("glGetQueryBufferObjecti64v", nullptr, nullptr, nullptr, &pglGetQueryBufferObjecti64v, id, buffer, pname, offset);}
extern "C" void APIENTRY glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return (*pglGetQueryBufferObjecti64v)(id, buffer, pname, offset);}
static void wrap_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
static void (APIENTRYP pglGetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = wrap_glGetQueryBufferObjectiv;
static void wrap_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return trampoline<void>("glGetQueryBufferObjectiv", nullptr, nullptr, nullptr, &pglGetQueryBufferObjectiv, id, buffer, pname, offset);}
extern "C" void APIENTRY glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return (*pglGetQueryBufferObjectiv)(id, buffer, pname, offset);}
static void wrap_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
static void (APIENTRYP pglGetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = wrap_glGetQueryBufferObjectui64v;
static void wrap_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return trampoline<void>("glGetQueryBufferObjectui64v", nullptr, nullptr, nullptr, &pglGetQueryBufferObjectui64v, id, buffer, pname, offset);}
extern "C" void APIENTRY glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return (*pglGetQueryBufferObjectui64v)(id, buffer, pname, offset);}
static void wrap_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
static void (APIENTRYP pglGetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = wrap_glGetQueryBufferObjectuiv;
static void wrap_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return trampoline<void>("glGetQueryBufferObjectuiv", nullptr, nullptr, nullptr, &pglGetQueryBufferObjectuiv, id, buffer, pname, offset);}
extern "C" void APIENTRY glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {return (*pglGetQueryBufferObjectuiv)(id, buffer, pname, offset);}
static void wrap_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
static void (APIENTRYP pglGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint *params) = wrap_glGetQueryIndexediv;
static void wrap_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {return trampoline<void>("glGetQueryIndexediv", nullptr, nullptr, nullptr, &pglGetQueryIndexediv, target, index, pname, params);}
extern "C" void APIENTRY glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {return (*pglGetQueryIndexediv)(target, index, pname, params);}
static void wrap_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
static void (APIENTRYP pglGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 *params) = wrap_glGetQueryObjecti64v;
static void wrap_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {return trampoline<void>("glGetQueryObjecti64v", "glGetQueryObjecti64vEXT", nullptr, nullptr, &pglGetQueryObjecti64v, id, pname, params);}
extern "C" void APIENTRY glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {return (*pglGetQueryObjecti64v)(id, pname, params);}
static void wrap_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
static void (APIENTRYP pglGetQueryObjectiv)(GLuint id, GLenum pname, GLint *params) = wrap_glGetQueryObjectiv;
static void wrap_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {return trampoline<void>("glGetQueryObjectiv", "glGetQueryObjectivARB", nullptr, nullptr, &pglGetQueryObjectiv, id, pname, params);}
extern "C" void APIENTRY glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {return (*pglGetQueryObjectiv)(id, pname, params);}
static void wrap_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
static void (APIENTRYP pglGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 *params) = wrap_glGetQueryObjectui64v;
static void wrap_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {return trampoline<void>("glGetQueryObjectui64v", "glGetQueryObjectui64vEXT", nullptr, nullptr, &pglGetQueryObjectui64v, id, pname, params);}
extern "C" void APIENTRY glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {return (*pglGetQueryObjectui64v)(id, pname, params);}
static void wrap_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params) = wrap_glGetQueryObjectuiv;
static void wrap_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {return trampoline<void>("glGetQueryObjectuiv", "glGetQueryObjectuivARB", nullptr, nullptr, &pglGetQueryObjectuiv, id, pname, params);}
extern "C" void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {return (*pglGetQueryObjectuiv)(id, pname, params);}
static void wrap_glGetQueryiv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetQueryiv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetQueryiv;
static void wrap_glGetQueryiv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetQueryiv", "glGetQueryivARB", nullptr, nullptr, &pglGetQueryiv, target, pname, params);}
extern "C" void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params) {return (*pglGetQueryiv)(target, pname, params);}
static void wrap_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetRenderbufferParameteriv;
static void wrap_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetRenderbufferParameteriv", "glGetRenderbufferParameterivEXT", nullptr, nullptr, &pglGetRenderbufferParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetRenderbufferParameteriv)(target, pname, params);}
static void wrap_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
static void (APIENTRYP pglGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params) = wrap_glGetSamplerParameterIiv;
static void wrap_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {return trampoline<void>("glGetSamplerParameterIiv", nullptr, nullptr, nullptr, &pglGetSamplerParameterIiv, sampler, pname, params);}
extern "C" void APIENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {return (*pglGetSamplerParameterIiv)(sampler, pname, params);}
static void wrap_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params) = wrap_glGetSamplerParameterIuiv;
static void wrap_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {return trampoline<void>("glGetSamplerParameterIuiv", nullptr, nullptr, nullptr, &pglGetSamplerParameterIuiv, sampler, pname, params);}
extern "C" void APIENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {return (*pglGetSamplerParameterIuiv)(sampler, pname, params);}
static void wrap_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params) = wrap_glGetSamplerParameterfv;
static void wrap_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {return trampoline<void>("glGetSamplerParameterfv", nullptr, nullptr, nullptr, &pglGetSamplerParameterfv, sampler, pname, params);}
extern "C" void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {return (*pglGetSamplerParameterfv)(sampler, pname, params);}
static void wrap_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
static void (APIENTRYP pglGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params) = wrap_glGetSamplerParameteriv;
static void wrap_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {return trampoline<void>("glGetSamplerParameteriv", nullptr, nullptr, nullptr, &pglGetSamplerParameteriv, sampler, pname, params);}
extern "C" void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {return (*pglGetSamplerParameteriv)(sampler, pname, params);}
static void wrap_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
static void (APIENTRYP pglGetSeparableFilter)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span) = wrap_glGetSeparableFilter;
static void wrap_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span) {return trampoline<void>("glGetSeparableFilter", "glGetSeparableFilterEXT", nullptr, nullptr, &pglGetSeparableFilter, target, format, type, row, column, span);}
extern "C" void APIENTRY glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span) {return (*pglGetSeparableFilter)(target, format, type, row, column, span);}
static void wrap_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
static void (APIENTRYP pglGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) = wrap_glGetShaderInfoLog;
static void wrap_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {return trampoline<void>("glGetShaderInfoLog", nullptr, nullptr, nullptr, &pglGetShaderInfoLog, shader, bufSize, length, infoLog);}
extern "C" void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {return (*pglGetShaderInfoLog)(shader, bufSize, length, infoLog);}
static void wrap_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
static void (APIENTRYP pglGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) = wrap_glGetShaderPrecisionFormat;
static void wrap_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {return trampoline<void>("glGetShaderPrecisionFormat", nullptr, nullptr, nullptr, &pglGetShaderPrecisionFormat, shadertype, precisiontype, range, precision);}
extern "C" void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {return (*pglGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);}
static void wrap_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
static void (APIENTRYP pglGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) = wrap_glGetShaderSource;
static void wrap_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {return trampoline<void>("glGetShaderSource", "glGetShaderSourceARB", nullptr, nullptr, &pglGetShaderSource, shader, bufSize, length, source);}
extern "C" void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {return (*pglGetShaderSource)(shader, bufSize, length, source);}
static void wrap_glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
static void (APIENTRYP pglGetShaderiv)(GLuint shader, GLenum pname, GLint *params) = wrap_glGetShaderiv;
static void wrap_glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {return trampoline<void>("glGetShaderiv", nullptr, nullptr, nullptr, &pglGetShaderiv, shader, pname, params);}
extern "C" void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {return (*pglGetShaderiv)(shader, pname, params);}
static void wrap_glGetSharpenTexFunc(GLenum target, GLfloat *points);
static void (APIENTRYP pglGetSharpenTexFunc)(GLenum target, GLfloat *points) = wrap_glGetSharpenTexFunc;
static void wrap_glGetSharpenTexFunc(GLenum target, GLfloat *points) {return trampoline<void>("glGetSharpenTexFunc", "glGetSharpenTexFuncSGIS", nullptr, nullptr, &pglGetSharpenTexFunc, target, points);}
extern "C" void APIENTRY glGetSharpenTexFunc(GLenum target, GLfloat *points) {return (*pglGetSharpenTexFunc)(target, points);}
static GLushort wrap_glGetStageIndex(GLenum shadertype);
static GLushort (APIENTRYP pglGetStageIndex)(GLenum shadertype) = wrap_glGetStageIndex;
static GLushort wrap_glGetStageIndex(GLenum shadertype) {return trampoline<GLushort>("glGetStageIndex", "glGetStageIndexNV", nullptr, nullptr, &pglGetStageIndex, shadertype);}
extern "C" GLushort APIENTRY glGetStageIndex(GLenum shadertype) {return (*pglGetStageIndex)(shadertype);}
static const GLubyte * wrap_glGetString(GLenum name);
static const GLubyte * (APIENTRYP pglGetString)(GLenum name) = wrap_glGetString;
static const GLubyte * wrap_glGetString(GLenum name) {return trampoline<const GLubyte *>("glGetString", nullptr, nullptr, nullptr, &pglGetString, name);}
extern "C" const GLubyte * APIENTRY glGetString(GLenum name) {return (*pglGetString)(name);}
static const GLubyte * wrap_glGetStringi(GLenum name, GLuint index);
static const GLubyte * (APIENTRYP pglGetStringi)(GLenum name, GLuint index) = wrap_glGetStringi;
static const GLubyte * wrap_glGetStringi(GLenum name, GLuint index) {return trampoline<const GLubyte *>("glGetStringi", nullptr, nullptr, nullptr, &pglGetStringi, name, index);}
extern "C" const GLubyte * APIENTRY glGetStringi(GLenum name, GLuint index) {return (*pglGetStringi)(name, index);}
static GLuint wrap_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
static GLuint (APIENTRYP pglGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar *name) = wrap_glGetSubroutineIndex;
static GLuint wrap_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {return trampoline<GLuint>("glGetSubroutineIndex", nullptr, nullptr, nullptr, &pglGetSubroutineIndex, program, shadertype, name);}
extern "C" GLuint APIENTRY glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {return (*pglGetSubroutineIndex)(program, shadertype, name);}
static GLint wrap_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
static GLint (APIENTRYP pglGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar *name) = wrap_glGetSubroutineUniformLocation;
static GLint wrap_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {return trampoline<GLint>("glGetSubroutineUniformLocation", nullptr, nullptr, nullptr, &pglGetSubroutineUniformLocation, program, shadertype, name);}
extern "C" GLint APIENTRY glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {return (*pglGetSubroutineUniformLocation)(program, shadertype, name);}
static void wrap_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
static void (APIENTRYP pglGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) = wrap_glGetSynciv;
static void wrap_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {return trampoline<void>("glGetSynciv", nullptr, nullptr, nullptr, &pglGetSynciv, sync, pname, bufSize, length, values);}
extern "C" void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {return (*pglGetSynciv)(sync, pname, bufSize, length, values);}
static void wrap_glGetTexBumpParameterfv(GLenum pname, GLfloat *param);
static void (APIENTRYP pglGetTexBumpParameterfv)(GLenum pname, GLfloat *param) = wrap_glGetTexBumpParameterfv;
static void wrap_glGetTexBumpParameterfv(GLenum pname, GLfloat *param) {return trampoline<void>("glGetTexBumpParameterfv", "glGetTexBumpParameterfvATI", nullptr, nullptr, &pglGetTexBumpParameterfv, pname, param);}
extern "C" void APIENTRY glGetTexBumpParameterfv(GLenum pname, GLfloat *param) {return (*pglGetTexBumpParameterfv)(pname, param);}
static void wrap_glGetTexBumpParameteriv(GLenum pname, GLint *param);
static void (APIENTRYP pglGetTexBumpParameteriv)(GLenum pname, GLint *param) = wrap_glGetTexBumpParameteriv;
static void wrap_glGetTexBumpParameteriv(GLenum pname, GLint *param) {return trampoline<void>("glGetTexBumpParameteriv", "glGetTexBumpParameterivATI", nullptr, nullptr, &pglGetTexBumpParameteriv, pname, param);}
extern "C" void APIENTRY glGetTexBumpParameteriv(GLenum pname, GLint *param) {return (*pglGetTexBumpParameteriv)(pname, param);}
static void wrap_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetTexEnvfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetTexEnvfv;
static void wrap_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetTexEnvfv", nullptr, nullptr, nullptr, &pglGetTexEnvfv, target, pname, params);}
extern "C" void APIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetTexEnvfv)(target, pname, params);}
static void wrap_glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTexEnviv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetTexEnviv;
static void wrap_glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetTexEnviv", nullptr, nullptr, nullptr, &pglGetTexEnviv, target, pname, params);}
extern "C" void APIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {return (*pglGetTexEnviv)(target, pname, params);}
static void wrap_glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetTexEnvxv)(GLenum target, GLenum pname, GLfixed *params) = wrap_glGetTexEnvxv;
static void wrap_glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params) {return trampoline<void>("glGetTexEnvxv", "glGetTexEnvxvOES", nullptr, nullptr, &pglGetTexEnvxv, target, pname, params);}
extern "C" void APIENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params) {return (*pglGetTexEnvxv)(target, pname, params);}
static void wrap_glGetTexFilterFunc(GLenum target, GLenum filter, GLfloat *weights);
static void (APIENTRYP pglGetTexFilterFunc)(GLenum target, GLenum filter, GLfloat *weights) = wrap_glGetTexFilterFunc;
static void wrap_glGetTexFilterFunc(GLenum target, GLenum filter, GLfloat *weights) {return trampoline<void>("glGetTexFilterFunc", "glGetTexFilterFuncSGIS", nullptr, nullptr, &pglGetTexFilterFunc, target, filter, weights);}
extern "C" void APIENTRY glGetTexFilterFunc(GLenum target, GLenum filter, GLfloat *weights) {return (*pglGetTexFilterFunc)(target, filter, weights);}
static void wrap_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetTexGendv)(GLenum coord, GLenum pname, GLdouble *params) = wrap_glGetTexGendv;
static void wrap_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {return trampoline<void>("glGetTexGendv", nullptr, nullptr, nullptr, &pglGetTexGendv, coord, pname, params);}
extern "C" void APIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {return (*pglGetTexGendv)(coord, pname, params);}
static void wrap_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetTexGenfv)(GLenum coord, GLenum pname, GLfloat *params) = wrap_glGetTexGenfv;
static void wrap_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {return trampoline<void>("glGetTexGenfv", nullptr, nullptr, nullptr, &pglGetTexGenfv, coord, pname, params);}
extern "C" void APIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {return (*pglGetTexGenfv)(coord, pname, params);}
static void wrap_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTexGeniv)(GLenum coord, GLenum pname, GLint *params) = wrap_glGetTexGeniv;
static void wrap_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {return trampoline<void>("glGetTexGeniv", nullptr, nullptr, nullptr, &pglGetTexGeniv, coord, pname, params);}
extern "C" void APIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {return (*pglGetTexGeniv)(coord, pname, params);}
static void wrap_glGetTexGenxv(GLenum coord, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetTexGenxv)(GLenum coord, GLenum pname, GLfixed *params) = wrap_glGetTexGenxv;
static void wrap_glGetTexGenxv(GLenum coord, GLenum pname, GLfixed *params) {return trampoline<void>("glGetTexGenxv", "glGetTexGenxvOES", nullptr, nullptr, &pglGetTexGenxv, coord, pname, params);}
extern "C" void APIENTRY glGetTexGenxv(GLenum coord, GLenum pname, GLfixed *params) {return (*pglGetTexGenxv)(coord, pname, params);}
static void wrap_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
static void (APIENTRYP pglGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) = wrap_glGetTexImage;
static void wrap_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) {return trampoline<void>("glGetTexImage", nullptr, nullptr, nullptr, &pglGetTexImage, target, level, format, type, pixels);}
extern "C" void APIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) {return (*pglGetTexImage)(target, level, format, type, pixels);}
static void wrap_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params) = wrap_glGetTexLevelParameterfv;
static void wrap_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {return trampoline<void>("glGetTexLevelParameterfv", nullptr, nullptr, nullptr, &pglGetTexLevelParameterfv, target, level, pname, params);}
extern "C" void APIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {return (*pglGetTexLevelParameterfv)(target, level, pname, params);}
static void wrap_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params) = wrap_glGetTexLevelParameteriv;
static void wrap_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {return trampoline<void>("glGetTexLevelParameteriv", nullptr, nullptr, nullptr, &pglGetTexLevelParameteriv, target, level, pname, params);}
extern "C" void APIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {return (*pglGetTexLevelParameteriv)(target, level, pname, params);}
static void wrap_glGetTexLevelParameterxv(GLenum target, GLint level, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetTexLevelParameterxv)(GLenum target, GLint level, GLenum pname, GLfixed *params) = wrap_glGetTexLevelParameterxv;
static void wrap_glGetTexLevelParameterxv(GLenum target, GLint level, GLenum pname, GLfixed *params) {return trampoline<void>("glGetTexLevelParameterxv", "glGetTexLevelParameterxvOES", nullptr, nullptr, &pglGetTexLevelParameterxv, target, level, pname, params);}
extern "C" void APIENTRY glGetTexLevelParameterxv(GLenum target, GLint level, GLenum pname, GLfixed *params) {return (*pglGetTexLevelParameterxv)(target, level, pname, params);}
static void wrap_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTexParameterIiv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetTexParameterIiv;
static void wrap_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetTexParameterIiv", "glGetTexParameterIivEXT", nullptr, nullptr, &pglGetTexParameterIiv, target, pname, params);}
extern "C" void APIENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {return (*pglGetTexParameterIiv)(target, pname, params);}
static void wrap_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params) = wrap_glGetTexParameterIuiv;
static void wrap_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {return trampoline<void>("glGetTexParameterIuiv", "glGetTexParameterIuivEXT", nullptr, nullptr, &pglGetTexParameterIuiv, target, pname, params);}
extern "C" void APIENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {return (*pglGetTexParameterIuiv)(target, pname, params);}
static void wrap_glGetTexParameterPointerv(GLenum target, GLenum pname, void **params);
static void (APIENTRYP pglGetTexParameterPointerv)(GLenum target, GLenum pname, void **params) = wrap_glGetTexParameterPointerv;
static void wrap_glGetTexParameterPointerv(GLenum target, GLenum pname, void **params) {return trampoline<void>("glGetTexParameterPointerv", "glGetTexParameterPointervAPPLE", nullptr, nullptr, &pglGetTexParameterPointerv, target, pname, params);}
extern "C" void APIENTRY glGetTexParameterPointerv(GLenum target, GLenum pname, void **params) {return (*pglGetTexParameterPointerv)(target, pname, params);}
static void wrap_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params) = wrap_glGetTexParameterfv;
static void wrap_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {return trampoline<void>("glGetTexParameterfv", nullptr, nullptr, nullptr, &pglGetTexParameterfv, target, pname, params);}
extern "C" void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {return (*pglGetTexParameterfv)(target, pname, params);}
static void wrap_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTexParameteriv)(GLenum target, GLenum pname, GLint *params) = wrap_glGetTexParameteriv;
static void wrap_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {return trampoline<void>("glGetTexParameteriv", nullptr, nullptr, nullptr, &pglGetTexParameteriv, target, pname, params);}
extern "C" void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {return (*pglGetTexParameteriv)(target, pname, params);}
static void wrap_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params);
static void (APIENTRYP pglGetTexParameterxv)(GLenum target, GLenum pname, GLfixed *params) = wrap_glGetTexParameterxv;
static void wrap_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params) {return trampoline<void>("glGetTexParameterxv", "glGetTexParameterxvOES", nullptr, nullptr, &pglGetTexParameterxv, target, pname, params);}
extern "C" void APIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params) {return (*pglGetTexParameterxv)(target, pname, params);}
static GLuint64 wrap_glGetTextureHandle(GLuint texture);
static GLuint64 (APIENTRYP pglGetTextureHandle)(GLuint texture) = wrap_glGetTextureHandle;
static GLuint64 wrap_glGetTextureHandle(GLuint texture) {return trampoline<GLuint64>("glGetTextureHandle", "glGetTextureHandleARB", "glGetTextureHandleNV", nullptr, &pglGetTextureHandle, texture);}
extern "C" GLuint64 APIENTRY glGetTextureHandle(GLuint texture) {return (*pglGetTextureHandle)(texture);}
static void wrap_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
static void (APIENTRYP pglGetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) = wrap_glGetTextureImage;
static void wrap_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {return trampoline<void>("glGetTextureImage", "glGetTextureImageEXT", nullptr, nullptr, &pglGetTextureImage, texture, level, format, type, bufSize, pixels);}
extern "C" void APIENTRY glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {return (*pglGetTextureImage)(texture, level, format, type, bufSize, pixels);}
static void wrap_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat *params) = wrap_glGetTextureLevelParameterfv;
static void wrap_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) {return trampoline<void>("glGetTextureLevelParameterfv", "glGetTextureLevelParameterfvEXT", nullptr, nullptr, &pglGetTextureLevelParameterfv, texture, level, pname, params);}
extern "C" void APIENTRY glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) {return (*pglGetTextureLevelParameterfv)(texture, level, pname, params);}
static void wrap_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint *params) = wrap_glGetTextureLevelParameteriv;
static void wrap_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) {return trampoline<void>("glGetTextureLevelParameteriv", "glGetTextureLevelParameterivEXT", nullptr, nullptr, &pglGetTextureLevelParameteriv, texture, level, pname, params);}
extern "C" void APIENTRY glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) {return (*pglGetTextureLevelParameteriv)(texture, level, pname, params);}
static void wrap_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTextureParameterIiv)(GLuint texture, GLenum pname, GLint *params) = wrap_glGetTextureParameterIiv;
static void wrap_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) {return trampoline<void>("glGetTextureParameterIiv", "glGetTextureParameterIivEXT", nullptr, nullptr, &pglGetTextureParameterIiv, texture, pname, params);}
extern "C" void APIENTRY glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) {return (*pglGetTextureParameterIiv)(texture, pname, params);}
static void wrap_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint *params) = wrap_glGetTextureParameterIuiv;
static void wrap_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) {return trampoline<void>("glGetTextureParameterIuiv", "glGetTextureParameterIuivEXT", nullptr, nullptr, &pglGetTextureParameterIuiv, texture, pname, params);}
extern "C" void APIENTRY glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) {return (*pglGetTextureParameterIuiv)(texture, pname, params);}
static void wrap_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat *params) = wrap_glGetTextureParameterfv;
static void wrap_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) {return trampoline<void>("glGetTextureParameterfv", "glGetTextureParameterfvEXT", nullptr, nullptr, &pglGetTextureParameterfv, texture, pname, params);}
extern "C" void APIENTRY glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) {return (*pglGetTextureParameterfv)(texture, pname, params);}
static void wrap_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTextureParameteriv)(GLuint texture, GLenum pname, GLint *params) = wrap_glGetTextureParameteriv;
static void wrap_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) {return trampoline<void>("glGetTextureParameteriv", "glGetTextureParameterivEXT", nullptr, nullptr, &pglGetTextureParameteriv, texture, pname, params);}
extern "C" void APIENTRY glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) {return (*pglGetTextureParameteriv)(texture, pname, params);}
static GLuint64 wrap_glGetTextureSamplerHandle(GLuint texture, GLuint sampler);
static GLuint64 (APIENTRYP pglGetTextureSamplerHandle)(GLuint texture, GLuint sampler) = wrap_glGetTextureSamplerHandle;
static GLuint64 wrap_glGetTextureSamplerHandle(GLuint texture, GLuint sampler) {return trampoline<GLuint64>("glGetTextureSamplerHandle", "glGetTextureSamplerHandleARB", "glGetTextureSamplerHandleNV", nullptr, &pglGetTextureSamplerHandle, texture, sampler);}
extern "C" GLuint64 APIENTRY glGetTextureSamplerHandle(GLuint texture, GLuint sampler) {return (*pglGetTextureSamplerHandle)(texture, sampler);}
static void wrap_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
static void (APIENTRYP pglGetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) = wrap_glGetTextureSubImage;
static void wrap_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {return trampoline<void>("glGetTextureSubImage", nullptr, nullptr, nullptr, &pglGetTextureSubImage, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);}
extern "C" void APIENTRY glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {return (*pglGetTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);}
static void wrap_glGetTrackMatrixiv(GLenum target, GLuint address, GLenum pname, GLint *params);
static void (APIENTRYP pglGetTrackMatrixiv)(GLenum target, GLuint address, GLenum pname, GLint *params) = wrap_glGetTrackMatrixiv;
static void wrap_glGetTrackMatrixiv(GLenum target, GLuint address, GLenum pname, GLint *params) {return trampoline<void>("glGetTrackMatrixiv", "glGetTrackMatrixivNV", nullptr, nullptr, &pglGetTrackMatrixiv, target, address, pname, params);}
extern "C" void APIENTRY glGetTrackMatrixiv(GLenum target, GLuint address, GLenum pname, GLint *params) {return (*pglGetTrackMatrixiv)(target, address, pname, params);}
static void wrap_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
static void (APIENTRYP pglGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) = wrap_glGetTransformFeedbackVarying;
static void wrap_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {return trampoline<void>("glGetTransformFeedbackVarying", "glGetTransformFeedbackVaryingEXT", "glGetTransformFeedbackVaryingNV", nullptr, &pglGetTransformFeedbackVarying, program, index, bufSize, length, size, type, name);}
extern "C" void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {return (*pglGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);}
static void wrap_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
static void (APIENTRYP pglGetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) = wrap_glGetTransformFeedbacki64_v;
static void wrap_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {return trampoline<void>("glGetTransformFeedbacki64_v", nullptr, nullptr, nullptr, &pglGetTransformFeedbacki64_v, xfb, pname, index, param);}
extern "C" void APIENTRY glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {return (*pglGetTransformFeedbacki64_v)(xfb, pname, index, param);}
static void wrap_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
static void (APIENTRYP pglGetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint *param) = wrap_glGetTransformFeedbacki_v;
static void wrap_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) {return trampoline<void>("glGetTransformFeedbacki_v", nullptr, nullptr, nullptr, &pglGetTransformFeedbacki_v, xfb, pname, index, param);}
extern "C" void APIENTRY glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) {return (*pglGetTransformFeedbacki_v)(xfb, pname, index, param);}
static void wrap_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
static void (APIENTRYP pglGetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint *param) = wrap_glGetTransformFeedbackiv;
static void wrap_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) {return trampoline<void>("glGetTransformFeedbackiv", nullptr, nullptr, nullptr, &pglGetTransformFeedbackiv, xfb, pname, param);}
extern "C" void APIENTRY glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) {return (*pglGetTransformFeedbackiv)(xfb, pname, param);}
static GLuint wrap_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
static GLuint (APIENTRYP pglGetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName) = wrap_glGetUniformBlockIndex;
static GLuint wrap_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {return trampoline<GLuint>("glGetUniformBlockIndex", nullptr, nullptr, nullptr, &pglGetUniformBlockIndex, program, uniformBlockName);}
extern "C" GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {return (*pglGetUniformBlockIndex)(program, uniformBlockName);}
static GLint wrap_glGetUniformBufferSize(GLuint program, GLint location);
static GLint (APIENTRYP pglGetUniformBufferSize)(GLuint program, GLint location) = wrap_glGetUniformBufferSize;
static GLint wrap_glGetUniformBufferSize(GLuint program, GLint location) {return trampoline<GLint>("glGetUniformBufferSize", "glGetUniformBufferSizeEXT", nullptr, nullptr, &pglGetUniformBufferSize, program, location);}
extern "C" GLint APIENTRY glGetUniformBufferSize(GLuint program, GLint location) {return (*pglGetUniformBufferSize)(program, location);}
static void wrap_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
static void (APIENTRYP pglGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) = wrap_glGetUniformIndices;
static void wrap_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {return trampoline<void>("glGetUniformIndices", nullptr, nullptr, nullptr, &pglGetUniformIndices, program, uniformCount, uniformNames, uniformIndices);}
extern "C" void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {return (*pglGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);}
static GLint wrap_glGetUniformLocation(GLuint program, const GLchar *name);
static GLint (APIENTRYP pglGetUniformLocation)(GLuint program, const GLchar *name) = wrap_glGetUniformLocation;
static GLint wrap_glGetUniformLocation(GLuint program, const GLchar *name) {return trampoline<GLint>("glGetUniformLocation", "glGetUniformLocationARB", nullptr, nullptr, &pglGetUniformLocation, program, name);}
extern "C" GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar *name) {return (*pglGetUniformLocation)(program, name);}
static GLintptr wrap_glGetUniformOffset(GLuint program, GLint location);
static GLintptr (APIENTRYP pglGetUniformOffset)(GLuint program, GLint location) = wrap_glGetUniformOffset;
static GLintptr wrap_glGetUniformOffset(GLuint program, GLint location) {return trampoline<GLintptr>("glGetUniformOffset", "glGetUniformOffsetEXT", nullptr, nullptr, &pglGetUniformOffset, program, location);}
extern "C" GLintptr APIENTRY glGetUniformOffset(GLuint program, GLint location) {return (*pglGetUniformOffset)(program, location);}
static void wrap_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
static void (APIENTRYP pglGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint *params) = wrap_glGetUniformSubroutineuiv;
static void wrap_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {return trampoline<void>("glGetUniformSubroutineuiv", nullptr, nullptr, nullptr, &pglGetUniformSubroutineuiv, shadertype, location, params);}
extern "C" void APIENTRY glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {return (*pglGetUniformSubroutineuiv)(shadertype, location, params);}
static void wrap_glGetUniformdv(GLuint program, GLint location, GLdouble *params);
static void (APIENTRYP pglGetUniformdv)(GLuint program, GLint location, GLdouble *params) = wrap_glGetUniformdv;
static void wrap_glGetUniformdv(GLuint program, GLint location, GLdouble *params) {return trampoline<void>("glGetUniformdv", nullptr, nullptr, nullptr, &pglGetUniformdv, program, location, params);}
extern "C" void APIENTRY glGetUniformdv(GLuint program, GLint location, GLdouble *params) {return (*pglGetUniformdv)(program, location, params);}
static void wrap_glGetUniformfv(GLuint program, GLint location, GLfloat *params);
static void (APIENTRYP pglGetUniformfv)(GLuint program, GLint location, GLfloat *params) = wrap_glGetUniformfv;
static void wrap_glGetUniformfv(GLuint program, GLint location, GLfloat *params) {return trampoline<void>("glGetUniformfv", "glGetUniformfvARB", nullptr, nullptr, &pglGetUniformfv, program, location, params);}
extern "C" void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params) {return (*pglGetUniformfv)(program, location, params);}
static void wrap_glGetUniformi64v(GLuint program, GLint location, GLint64 *params);
static void (APIENTRYP pglGetUniformi64v)(GLuint program, GLint location, GLint64 *params) = wrap_glGetUniformi64v;
static void wrap_glGetUniformi64v(GLuint program, GLint location, GLint64 *params) {return trampoline<void>("glGetUniformi64v", "glGetUniformi64vARB", "glGetUniformi64vNV", nullptr, &pglGetUniformi64v, program, location, params);}
extern "C" void APIENTRY glGetUniformi64v(GLuint program, GLint location, GLint64 *params) {return (*pglGetUniformi64v)(program, location, params);}
static void wrap_glGetUniformiv(GLuint program, GLint location, GLint *params);
static void (APIENTRYP pglGetUniformiv)(GLuint program, GLint location, GLint *params) = wrap_glGetUniformiv;
static void wrap_glGetUniformiv(GLuint program, GLint location, GLint *params) {return trampoline<void>("glGetUniformiv", "glGetUniformivARB", nullptr, nullptr, &pglGetUniformiv, program, location, params);}
extern "C" void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params) {return (*pglGetUniformiv)(program, location, params);}
static void wrap_glGetUniformui64v(GLuint program, GLint location, GLuint64 *params);
static void (APIENTRYP pglGetUniformui64v)(GLuint program, GLint location, GLuint64 *params) = wrap_glGetUniformui64v;
static void wrap_glGetUniformui64v(GLuint program, GLint location, GLuint64 *params) {return trampoline<void>("glGetUniformui64v", "glGetUniformui64vARB", "glGetUniformui64vNV", nullptr, &pglGetUniformui64v, program, location, params);}
extern "C" void APIENTRY glGetUniformui64v(GLuint program, GLint location, GLuint64 *params) {return (*pglGetUniformui64v)(program, location, params);}
static void wrap_glGetUniformuiv(GLuint program, GLint location, GLuint *params);
static void (APIENTRYP pglGetUniformuiv)(GLuint program, GLint location, GLuint *params) = wrap_glGetUniformuiv;
static void wrap_glGetUniformuiv(GLuint program, GLint location, GLuint *params) {return trampoline<void>("glGetUniformuiv", "glGetUniformuivEXT", nullptr, nullptr, &pglGetUniformuiv, program, location, params);}
extern "C" void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params) {return (*pglGetUniformuiv)(program, location, params);}
static void wrap_glGetVariantArrayObjectfv(GLuint id, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetVariantArrayObjectfv)(GLuint id, GLenum pname, GLfloat *params) = wrap_glGetVariantArrayObjectfv;
static void wrap_glGetVariantArrayObjectfv(GLuint id, GLenum pname, GLfloat *params) {return trampoline<void>("glGetVariantArrayObjectfv", "glGetVariantArrayObjectfvATI", nullptr, nullptr, &pglGetVariantArrayObjectfv, id, pname, params);}
extern "C" void APIENTRY glGetVariantArrayObjectfv(GLuint id, GLenum pname, GLfloat *params) {return (*pglGetVariantArrayObjectfv)(id, pname, params);}
static void wrap_glGetVariantArrayObjectiv(GLuint id, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVariantArrayObjectiv)(GLuint id, GLenum pname, GLint *params) = wrap_glGetVariantArrayObjectiv;
static void wrap_glGetVariantArrayObjectiv(GLuint id, GLenum pname, GLint *params) {return trampoline<void>("glGetVariantArrayObjectiv", "glGetVariantArrayObjectivATI", nullptr, nullptr, &pglGetVariantArrayObjectiv, id, pname, params);}
extern "C" void APIENTRY glGetVariantArrayObjectiv(GLuint id, GLenum pname, GLint *params) {return (*pglGetVariantArrayObjectiv)(id, pname, params);}
static void wrap_glGetVariantBooleanv(GLuint id, GLenum value, GLboolean *data);
static void (APIENTRYP pglGetVariantBooleanv)(GLuint id, GLenum value, GLboolean *data) = wrap_glGetVariantBooleanv;
static void wrap_glGetVariantBooleanv(GLuint id, GLenum value, GLboolean *data) {return trampoline<void>("glGetVariantBooleanv", "glGetVariantBooleanvEXT", nullptr, nullptr, &pglGetVariantBooleanv, id, value, data);}
extern "C" void APIENTRY glGetVariantBooleanv(GLuint id, GLenum value, GLboolean *data) {return (*pglGetVariantBooleanv)(id, value, data);}
static void wrap_glGetVariantFloatv(GLuint id, GLenum value, GLfloat *data);
static void (APIENTRYP pglGetVariantFloatv)(GLuint id, GLenum value, GLfloat *data) = wrap_glGetVariantFloatv;
static void wrap_glGetVariantFloatv(GLuint id, GLenum value, GLfloat *data) {return trampoline<void>("glGetVariantFloatv", "glGetVariantFloatvEXT", nullptr, nullptr, &pglGetVariantFloatv, id, value, data);}
extern "C" void APIENTRY glGetVariantFloatv(GLuint id, GLenum value, GLfloat *data) {return (*pglGetVariantFloatv)(id, value, data);}
static void wrap_glGetVariantIntegerv(GLuint id, GLenum value, GLint *data);
static void (APIENTRYP pglGetVariantIntegerv)(GLuint id, GLenum value, GLint *data) = wrap_glGetVariantIntegerv;
static void wrap_glGetVariantIntegerv(GLuint id, GLenum value, GLint *data) {return trampoline<void>("glGetVariantIntegerv", "glGetVariantIntegervEXT", nullptr, nullptr, &pglGetVariantIntegerv, id, value, data);}
extern "C" void APIENTRY glGetVariantIntegerv(GLuint id, GLenum value, GLint *data) {return (*pglGetVariantIntegerv)(id, value, data);}
static void wrap_glGetVariantPointerv(GLuint id, GLenum value, void **data);
static void (APIENTRYP pglGetVariantPointerv)(GLuint id, GLenum value, void **data) = wrap_glGetVariantPointerv;
static void wrap_glGetVariantPointerv(GLuint id, GLenum value, void **data) {return trampoline<void>("glGetVariantPointerv", "glGetVariantPointervEXT", nullptr, nullptr, &pglGetVariantPointerv, id, value, data);}
extern "C" void APIENTRY glGetVariantPointerv(GLuint id, GLenum value, void **data) {return (*pglGetVariantPointerv)(id, value, data);}
static GLint wrap_glGetVaryingLocation(GLuint program, const GLchar *name);
static GLint (APIENTRYP pglGetVaryingLocation)(GLuint program, const GLchar *name) = wrap_glGetVaryingLocation;
static GLint wrap_glGetVaryingLocation(GLuint program, const GLchar *name) {return trampoline<GLint>("glGetVaryingLocation", "glGetVaryingLocationNV", nullptr, nullptr, &pglGetVaryingLocation, program, name);}
extern "C" GLint APIENTRY glGetVaryingLocation(GLuint program, const GLchar *name) {return (*pglGetVaryingLocation)(program, name);}
static void wrap_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
static void (APIENTRYP pglGetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) = wrap_glGetVertexArrayIndexed64iv;
static void wrap_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {return trampoline<void>("glGetVertexArrayIndexed64iv", nullptr, nullptr, nullptr, &pglGetVertexArrayIndexed64iv, vaobj, index, pname, param);}
extern "C" void APIENTRY glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {return (*pglGetVertexArrayIndexed64iv)(vaobj, index, pname, param);}
static void wrap_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
static void (APIENTRYP pglGetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint *param) = wrap_glGetVertexArrayIndexediv;
static void wrap_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {return trampoline<void>("glGetVertexArrayIndexediv", nullptr, nullptr, nullptr, &pglGetVertexArrayIndexediv, vaobj, index, pname, param);}
extern "C" void APIENTRY glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {return (*pglGetVertexArrayIndexediv)(vaobj, index, pname, param);}
static void wrap_glGetVertexArrayIntegeri_v(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
static void (APIENTRYP pglGetVertexArrayIntegeri_v)(GLuint vaobj, GLuint index, GLenum pname, GLint *param) = wrap_glGetVertexArrayIntegeri_v;
static void wrap_glGetVertexArrayIntegeri_v(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {return trampoline<void>("glGetVertexArrayIntegeri_v", "glGetVertexArrayIntegeri_vEXT", nullptr, nullptr, &pglGetVertexArrayIntegeri_v, vaobj, index, pname, param);}
extern "C" void APIENTRY glGetVertexArrayIntegeri_v(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {return (*pglGetVertexArrayIntegeri_v)(vaobj, index, pname, param);}
static void wrap_glGetVertexArrayIntegerv(GLuint vaobj, GLenum pname, GLint *param);
static void (APIENTRYP pglGetVertexArrayIntegerv)(GLuint vaobj, GLenum pname, GLint *param) = wrap_glGetVertexArrayIntegerv;
static void wrap_glGetVertexArrayIntegerv(GLuint vaobj, GLenum pname, GLint *param) {return trampoline<void>("glGetVertexArrayIntegerv", "glGetVertexArrayIntegervEXT", nullptr, nullptr, &pglGetVertexArrayIntegerv, vaobj, pname, param);}
extern "C" void APIENTRY glGetVertexArrayIntegerv(GLuint vaobj, GLenum pname, GLint *param) {return (*pglGetVertexArrayIntegerv)(vaobj, pname, param);}
static void wrap_glGetVertexArrayPointeri_v(GLuint vaobj, GLuint index, GLenum pname, void **param);
static void (APIENTRYP pglGetVertexArrayPointeri_v)(GLuint vaobj, GLuint index, GLenum pname, void **param) = wrap_glGetVertexArrayPointeri_v;
static void wrap_glGetVertexArrayPointeri_v(GLuint vaobj, GLuint index, GLenum pname, void **param) {return trampoline<void>("glGetVertexArrayPointeri_v", "glGetVertexArrayPointeri_vEXT", nullptr, nullptr, &pglGetVertexArrayPointeri_v, vaobj, index, pname, param);}
extern "C" void APIENTRY glGetVertexArrayPointeri_v(GLuint vaobj, GLuint index, GLenum pname, void **param) {return (*pglGetVertexArrayPointeri_v)(vaobj, index, pname, param);}
static void wrap_glGetVertexArrayPointerv(GLuint vaobj, GLenum pname, void **param);
static void (APIENTRYP pglGetVertexArrayPointerv)(GLuint vaobj, GLenum pname, void **param) = wrap_glGetVertexArrayPointerv;
static void wrap_glGetVertexArrayPointerv(GLuint vaobj, GLenum pname, void **param) {return trampoline<void>("glGetVertexArrayPointerv", "glGetVertexArrayPointervEXT", nullptr, nullptr, &pglGetVertexArrayPointerv, vaobj, pname, param);}
extern "C" void APIENTRY glGetVertexArrayPointerv(GLuint vaobj, GLenum pname, void **param) {return (*pglGetVertexArrayPointerv)(vaobj, pname, param);}
static void wrap_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
static void (APIENTRYP pglGetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint *param) = wrap_glGetVertexArrayiv;
static void wrap_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) {return trampoline<void>("glGetVertexArrayiv", nullptr, nullptr, nullptr, &pglGetVertexArrayiv, vaobj, pname, param);}
extern "C" void APIENTRY glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) {return (*pglGetVertexArrayiv)(vaobj, pname, param);}
static void wrap_glGetVertexAttribArrayObjectfv(GLuint index, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetVertexAttribArrayObjectfv)(GLuint index, GLenum pname, GLfloat *params) = wrap_glGetVertexAttribArrayObjectfv;
static void wrap_glGetVertexAttribArrayObjectfv(GLuint index, GLenum pname, GLfloat *params) {return trampoline<void>("glGetVertexAttribArrayObjectfv", "glGetVertexAttribArrayObjectfvATI", nullptr, nullptr, &pglGetVertexAttribArrayObjectfv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribArrayObjectfv(GLuint index, GLenum pname, GLfloat *params) {return (*pglGetVertexAttribArrayObjectfv)(index, pname, params);}
static void wrap_glGetVertexAttribArrayObjectiv(GLuint index, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVertexAttribArrayObjectiv)(GLuint index, GLenum pname, GLint *params) = wrap_glGetVertexAttribArrayObjectiv;
static void wrap_glGetVertexAttribArrayObjectiv(GLuint index, GLenum pname, GLint *params) {return trampoline<void>("glGetVertexAttribArrayObjectiv", "glGetVertexAttribArrayObjectivATI", nullptr, nullptr, &pglGetVertexAttribArrayObjectiv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribArrayObjectiv(GLuint index, GLenum pname, GLint *params) {return (*pglGetVertexAttribArrayObjectiv)(index, pname, params);}
static void wrap_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params) = wrap_glGetVertexAttribIiv;
static void wrap_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {return trampoline<void>("glGetVertexAttribIiv", "glGetVertexAttribIivEXT", nullptr, nullptr, &pglGetVertexAttribIiv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {return (*pglGetVertexAttribIiv)(index, pname, params);}
static void wrap_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params) = wrap_glGetVertexAttribIuiv;
static void wrap_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {return trampoline<void>("glGetVertexAttribIuiv", "glGetVertexAttribIuivEXT", nullptr, nullptr, &pglGetVertexAttribIuiv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {return (*pglGetVertexAttribIuiv)(index, pname, params);}
static void wrap_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble *params) = wrap_glGetVertexAttribLdv;
static void wrap_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {return trampoline<void>("glGetVertexAttribLdv", "glGetVertexAttribLdvEXT", nullptr, nullptr, &pglGetVertexAttribLdv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {return (*pglGetVertexAttribLdv)(index, pname, params);}
static void wrap_glGetVertexAttribLi64v(GLuint index, GLenum pname, GLint64EXT *params);
static void (APIENTRYP pglGetVertexAttribLi64v)(GLuint index, GLenum pname, GLint64EXT *params) = wrap_glGetVertexAttribLi64v;
static void wrap_glGetVertexAttribLi64v(GLuint index, GLenum pname, GLint64EXT *params) {return trampoline<void>("glGetVertexAttribLi64v", "glGetVertexAttribLi64vNV", nullptr, nullptr, &pglGetVertexAttribLi64v, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribLi64v(GLuint index, GLenum pname, GLint64EXT *params) {return (*pglGetVertexAttribLi64v)(index, pname, params);}
static void wrap_glGetVertexAttribLui64v(GLuint index, GLenum pname, GLuint64EXT *params);
static void (APIENTRYP pglGetVertexAttribLui64v)(GLuint index, GLenum pname, GLuint64EXT *params) = wrap_glGetVertexAttribLui64v;
static void wrap_glGetVertexAttribLui64v(GLuint index, GLenum pname, GLuint64EXT *params) {return trampoline<void>("glGetVertexAttribLui64v", "glGetVertexAttribLui64vARB", "glGetVertexAttribLui64vNV", nullptr, &pglGetVertexAttribLui64v, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribLui64v(GLuint index, GLenum pname, GLuint64EXT *params) {return (*pglGetVertexAttribLui64v)(index, pname, params);}
static void wrap_glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
static void (APIENTRYP pglGetVertexAttribPointerv)(GLuint index, GLenum pname, void **pointer) = wrap_glGetVertexAttribPointerv;
static void wrap_glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {return trampoline<void>("glGetVertexAttribPointerv", "glGetVertexAttribPointervARB", "glGetVertexAttribPointervNV", nullptr, &pglGetVertexAttribPointerv, index, pname, pointer);}
extern "C" void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {return (*pglGetVertexAttribPointerv)(index, pname, pointer);}
static void wrap_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble *params) = wrap_glGetVertexAttribdv;
static void wrap_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {return trampoline<void>("glGetVertexAttribdv", "glGetVertexAttribdvARB", "glGetVertexAttribdvNV", nullptr, &pglGetVertexAttribdv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {return (*pglGetVertexAttribdv)(index, pname, params);}
static void wrap_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params) = wrap_glGetVertexAttribfv;
static void wrap_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {return trampoline<void>("glGetVertexAttribfv", "glGetVertexAttribfvARB", "glGetVertexAttribfvNV", nullptr, &pglGetVertexAttribfv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {return (*pglGetVertexAttribfv)(index, pname, params);}
static void wrap_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVertexAttribiv)(GLuint index, GLenum pname, GLint *params) = wrap_glGetVertexAttribiv;
static void wrap_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {return trampoline<void>("glGetVertexAttribiv", "glGetVertexAttribivARB", "glGetVertexAttribivNV", nullptr, &pglGetVertexAttribiv, index, pname, params);}
extern "C" void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {return (*pglGetVertexAttribiv)(index, pname, params);}
static void wrap_glGetVideoCaptureStreamdv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
static void (APIENTRYP pglGetVideoCaptureStreamdv)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) = wrap_glGetVideoCaptureStreamdv;
static void wrap_glGetVideoCaptureStreamdv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) {return trampoline<void>("glGetVideoCaptureStreamdv", "glGetVideoCaptureStreamdvNV", nullptr, nullptr, &pglGetVideoCaptureStreamdv, video_capture_slot, stream, pname, params);}
extern "C" void APIENTRY glGetVideoCaptureStreamdv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) {return (*pglGetVideoCaptureStreamdv)(video_capture_slot, stream, pname, params);}
static void wrap_glGetVideoCaptureStreamfv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
static void (APIENTRYP pglGetVideoCaptureStreamfv)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) = wrap_glGetVideoCaptureStreamfv;
static void wrap_glGetVideoCaptureStreamfv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) {return trampoline<void>("glGetVideoCaptureStreamfv", "glGetVideoCaptureStreamfvNV", nullptr, nullptr, &pglGetVideoCaptureStreamfv, video_capture_slot, stream, pname, params);}
extern "C" void APIENTRY glGetVideoCaptureStreamfv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) {return (*pglGetVideoCaptureStreamfv)(video_capture_slot, stream, pname, params);}
static void wrap_glGetVideoCaptureStreamiv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVideoCaptureStreamiv)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) = wrap_glGetVideoCaptureStreamiv;
static void wrap_glGetVideoCaptureStreamiv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) {return trampoline<void>("glGetVideoCaptureStreamiv", "glGetVideoCaptureStreamivNV", nullptr, nullptr, &pglGetVideoCaptureStreamiv, video_capture_slot, stream, pname, params);}
extern "C" void APIENTRY glGetVideoCaptureStreamiv(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) {return (*pglGetVideoCaptureStreamiv)(video_capture_slot, stream, pname, params);}
static void wrap_glGetVideoCaptureiv(GLuint video_capture_slot, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVideoCaptureiv)(GLuint video_capture_slot, GLenum pname, GLint *params) = wrap_glGetVideoCaptureiv;
static void wrap_glGetVideoCaptureiv(GLuint video_capture_slot, GLenum pname, GLint *params) {return trampoline<void>("glGetVideoCaptureiv", "glGetVideoCaptureivNV", nullptr, nullptr, &pglGetVideoCaptureiv, video_capture_slot, pname, params);}
extern "C" void APIENTRY glGetVideoCaptureiv(GLuint video_capture_slot, GLenum pname, GLint *params) {return (*pglGetVideoCaptureiv)(video_capture_slot, pname, params);}
static void wrap_glGetVideoi64v(GLuint video_slot, GLenum pname, GLint64EXT *params);
static void (APIENTRYP pglGetVideoi64v)(GLuint video_slot, GLenum pname, GLint64EXT *params) = wrap_glGetVideoi64v;
static void wrap_glGetVideoi64v(GLuint video_slot, GLenum pname, GLint64EXT *params) {return trampoline<void>("glGetVideoi64v", "glGetVideoi64vNV", nullptr, nullptr, &pglGetVideoi64v, video_slot, pname, params);}
extern "C" void APIENTRY glGetVideoi64v(GLuint video_slot, GLenum pname, GLint64EXT *params) {return (*pglGetVideoi64v)(video_slot, pname, params);}
static void wrap_glGetVideoiv(GLuint video_slot, GLenum pname, GLint *params);
static void (APIENTRYP pglGetVideoiv)(GLuint video_slot, GLenum pname, GLint *params) = wrap_glGetVideoiv;
static void wrap_glGetVideoiv(GLuint video_slot, GLenum pname, GLint *params) {return trampoline<void>("glGetVideoiv", "glGetVideoivNV", nullptr, nullptr, &pglGetVideoiv, video_slot, pname, params);}
extern "C" void APIENTRY glGetVideoiv(GLuint video_slot, GLenum pname, GLint *params) {return (*pglGetVideoiv)(video_slot, pname, params);}
static void wrap_glGetVideoui64v(GLuint video_slot, GLenum pname, GLuint64EXT *params);
static void (APIENTRYP pglGetVideoui64v)(GLuint video_slot, GLenum pname, GLuint64EXT *params) = wrap_glGetVideoui64v;
static void wrap_glGetVideoui64v(GLuint video_slot, GLenum pname, GLuint64EXT *params) {return trampoline<void>("glGetVideoui64v", "glGetVideoui64vNV", nullptr, nullptr, &pglGetVideoui64v, video_slot, pname, params);}
extern "C" void APIENTRY glGetVideoui64v(GLuint video_slot, GLenum pname, GLuint64EXT *params) {return (*pglGetVideoui64v)(video_slot, pname, params);}
static void wrap_glGetVideouiv(GLuint video_slot, GLenum pname, GLuint *params);
static void (APIENTRYP pglGetVideouiv)(GLuint video_slot, GLenum pname, GLuint *params) = wrap_glGetVideouiv;
static void wrap_glGetVideouiv(GLuint video_slot, GLenum pname, GLuint *params) {return trampoline<void>("glGetVideouiv", "glGetVideouivNV", nullptr, nullptr, &pglGetVideouiv, video_slot, pname, params);}
extern "C" void APIENTRY glGetVideouiv(GLuint video_slot, GLenum pname, GLuint *params) {return (*pglGetVideouiv)(video_slot, pname, params);}
static void wrap_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
static void (APIENTRYP pglGetnColorTable)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) = wrap_glGetnColorTable;
static void wrap_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {return trampoline<void>("glGetnColorTable", "glGetnColorTableARB", nullptr, nullptr, &pglGetnColorTable, target, format, type, bufSize, table);}
extern "C" void APIENTRY glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {return (*pglGetnColorTable)(target, format, type, bufSize, table);}
static void wrap_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
static void (APIENTRYP pglGetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void *pixels) = wrap_glGetnCompressedTexImage;
static void wrap_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels) {return trampoline<void>("glGetnCompressedTexImage", "glGetnCompressedTexImageARB", nullptr, nullptr, &pglGetnCompressedTexImage, target, lod, bufSize, pixels);}
extern "C" void APIENTRY glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels) {return (*pglGetnCompressedTexImage)(target, lod, bufSize, pixels);}
static void wrap_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
static void (APIENTRYP pglGetnConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) = wrap_glGetnConvolutionFilter;
static void wrap_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {return trampoline<void>("glGetnConvolutionFilter", "glGetnConvolutionFilterARB", nullptr, nullptr, &pglGetnConvolutionFilter, target, format, type, bufSize, image);}
extern "C" void APIENTRY glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {return (*pglGetnConvolutionFilter)(target, format, type, bufSize, image);}
static void wrap_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
static void (APIENTRYP pglGetnHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) = wrap_glGetnHistogram;
static void wrap_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {return trampoline<void>("glGetnHistogram", "glGetnHistogramARB", nullptr, nullptr, &pglGetnHistogram, target, reset, format, type, bufSize, values);}
extern "C" void APIENTRY glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {return (*pglGetnHistogram)(target, reset, format, type, bufSize, values);}
static void wrap_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
static void (APIENTRYP pglGetnMapdv)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) = wrap_glGetnMapdv;
static void wrap_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {return trampoline<void>("glGetnMapdv", "glGetnMapdvARB", nullptr, nullptr, &pglGetnMapdv, target, query, bufSize, v);}
extern "C" void APIENTRY glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {return (*pglGetnMapdv)(target, query, bufSize, v);}
static void wrap_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
static void (APIENTRYP pglGetnMapfv)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) = wrap_glGetnMapfv;
static void wrap_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {return trampoline<void>("glGetnMapfv", "glGetnMapfvARB", nullptr, nullptr, &pglGetnMapfv, target, query, bufSize, v);}
extern "C" void APIENTRY glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {return (*pglGetnMapfv)(target, query, bufSize, v);}
static void wrap_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
static void (APIENTRYP pglGetnMapiv)(GLenum target, GLenum query, GLsizei bufSize, GLint *v) = wrap_glGetnMapiv;
static void wrap_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v) {return trampoline<void>("glGetnMapiv", "glGetnMapivARB", nullptr, nullptr, &pglGetnMapiv, target, query, bufSize, v);}
extern "C" void APIENTRY glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v) {return (*pglGetnMapiv)(target, query, bufSize, v);}
static void wrap_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
static void (APIENTRYP pglGetnMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) = wrap_glGetnMinmax;
static void wrap_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {return trampoline<void>("glGetnMinmax", "glGetnMinmaxARB", nullptr, nullptr, &pglGetnMinmax, target, reset, format, type, bufSize, values);}
extern "C" void APIENTRY glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {return (*pglGetnMinmax)(target, reset, format, type, bufSize, values);}
static void wrap_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values);
static void (APIENTRYP pglGetnPixelMapfv)(GLenum map, GLsizei bufSize, GLfloat *values) = wrap_glGetnPixelMapfv;
static void wrap_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values) {return trampoline<void>("glGetnPixelMapfv", "glGetnPixelMapfvARB", nullptr, nullptr, &pglGetnPixelMapfv, map, bufSize, values);}
extern "C" void APIENTRY glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values) {return (*pglGetnPixelMapfv)(map, bufSize, values);}
static void wrap_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values);
static void (APIENTRYP pglGetnPixelMapuiv)(GLenum map, GLsizei bufSize, GLuint *values) = wrap_glGetnPixelMapuiv;
static void wrap_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values) {return trampoline<void>("glGetnPixelMapuiv", "glGetnPixelMapuivARB", nullptr, nullptr, &pglGetnPixelMapuiv, map, bufSize, values);}
extern "C" void APIENTRY glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values) {return (*pglGetnPixelMapuiv)(map, bufSize, values);}
static void wrap_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values);
static void (APIENTRYP pglGetnPixelMapusv)(GLenum map, GLsizei bufSize, GLushort *values) = wrap_glGetnPixelMapusv;
static void wrap_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values) {return trampoline<void>("glGetnPixelMapusv", "glGetnPixelMapusvARB", nullptr, nullptr, &pglGetnPixelMapusv, map, bufSize, values);}
extern "C" void APIENTRY glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values) {return (*pglGetnPixelMapusv)(map, bufSize, values);}
static void wrap_glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern);
static void (APIENTRYP pglGetnPolygonStipple)(GLsizei bufSize, GLubyte *pattern) = wrap_glGetnPolygonStipple;
static void wrap_glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern) {return trampoline<void>("glGetnPolygonStipple", "glGetnPolygonStippleARB", nullptr, nullptr, &pglGetnPolygonStipple, bufSize, pattern);}
extern "C" void APIENTRY glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern) {return (*pglGetnPolygonStipple)(bufSize, pattern);}
static void wrap_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
static void (APIENTRYP pglGetnSeparableFilter)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) = wrap_glGetnSeparableFilter;
static void wrap_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {return trampoline<void>("glGetnSeparableFilter", "glGetnSeparableFilterARB", nullptr, nullptr, &pglGetnSeparableFilter, target, format, type, rowBufSize, row, columnBufSize, column, span);}
extern "C" void APIENTRY glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {return (*pglGetnSeparableFilter)(target, format, type, rowBufSize, row, columnBufSize, column, span);}
static void wrap_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
static void (APIENTRYP pglGetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) = wrap_glGetnTexImage;
static void wrap_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {return trampoline<void>("glGetnTexImage", "glGetnTexImageARB", nullptr, nullptr, &pglGetnTexImage, target, level, format, type, bufSize, pixels);}
extern "C" void APIENTRY glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {return (*pglGetnTexImage)(target, level, format, type, bufSize, pixels);}
static void wrap_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
static void (APIENTRYP pglGetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) = wrap_glGetnUniformdv;
static void wrap_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {return trampoline<void>("glGetnUniformdv", "glGetnUniformdvARB", nullptr, nullptr, &pglGetnUniformdv, program, location, bufSize, params);}
extern "C" void APIENTRY glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {return (*pglGetnUniformdv)(program, location, bufSize, params);}
static void wrap_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
static void (APIENTRYP pglGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) = wrap_glGetnUniformfv;
static void wrap_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {return trampoline<void>("glGetnUniformfv", "glGetnUniformfvARB", nullptr, nullptr, &pglGetnUniformfv, program, location, bufSize, params);}
extern "C" void APIENTRY glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {return (*pglGetnUniformfv)(program, location, bufSize, params);}
static void wrap_glGetnUniformi64v(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
static void (APIENTRYP pglGetnUniformi64v)(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) = wrap_glGetnUniformi64v;
static void wrap_glGetnUniformi64v(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) {return trampoline<void>("glGetnUniformi64v", "glGetnUniformi64vARB", nullptr, nullptr, &pglGetnUniformi64v, program, location, bufSize, params);}
extern "C" void APIENTRY glGetnUniformi64v(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) {return (*pglGetnUniformi64v)(program, location, bufSize, params);}
static void wrap_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
static void (APIENTRYP pglGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint *params) = wrap_glGetnUniformiv;
static void wrap_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) {return trampoline<void>("glGetnUniformiv", "glGetnUniformivARB", nullptr, nullptr, &pglGetnUniformiv, program, location, bufSize, params);}
extern "C" void APIENTRY glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) {return (*pglGetnUniformiv)(program, location, bufSize, params);}
static void wrap_glGetnUniformui64v(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
static void (APIENTRYP pglGetnUniformui64v)(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) = wrap_glGetnUniformui64v;
static void wrap_glGetnUniformui64v(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) {return trampoline<void>("glGetnUniformui64v", "glGetnUniformui64vARB", nullptr, nullptr, &pglGetnUniformui64v, program, location, bufSize, params);}
extern "C" void APIENTRY glGetnUniformui64v(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) {return (*pglGetnUniformui64v)(program, location, bufSize, params);}
static void wrap_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
static void (APIENTRYP pglGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint *params) = wrap_glGetnUniformuiv;
static void wrap_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {return trampoline<void>("glGetnUniformuiv", "glGetnUniformuivARB", nullptr, nullptr, &pglGetnUniformuiv, program, location, bufSize, params);}
extern "C" void APIENTRY glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {return (*pglGetnUniformuiv)(program, location, bufSize, params);}
static void wrap_glGlobalAlphaFactorb(GLbyte factor);
static void (APIENTRYP pglGlobalAlphaFactorb)(GLbyte factor) = wrap_glGlobalAlphaFactorb;
static void wrap_glGlobalAlphaFactorb(GLbyte factor) {return trampoline<void>("glGlobalAlphaFactorb", "glGlobalAlphaFactorbSUN", nullptr, nullptr, &pglGlobalAlphaFactorb, factor);}
extern "C" void APIENTRY glGlobalAlphaFactorb(GLbyte factor) {return (*pglGlobalAlphaFactorb)(factor);}
static void wrap_glGlobalAlphaFactord(GLdouble factor);
static void (APIENTRYP pglGlobalAlphaFactord)(GLdouble factor) = wrap_glGlobalAlphaFactord;
static void wrap_glGlobalAlphaFactord(GLdouble factor) {return trampoline<void>("glGlobalAlphaFactord", "glGlobalAlphaFactordSUN", nullptr, nullptr, &pglGlobalAlphaFactord, factor);}
extern "C" void APIENTRY glGlobalAlphaFactord(GLdouble factor) {return (*pglGlobalAlphaFactord)(factor);}
static void wrap_glGlobalAlphaFactorf(GLfloat factor);
static void (APIENTRYP pglGlobalAlphaFactorf)(GLfloat factor) = wrap_glGlobalAlphaFactorf;
static void wrap_glGlobalAlphaFactorf(GLfloat factor) {return trampoline<void>("glGlobalAlphaFactorf", "glGlobalAlphaFactorfSUN", nullptr, nullptr, &pglGlobalAlphaFactorf, factor);}
extern "C" void APIENTRY glGlobalAlphaFactorf(GLfloat factor) {return (*pglGlobalAlphaFactorf)(factor);}
static void wrap_glGlobalAlphaFactori(GLint factor);
static void (APIENTRYP pglGlobalAlphaFactori)(GLint factor) = wrap_glGlobalAlphaFactori;
static void wrap_glGlobalAlphaFactori(GLint factor) {return trampoline<void>("glGlobalAlphaFactori", "glGlobalAlphaFactoriSUN", nullptr, nullptr, &pglGlobalAlphaFactori, factor);}
extern "C" void APIENTRY glGlobalAlphaFactori(GLint factor) {return (*pglGlobalAlphaFactori)(factor);}
static void wrap_glGlobalAlphaFactors(GLshort factor);
static void (APIENTRYP pglGlobalAlphaFactors)(GLshort factor) = wrap_glGlobalAlphaFactors;
static void wrap_glGlobalAlphaFactors(GLshort factor) {return trampoline<void>("glGlobalAlphaFactors", "glGlobalAlphaFactorsSUN", nullptr, nullptr, &pglGlobalAlphaFactors, factor);}
extern "C" void APIENTRY glGlobalAlphaFactors(GLshort factor) {return (*pglGlobalAlphaFactors)(factor);}
static void wrap_glGlobalAlphaFactorub(GLubyte factor);
static void (APIENTRYP pglGlobalAlphaFactorub)(GLubyte factor) = wrap_glGlobalAlphaFactorub;
static void wrap_glGlobalAlphaFactorub(GLubyte factor) {return trampoline<void>("glGlobalAlphaFactorub", "glGlobalAlphaFactorubSUN", nullptr, nullptr, &pglGlobalAlphaFactorub, factor);}
extern "C" void APIENTRY glGlobalAlphaFactorub(GLubyte factor) {return (*pglGlobalAlphaFactorub)(factor);}
static void wrap_glGlobalAlphaFactorui(GLuint factor);
static void (APIENTRYP pglGlobalAlphaFactorui)(GLuint factor) = wrap_glGlobalAlphaFactorui;
static void wrap_glGlobalAlphaFactorui(GLuint factor) {return trampoline<void>("glGlobalAlphaFactorui", "glGlobalAlphaFactoruiSUN", nullptr, nullptr, &pglGlobalAlphaFactorui, factor);}
extern "C" void APIENTRY glGlobalAlphaFactorui(GLuint factor) {return (*pglGlobalAlphaFactorui)(factor);}
static void wrap_glGlobalAlphaFactorus(GLushort factor);
static void (APIENTRYP pglGlobalAlphaFactorus)(GLushort factor) = wrap_glGlobalAlphaFactorus;
static void wrap_glGlobalAlphaFactorus(GLushort factor) {return trampoline<void>("glGlobalAlphaFactorus", "glGlobalAlphaFactorusSUN", nullptr, nullptr, &pglGlobalAlphaFactorus, factor);}
extern "C" void APIENTRY glGlobalAlphaFactorus(GLushort factor) {return (*pglGlobalAlphaFactorus)(factor);}
static void wrap_glHint(GLenum target, GLenum mode);
static void (APIENTRYP pglHint)(GLenum target, GLenum mode) = wrap_glHint;
static void wrap_glHint(GLenum target, GLenum mode) {return trampoline<void>("glHint", "glHintPGI", nullptr, nullptr, &pglHint, target, mode);}
extern "C" void APIENTRY glHint(GLenum target, GLenum mode) {return (*pglHint)(target, mode);}
static void wrap_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
static void (APIENTRYP pglHistogram)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) = wrap_glHistogram;
static void wrap_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {return trampoline<void>("glHistogram", "glHistogramEXT", nullptr, nullptr, &pglHistogram, target, width, internalformat, sink);}
extern "C" void APIENTRY glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {return (*pglHistogram)(target, width, internalformat, sink);}
static void wrap_glIglooInterface(GLenum pname, const void *params);
static void (APIENTRYP pglIglooInterface)(GLenum pname, const void *params) = wrap_glIglooInterface;
static void wrap_glIglooInterface(GLenum pname, const void *params) {return trampoline<void>("glIglooInterface", "glIglooInterfaceSGIX", nullptr, nullptr, &pglIglooInterface, pname, params);}
extern "C" void APIENTRY glIglooInterface(GLenum pname, const void *params) {return (*pglIglooInterface)(pname, params);}
static void wrap_glImageTransformParameterf(GLenum target, GLenum pname, GLfloat param);
static void (APIENTRYP pglImageTransformParameterf)(GLenum target, GLenum pname, GLfloat param) = wrap_glImageTransformParameterf;
static void wrap_glImageTransformParameterf(GLenum target, GLenum pname, GLfloat param) {return trampoline<void>("glImageTransformParameterf", "glImageTransformParameterfHP", nullptr, nullptr, &pglImageTransformParameterf, target, pname, param);}
extern "C" void APIENTRY glImageTransformParameterf(GLenum target, GLenum pname, GLfloat param) {return (*pglImageTransformParameterf)(target, pname, param);}
static void wrap_glImageTransformParameterfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglImageTransformParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glImageTransformParameterfv;
static void wrap_glImageTransformParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glImageTransformParameterfv", "glImageTransformParameterfvHP", nullptr, nullptr, &pglImageTransformParameterfv, target, pname, params);}
extern "C" void APIENTRY glImageTransformParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglImageTransformParameterfv)(target, pname, params);}
static void wrap_glImageTransformParameteri(GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglImageTransformParameteri)(GLenum target, GLenum pname, GLint param) = wrap_glImageTransformParameteri;
static void wrap_glImageTransformParameteri(GLenum target, GLenum pname, GLint param) {return trampoline<void>("glImageTransformParameteri", "glImageTransformParameteriHP", nullptr, nullptr, &pglImageTransformParameteri, target, pname, param);}
extern "C" void APIENTRY glImageTransformParameteri(GLenum target, GLenum pname, GLint param) {return (*pglImageTransformParameteri)(target, pname, param);}
static void wrap_glImageTransformParameteriv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglImageTransformParameteriv)(GLenum target, GLenum pname, const GLint *params) = wrap_glImageTransformParameteriv;
static void wrap_glImageTransformParameteriv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glImageTransformParameteriv", "glImageTransformParameterivHP", nullptr, nullptr, &pglImageTransformParameteriv, target, pname, params);}
extern "C" void APIENTRY glImageTransformParameteriv(GLenum target, GLenum pname, const GLint *params) {return (*pglImageTransformParameteriv)(target, pname, params);}
static GLsync wrap_glImportSync(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
static GLsync (APIENTRYP pglImportSync)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) = wrap_glImportSync;
static GLsync wrap_glImportSync(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {return trampoline<GLsync>("glImportSync", "glImportSyncEXT", nullptr, nullptr, &pglImportSync, external_sync_type, external_sync, flags);}
extern "C" GLsync APIENTRY glImportSync(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {return (*pglImportSync)(external_sync_type, external_sync, flags);}
static void wrap_glIndexFormat(GLenum type, GLsizei stride);
static void (APIENTRYP pglIndexFormat)(GLenum type, GLsizei stride) = wrap_glIndexFormat;
static void wrap_glIndexFormat(GLenum type, GLsizei stride) {return trampoline<void>("glIndexFormat", "glIndexFormatNV", nullptr, nullptr, &pglIndexFormat, type, stride);}
extern "C" void APIENTRY glIndexFormat(GLenum type, GLsizei stride) {return (*pglIndexFormat)(type, stride);}
static void wrap_glIndexFunc(GLenum func, GLclampf ref);
static void (APIENTRYP pglIndexFunc)(GLenum func, GLclampf ref) = wrap_glIndexFunc;
static void wrap_glIndexFunc(GLenum func, GLclampf ref) {return trampoline<void>("glIndexFunc", "glIndexFuncEXT", nullptr, nullptr, &pglIndexFunc, func, ref);}
extern "C" void APIENTRY glIndexFunc(GLenum func, GLclampf ref) {return (*pglIndexFunc)(func, ref);}
static void wrap_glIndexMask(GLuint mask);
static void (APIENTRYP pglIndexMask)(GLuint mask) = wrap_glIndexMask;
static void wrap_glIndexMask(GLuint mask) {return trampoline<void>("glIndexMask", nullptr, nullptr, nullptr, &pglIndexMask, mask);}
extern "C" void APIENTRY glIndexMask(GLuint mask) {return (*pglIndexMask)(mask);}
static void wrap_glIndexMaterial(GLenum face, GLenum mode);
static void (APIENTRYP pglIndexMaterial)(GLenum face, GLenum mode) = wrap_glIndexMaterial;
static void wrap_glIndexMaterial(GLenum face, GLenum mode) {return trampoline<void>("glIndexMaterial", "glIndexMaterialEXT", nullptr, nullptr, &pglIndexMaterial, face, mode);}
extern "C" void APIENTRY glIndexMaterial(GLenum face, GLenum mode) {return (*pglIndexMaterial)(face, mode);}
static void wrap_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
static void (APIENTRYP pglIndexPointer)(GLenum type, GLsizei stride, const GLvoid *ptr) = wrap_glIndexPointer;
static void wrap_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr) {return trampoline<void>("glIndexPointer", "glIndexPointerEXT", nullptr, nullptr, &pglIndexPointer, type, stride, ptr);}
extern "C" void APIENTRY glIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr) {return (*pglIndexPointer)(type, stride, ptr);}
static void wrap_glIndexPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglIndexPointerList)(GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glIndexPointerList;
static void wrap_glIndexPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glIndexPointerList", "glIndexPointerListIBM", nullptr, nullptr, &pglIndexPointerList, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glIndexPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglIndexPointerList)(type, stride, pointer, ptrstride);}
static void wrap_glIndexd(GLdouble c);
static void (APIENTRYP pglIndexd)(GLdouble c) = wrap_glIndexd;
static void wrap_glIndexd(GLdouble c) {return trampoline<void>("glIndexd", nullptr, nullptr, nullptr, &pglIndexd, c);}
extern "C" void APIENTRY glIndexd(GLdouble c) {return (*pglIndexd)(c);}
static void wrap_glIndexdv(const GLdouble *c);
static void (APIENTRYP pglIndexdv)(const GLdouble *c) = wrap_glIndexdv;
static void wrap_glIndexdv(const GLdouble *c) {return trampoline<void>("glIndexdv", nullptr, nullptr, nullptr, &pglIndexdv, c);}
extern "C" void APIENTRY glIndexdv(const GLdouble *c) {return (*pglIndexdv)(c);}
static void wrap_glIndexf(GLfloat c);
static void (APIENTRYP pglIndexf)(GLfloat c) = wrap_glIndexf;
static void wrap_glIndexf(GLfloat c) {return trampoline<void>("glIndexf", nullptr, nullptr, nullptr, &pglIndexf, c);}
extern "C" void APIENTRY glIndexf(GLfloat c) {return (*pglIndexf)(c);}
static void wrap_glIndexfv(const GLfloat *c);
static void (APIENTRYP pglIndexfv)(const GLfloat *c) = wrap_glIndexfv;
static void wrap_glIndexfv(const GLfloat *c) {return trampoline<void>("glIndexfv", nullptr, nullptr, nullptr, &pglIndexfv, c);}
extern "C" void APIENTRY glIndexfv(const GLfloat *c) {return (*pglIndexfv)(c);}
static void wrap_glIndexi(GLint c);
static void (APIENTRYP pglIndexi)(GLint c) = wrap_glIndexi;
static void wrap_glIndexi(GLint c) {return trampoline<void>("glIndexi", nullptr, nullptr, nullptr, &pglIndexi, c);}
extern "C" void APIENTRY glIndexi(GLint c) {return (*pglIndexi)(c);}
static void wrap_glIndexiv(const GLint *c);
static void (APIENTRYP pglIndexiv)(const GLint *c) = wrap_glIndexiv;
static void wrap_glIndexiv(const GLint *c) {return trampoline<void>("glIndexiv", nullptr, nullptr, nullptr, &pglIndexiv, c);}
extern "C" void APIENTRY glIndexiv(const GLint *c) {return (*pglIndexiv)(c);}
static void wrap_glIndexs(GLshort c);
static void (APIENTRYP pglIndexs)(GLshort c) = wrap_glIndexs;
static void wrap_glIndexs(GLshort c) {return trampoline<void>("glIndexs", nullptr, nullptr, nullptr, &pglIndexs, c);}
extern "C" void APIENTRY glIndexs(GLshort c) {return (*pglIndexs)(c);}
static void wrap_glIndexsv(const GLshort *c);
static void (APIENTRYP pglIndexsv)(const GLshort *c) = wrap_glIndexsv;
static void wrap_glIndexsv(const GLshort *c) {return trampoline<void>("glIndexsv", nullptr, nullptr, nullptr, &pglIndexsv, c);}
extern "C" void APIENTRY glIndexsv(const GLshort *c) {return (*pglIndexsv)(c);}
static void wrap_glIndexub(GLubyte c);
static void (APIENTRYP pglIndexub)(GLubyte c) = wrap_glIndexub;
static void wrap_glIndexub(GLubyte c) {return trampoline<void>("glIndexub", nullptr, nullptr, nullptr, &pglIndexub, c);}
extern "C" void APIENTRY glIndexub(GLubyte c) {return (*pglIndexub)(c);}
static void wrap_glIndexubv(const GLubyte *c);
static void (APIENTRYP pglIndexubv)(const GLubyte *c) = wrap_glIndexubv;
static void wrap_glIndexubv(const GLubyte *c) {return trampoline<void>("glIndexubv", nullptr, nullptr, nullptr, &pglIndexubv, c);}
extern "C" void APIENTRY glIndexubv(const GLubyte *c) {return (*pglIndexubv)(c);}
static void wrap_glIndexx(GLfixed component);
static void (APIENTRYP pglIndexx)(GLfixed component) = wrap_glIndexx;
static void wrap_glIndexx(GLfixed component) {return trampoline<void>("glIndexx", "glIndexxOES", nullptr, nullptr, &pglIndexx, component);}
extern "C" void APIENTRY glIndexx(GLfixed component) {return (*pglIndexx)(component);}
static void wrap_glIndexxv(const GLfixed *component);
static void (APIENTRYP pglIndexxv)(const GLfixed *component) = wrap_glIndexxv;
static void wrap_glIndexxv(const GLfixed *component) {return trampoline<void>("glIndexxv", "glIndexxvOES", nullptr, nullptr, &pglIndexxv, component);}
extern "C" void APIENTRY glIndexxv(const GLfixed *component) {return (*pglIndexxv)(component);}
static void wrap_glInitNames(void);
static void (APIENTRYP pglInitNames)(void) = wrap_glInitNames;
static void wrap_glInitNames(void) {return trampoline<void>("glInitNames", nullptr, nullptr, nullptr, &pglInitNames);}
extern "C" void APIENTRY glInitNames(void) {return (*pglInitNames)();}
static void wrap_glInsertComponent(GLuint res, GLuint src, GLuint num);
static void (APIENTRYP pglInsertComponent)(GLuint res, GLuint src, GLuint num) = wrap_glInsertComponent;
static void wrap_glInsertComponent(GLuint res, GLuint src, GLuint num) {return trampoline<void>("glInsertComponent", "glInsertComponentEXT", nullptr, nullptr, &pglInsertComponent, res, src, num);}
extern "C" void APIENTRY glInsertComponent(GLuint res, GLuint src, GLuint num) {return (*pglInsertComponent)(res, src, num);}
static void wrap_glInsertEventMarker(GLsizei length, const GLchar *marker);
static void (APIENTRYP pglInsertEventMarker)(GLsizei length, const GLchar *marker) = wrap_glInsertEventMarker;
static void wrap_glInsertEventMarker(GLsizei length, const GLchar *marker) {return trampoline<void>("glInsertEventMarker", "glInsertEventMarkerEXT", nullptr, nullptr, &pglInsertEventMarker, length, marker);}
extern "C" void APIENTRY glInsertEventMarker(GLsizei length, const GLchar *marker) {return (*pglInsertEventMarker)(length, marker);}
static void wrap_glInstrumentsBuffer(GLsizei size, GLint *buffer);
static void (APIENTRYP pglInstrumentsBuffer)(GLsizei size, GLint *buffer) = wrap_glInstrumentsBuffer;
static void wrap_glInstrumentsBuffer(GLsizei size, GLint *buffer) {return trampoline<void>("glInstrumentsBuffer", "glInstrumentsBufferSGIX", nullptr, nullptr, &pglInstrumentsBuffer, size, buffer);}
extern "C" void APIENTRY glInstrumentsBuffer(GLsizei size, GLint *buffer) {return (*pglInstrumentsBuffer)(size, buffer);}
static void wrap_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
static void (APIENTRYP pglInterleavedArrays)(GLenum format, GLsizei stride, const GLvoid *pointer) = wrap_glInterleavedArrays;
static void wrap_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer) {return trampoline<void>("glInterleavedArrays", nullptr, nullptr, nullptr, &pglInterleavedArrays, format, stride, pointer);}
extern "C" void APIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer) {return (*pglInterleavedArrays)(format, stride, pointer);}
static void wrap_glInterpolatePaths(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
static void (APIENTRYP pglInterpolatePaths)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) = wrap_glInterpolatePaths;
static void wrap_glInterpolatePaths(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {return trampoline<void>("glInterpolatePaths", "glInterpolatePathsNV", nullptr, nullptr, &pglInterpolatePaths, resultPath, pathA, pathB, weight);}
extern "C" void APIENTRY glInterpolatePaths(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {return (*pglInterpolatePaths)(resultPath, pathA, pathB, weight);}
static void wrap_glInvalidateBufferData(GLuint buffer);
static void (APIENTRYP pglInvalidateBufferData)(GLuint buffer) = wrap_glInvalidateBufferData;
static void wrap_glInvalidateBufferData(GLuint buffer) {return trampoline<void>("glInvalidateBufferData", nullptr, nullptr, nullptr, &pglInvalidateBufferData, buffer);}
extern "C" void APIENTRY glInvalidateBufferData(GLuint buffer) {return (*pglInvalidateBufferData)(buffer);}
static void wrap_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
static void (APIENTRYP pglInvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length) = wrap_glInvalidateBufferSubData;
static void wrap_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {return trampoline<void>("glInvalidateBufferSubData", nullptr, nullptr, nullptr, &pglInvalidateBufferSubData, buffer, offset, length);}
extern "C" void APIENTRY glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {return (*pglInvalidateBufferSubData)(buffer, offset, length);}
static void wrap_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
static void (APIENTRYP pglInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments) = wrap_glInvalidateFramebuffer;
static void wrap_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {return trampoline<void>("glInvalidateFramebuffer", nullptr, nullptr, nullptr, &pglInvalidateFramebuffer, target, numAttachments, attachments);}
extern "C" void APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {return (*pglInvalidateFramebuffer)(target, numAttachments, attachments);}
static void wrap_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
static void (APIENTRYP pglInvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) = wrap_glInvalidateNamedFramebufferData;
static void wrap_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) {return trampoline<void>("glInvalidateNamedFramebufferData", nullptr, nullptr, nullptr, &pglInvalidateNamedFramebufferData, framebuffer, numAttachments, attachments);}
extern "C" void APIENTRY glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) {return (*pglInvalidateNamedFramebufferData)(framebuffer, numAttachments, attachments);}
static void wrap_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglInvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glInvalidateNamedFramebufferSubData;
static void wrap_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glInvalidateNamedFramebufferSubData", nullptr, nullptr, nullptr, &pglInvalidateNamedFramebufferSubData, framebuffer, numAttachments, attachments, x, y, width, height);}
extern "C" void APIENTRY glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglInvalidateNamedFramebufferSubData)(framebuffer, numAttachments, attachments, x, y, width, height);}
static void wrap_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glInvalidateSubFramebuffer;
static void wrap_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glInvalidateSubFramebuffer", nullptr, nullptr, nullptr, &pglInvalidateSubFramebuffer, target, numAttachments, attachments, x, y, width, height);}
extern "C" void APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);}
static void wrap_glInvalidateTexImage(GLuint texture, GLint level);
static void (APIENTRYP pglInvalidateTexImage)(GLuint texture, GLint level) = wrap_glInvalidateTexImage;
static void wrap_glInvalidateTexImage(GLuint texture, GLint level) {return trampoline<void>("glInvalidateTexImage", nullptr, nullptr, nullptr, &pglInvalidateTexImage, texture, level);}
extern "C" void APIENTRY glInvalidateTexImage(GLuint texture, GLint level) {return (*pglInvalidateTexImage)(texture, level);}
static void wrap_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
static void (APIENTRYP pglInvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) = wrap_glInvalidateTexSubImage;
static void wrap_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {return trampoline<void>("glInvalidateTexSubImage", nullptr, nullptr, nullptr, &pglInvalidateTexSubImage, texture, level, xoffset, yoffset, zoffset, width, height, depth);}
extern "C" void APIENTRY glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {return (*pglInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);}
static GLboolean wrap_glIsAsyncMarker(GLuint marker);
static GLboolean (APIENTRYP pglIsAsyncMarker)(GLuint marker) = wrap_glIsAsyncMarker;
static GLboolean wrap_glIsAsyncMarker(GLuint marker) {return trampoline<GLboolean>("glIsAsyncMarker", "glIsAsyncMarkerSGIX", nullptr, nullptr, &pglIsAsyncMarker, marker);}
extern "C" GLboolean APIENTRY glIsAsyncMarker(GLuint marker) {return (*pglIsAsyncMarker)(marker);}
static GLboolean wrap_glIsBuffer(GLuint buffer);
static GLboolean (APIENTRYP pglIsBuffer)(GLuint buffer) = wrap_glIsBuffer;
static GLboolean wrap_glIsBuffer(GLuint buffer) {return trampoline<GLboolean>("glIsBuffer", "glIsBufferARB", nullptr, nullptr, &pglIsBuffer, buffer);}
extern "C" GLboolean APIENTRY glIsBuffer(GLuint buffer) {return (*pglIsBuffer)(buffer);}
static GLboolean wrap_glIsBufferResident(GLenum target);
static GLboolean (APIENTRYP pglIsBufferResident)(GLenum target) = wrap_glIsBufferResident;
static GLboolean wrap_glIsBufferResident(GLenum target) {return trampoline<GLboolean>("glIsBufferResident", "glIsBufferResidentNV", nullptr, nullptr, &pglIsBufferResident, target);}
extern "C" GLboolean APIENTRY glIsBufferResident(GLenum target) {return (*pglIsBufferResident)(target);}
static GLboolean wrap_glIsCommandList(GLuint list);
static GLboolean (APIENTRYP pglIsCommandList)(GLuint list) = wrap_glIsCommandList;
static GLboolean wrap_glIsCommandList(GLuint list) {return trampoline<GLboolean>("glIsCommandList", "glIsCommandListNV", nullptr, nullptr, &pglIsCommandList, list);}
extern "C" GLboolean APIENTRY glIsCommandList(GLuint list) {return (*pglIsCommandList)(list);}
static GLboolean wrap_glIsEnabled(GLenum cap);
static GLboolean (APIENTRYP pglIsEnabled)(GLenum cap) = wrap_glIsEnabled;
static GLboolean wrap_glIsEnabled(GLenum cap) {return trampoline<GLboolean>("glIsEnabled", nullptr, nullptr, nullptr, &pglIsEnabled, cap);}
extern "C" GLboolean APIENTRY glIsEnabled(GLenum cap) {return (*pglIsEnabled)(cap);}
static GLboolean wrap_glIsEnabledIndexed(GLenum target, GLuint index);
static GLboolean (APIENTRYP pglIsEnabledIndexed)(GLenum target, GLuint index) = wrap_glIsEnabledIndexed;
static GLboolean wrap_glIsEnabledIndexed(GLenum target, GLuint index) {return trampoline<GLboolean>("glIsEnabledIndexed", "glIsEnabledIndexedEXT", nullptr, nullptr, &pglIsEnabledIndexed, target, index);}
extern "C" GLboolean APIENTRY glIsEnabledIndexed(GLenum target, GLuint index) {return (*pglIsEnabledIndexed)(target, index);}
static GLboolean wrap_glIsEnabledi(GLenum target, GLuint index);
static GLboolean (APIENTRYP pglIsEnabledi)(GLenum target, GLuint index) = wrap_glIsEnabledi;
static GLboolean wrap_glIsEnabledi(GLenum target, GLuint index) {return trampoline<GLboolean>("glIsEnabledi", nullptr, nullptr, nullptr, &pglIsEnabledi, target, index);}
extern "C" GLboolean APIENTRY glIsEnabledi(GLenum target, GLuint index) {return (*pglIsEnabledi)(target, index);}
static GLboolean wrap_glIsFence(GLuint fence);
static GLboolean (APIENTRYP pglIsFence)(GLuint fence) = wrap_glIsFence;
static GLboolean wrap_glIsFence(GLuint fence) {return trampoline<GLboolean>("glIsFence", "glIsFenceAPPLE", "glIsFenceNV", nullptr, &pglIsFence, fence);}
extern "C" GLboolean APIENTRY glIsFence(GLuint fence) {return (*pglIsFence)(fence);}
static GLboolean wrap_glIsFramebuffer(GLuint framebuffer);
static GLboolean (APIENTRYP pglIsFramebuffer)(GLuint framebuffer) = wrap_glIsFramebuffer;
static GLboolean wrap_glIsFramebuffer(GLuint framebuffer) {return trampoline<GLboolean>("glIsFramebuffer", "glIsFramebufferEXT", nullptr, nullptr, &pglIsFramebuffer, framebuffer);}
extern "C" GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer) {return (*pglIsFramebuffer)(framebuffer);}
static GLboolean wrap_glIsImageHandleResident(GLuint64 handle);
static GLboolean (APIENTRYP pglIsImageHandleResident)(GLuint64 handle) = wrap_glIsImageHandleResident;
static GLboolean wrap_glIsImageHandleResident(GLuint64 handle) {return trampoline<GLboolean>("glIsImageHandleResident", "glIsImageHandleResidentARB", "glIsImageHandleResidentNV", nullptr, &pglIsImageHandleResident, handle);}
extern "C" GLboolean APIENTRY glIsImageHandleResident(GLuint64 handle) {return (*pglIsImageHandleResident)(handle);}
static GLboolean wrap_glIsList(GLuint list);
static GLboolean (APIENTRYP pglIsList)(GLuint list) = wrap_glIsList;
static GLboolean wrap_glIsList(GLuint list) {return trampoline<GLboolean>("glIsList", nullptr, nullptr, nullptr, &pglIsList, list);}
extern "C" GLboolean APIENTRY glIsList(GLuint list) {return (*pglIsList)(list);}
static GLboolean wrap_glIsName(GLenum identifier, GLuint name);
static GLboolean (APIENTRYP pglIsName)(GLenum identifier, GLuint name) = wrap_glIsName;
static GLboolean wrap_glIsName(GLenum identifier, GLuint name) {return trampoline<GLboolean>("glIsName", "glIsNameAMD", nullptr, nullptr, &pglIsName, identifier, name);}
extern "C" GLboolean APIENTRY glIsName(GLenum identifier, GLuint name) {return (*pglIsName)(identifier, name);}
static GLboolean wrap_glIsNamedBufferResident(GLuint buffer);
static GLboolean (APIENTRYP pglIsNamedBufferResident)(GLuint buffer) = wrap_glIsNamedBufferResident;
static GLboolean wrap_glIsNamedBufferResident(GLuint buffer) {return trampoline<GLboolean>("glIsNamedBufferResident", "glIsNamedBufferResidentNV", nullptr, nullptr, &pglIsNamedBufferResident, buffer);}
extern "C" GLboolean APIENTRY glIsNamedBufferResident(GLuint buffer) {return (*pglIsNamedBufferResident)(buffer);}
static GLboolean wrap_glIsNamedString(GLint namelen, const GLchar *name);
static GLboolean (APIENTRYP pglIsNamedString)(GLint namelen, const GLchar *name) = wrap_glIsNamedString;
static GLboolean wrap_glIsNamedString(GLint namelen, const GLchar *name) {return trampoline<GLboolean>("glIsNamedString", "glIsNamedStringARB", nullptr, nullptr, &pglIsNamedString, namelen, name);}
extern "C" GLboolean APIENTRY glIsNamedString(GLint namelen, const GLchar *name) {return (*pglIsNamedString)(namelen, name);}
static GLboolean wrap_glIsObjectBuffer(GLuint buffer);
static GLboolean (APIENTRYP pglIsObjectBuffer)(GLuint buffer) = wrap_glIsObjectBuffer;
static GLboolean wrap_glIsObjectBuffer(GLuint buffer) {return trampoline<GLboolean>("glIsObjectBuffer", "glIsObjectBufferATI", nullptr, nullptr, &pglIsObjectBuffer, buffer);}
extern "C" GLboolean APIENTRY glIsObjectBuffer(GLuint buffer) {return (*pglIsObjectBuffer)(buffer);}
static GLboolean wrap_glIsOcclusionQuery(GLuint id);
static GLboolean (APIENTRYP pglIsOcclusionQuery)(GLuint id) = wrap_glIsOcclusionQuery;
static GLboolean wrap_glIsOcclusionQuery(GLuint id) {return trampoline<GLboolean>("glIsOcclusionQuery", "glIsOcclusionQueryNV", nullptr, nullptr, &pglIsOcclusionQuery, id);}
extern "C" GLboolean APIENTRY glIsOcclusionQuery(GLuint id) {return (*pglIsOcclusionQuery)(id);}
static GLboolean wrap_glIsPath(GLuint path);
static GLboolean (APIENTRYP pglIsPath)(GLuint path) = wrap_glIsPath;
static GLboolean wrap_glIsPath(GLuint path) {return trampoline<GLboolean>("glIsPath", "glIsPathNV", nullptr, nullptr, &pglIsPath, path);}
extern "C" GLboolean APIENTRY glIsPath(GLuint path) {return (*pglIsPath)(path);}
static GLboolean wrap_glIsPointInFillPath(GLuint path, GLuint mask, GLfloat x, GLfloat y);
static GLboolean (APIENTRYP pglIsPointInFillPath)(GLuint path, GLuint mask, GLfloat x, GLfloat y) = wrap_glIsPointInFillPath;
static GLboolean wrap_glIsPointInFillPath(GLuint path, GLuint mask, GLfloat x, GLfloat y) {return trampoline<GLboolean>("glIsPointInFillPath", "glIsPointInFillPathNV", nullptr, nullptr, &pglIsPointInFillPath, path, mask, x, y);}
extern "C" GLboolean APIENTRY glIsPointInFillPath(GLuint path, GLuint mask, GLfloat x, GLfloat y) {return (*pglIsPointInFillPath)(path, mask, x, y);}
static GLboolean wrap_glIsPointInStrokePath(GLuint path, GLfloat x, GLfloat y);
static GLboolean (APIENTRYP pglIsPointInStrokePath)(GLuint path, GLfloat x, GLfloat y) = wrap_glIsPointInStrokePath;
static GLboolean wrap_glIsPointInStrokePath(GLuint path, GLfloat x, GLfloat y) {return trampoline<GLboolean>("glIsPointInStrokePath", "glIsPointInStrokePathNV", nullptr, nullptr, &pglIsPointInStrokePath, path, x, y);}
extern "C" GLboolean APIENTRY glIsPointInStrokePath(GLuint path, GLfloat x, GLfloat y) {return (*pglIsPointInStrokePath)(path, x, y);}
static GLboolean wrap_glIsProgram(GLuint program);
static GLboolean (APIENTRYP pglIsProgram)(GLuint program) = wrap_glIsProgram;
static GLboolean wrap_glIsProgram(GLuint program) {return trampoline<GLboolean>("glIsProgram", "glIsProgramARB", "glIsProgramNV", nullptr, &pglIsProgram, program);}
extern "C" GLboolean APIENTRY glIsProgram(GLuint program) {return (*pglIsProgram)(program);}
static GLboolean wrap_glIsProgramPipeline(GLuint pipeline);
static GLboolean (APIENTRYP pglIsProgramPipeline)(GLuint pipeline) = wrap_glIsProgramPipeline;
static GLboolean wrap_glIsProgramPipeline(GLuint pipeline) {return trampoline<GLboolean>("glIsProgramPipeline", nullptr, nullptr, nullptr, &pglIsProgramPipeline, pipeline);}
extern "C" GLboolean APIENTRY glIsProgramPipeline(GLuint pipeline) {return (*pglIsProgramPipeline)(pipeline);}
static GLboolean wrap_glIsQuery(GLuint id);
static GLboolean (APIENTRYP pglIsQuery)(GLuint id) = wrap_glIsQuery;
static GLboolean wrap_glIsQuery(GLuint id) {return trampoline<GLboolean>("glIsQuery", "glIsQueryARB", nullptr, nullptr, &pglIsQuery, id);}
extern "C" GLboolean APIENTRY glIsQuery(GLuint id) {return (*pglIsQuery)(id);}
static GLboolean wrap_glIsRenderbuffer(GLuint renderbuffer);
static GLboolean (APIENTRYP pglIsRenderbuffer)(GLuint renderbuffer) = wrap_glIsRenderbuffer;
static GLboolean wrap_glIsRenderbuffer(GLuint renderbuffer) {return trampoline<GLboolean>("glIsRenderbuffer", "glIsRenderbufferEXT", nullptr, nullptr, &pglIsRenderbuffer, renderbuffer);}
extern "C" GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer) {return (*pglIsRenderbuffer)(renderbuffer);}
static GLboolean wrap_glIsSampler(GLuint sampler);
static GLboolean (APIENTRYP pglIsSampler)(GLuint sampler) = wrap_glIsSampler;
static GLboolean wrap_glIsSampler(GLuint sampler) {return trampoline<GLboolean>("glIsSampler", nullptr, nullptr, nullptr, &pglIsSampler, sampler);}
extern "C" GLboolean APIENTRY glIsSampler(GLuint sampler) {return (*pglIsSampler)(sampler);}
static GLboolean wrap_glIsShader(GLuint shader);
static GLboolean (APIENTRYP pglIsShader)(GLuint shader) = wrap_glIsShader;
static GLboolean wrap_glIsShader(GLuint shader) {return trampoline<GLboolean>("glIsShader", nullptr, nullptr, nullptr, &pglIsShader, shader);}
extern "C" GLboolean APIENTRY glIsShader(GLuint shader) {return (*pglIsShader)(shader);}
static GLboolean wrap_glIsState(GLuint state);
static GLboolean (APIENTRYP pglIsState)(GLuint state) = wrap_glIsState;
static GLboolean wrap_glIsState(GLuint state) {return trampoline<GLboolean>("glIsState", "glIsStateNV", nullptr, nullptr, &pglIsState, state);}
extern "C" GLboolean APIENTRY glIsState(GLuint state) {return (*pglIsState)(state);}
static GLboolean wrap_glIsSync(GLsync sync);
static GLboolean (APIENTRYP pglIsSync)(GLsync sync) = wrap_glIsSync;
static GLboolean wrap_glIsSync(GLsync sync) {return trampoline<GLboolean>("glIsSync", nullptr, nullptr, nullptr, &pglIsSync, sync);}
extern "C" GLboolean APIENTRY glIsSync(GLsync sync) {return (*pglIsSync)(sync);}
static GLboolean wrap_glIsTexture(GLuint texture);
static GLboolean (APIENTRYP pglIsTexture)(GLuint texture) = wrap_glIsTexture;
static GLboolean wrap_glIsTexture(GLuint texture) {return trampoline<GLboolean>("glIsTexture", "glIsTextureEXT", nullptr, nullptr, &pglIsTexture, texture);}
extern "C" GLboolean APIENTRY glIsTexture(GLuint texture) {return (*pglIsTexture)(texture);}
static GLboolean wrap_glIsTextureHandleResident(GLuint64 handle);
static GLboolean (APIENTRYP pglIsTextureHandleResident)(GLuint64 handle) = wrap_glIsTextureHandleResident;
static GLboolean wrap_glIsTextureHandleResident(GLuint64 handle) {return trampoline<GLboolean>("glIsTextureHandleResident", "glIsTextureHandleResidentARB", "glIsTextureHandleResidentNV", nullptr, &pglIsTextureHandleResident, handle);}
extern "C" GLboolean APIENTRY glIsTextureHandleResident(GLuint64 handle) {return (*pglIsTextureHandleResident)(handle);}
static GLboolean wrap_glIsTransformFeedback(GLuint id);
static GLboolean (APIENTRYP pglIsTransformFeedback)(GLuint id) = wrap_glIsTransformFeedback;
static GLboolean wrap_glIsTransformFeedback(GLuint id) {return trampoline<GLboolean>("glIsTransformFeedback", "glIsTransformFeedbackNV", nullptr, nullptr, &pglIsTransformFeedback, id);}
extern "C" GLboolean APIENTRY glIsTransformFeedback(GLuint id) {return (*pglIsTransformFeedback)(id);}
static GLboolean wrap_glIsVariantEnabled(GLuint id, GLenum cap);
static GLboolean (APIENTRYP pglIsVariantEnabled)(GLuint id, GLenum cap) = wrap_glIsVariantEnabled;
static GLboolean wrap_glIsVariantEnabled(GLuint id, GLenum cap) {return trampoline<GLboolean>("glIsVariantEnabled", "glIsVariantEnabledEXT", nullptr, nullptr, &pglIsVariantEnabled, id, cap);}
extern "C" GLboolean APIENTRY glIsVariantEnabled(GLuint id, GLenum cap) {return (*pglIsVariantEnabled)(id, cap);}
static GLboolean wrap_glIsVertexArray(GLuint array);
static GLboolean (APIENTRYP pglIsVertexArray)(GLuint array) = wrap_glIsVertexArray;
static GLboolean wrap_glIsVertexArray(GLuint array) {return trampoline<GLboolean>("glIsVertexArray", "glIsVertexArrayAPPLE", nullptr, nullptr, &pglIsVertexArray, array);}
extern "C" GLboolean APIENTRY glIsVertexArray(GLuint array) {return (*pglIsVertexArray)(array);}
static GLboolean wrap_glIsVertexAttribEnabled(GLuint index, GLenum pname);
static GLboolean (APIENTRYP pglIsVertexAttribEnabled)(GLuint index, GLenum pname) = wrap_glIsVertexAttribEnabled;
static GLboolean wrap_glIsVertexAttribEnabled(GLuint index, GLenum pname) {return trampoline<GLboolean>("glIsVertexAttribEnabled", "glIsVertexAttribEnabledAPPLE", nullptr, nullptr, &pglIsVertexAttribEnabled, index, pname);}
extern "C" GLboolean APIENTRY glIsVertexAttribEnabled(GLuint index, GLenum pname) {return (*pglIsVertexAttribEnabled)(index, pname);}
static void wrap_glLabelObject(GLenum type, GLuint object, GLsizei length, const GLchar *label);
static void (APIENTRYP pglLabelObject)(GLenum type, GLuint object, GLsizei length, const GLchar *label) = wrap_glLabelObject;
static void wrap_glLabelObject(GLenum type, GLuint object, GLsizei length, const GLchar *label) {return trampoline<void>("glLabelObject", "glLabelObjectEXT", nullptr, nullptr, &pglLabelObject, type, object, length, label);}
extern "C" void APIENTRY glLabelObject(GLenum type, GLuint object, GLsizei length, const GLchar *label) {return (*pglLabelObject)(type, object, length, label);}
static void wrap_glLightEnvi(GLenum pname, GLint param);
static void (APIENTRYP pglLightEnvi)(GLenum pname, GLint param) = wrap_glLightEnvi;
static void wrap_glLightEnvi(GLenum pname, GLint param) {return trampoline<void>("glLightEnvi", "glLightEnviSGIX", nullptr, nullptr, &pglLightEnvi, pname, param);}
extern "C" void APIENTRY glLightEnvi(GLenum pname, GLint param) {return (*pglLightEnvi)(pname, param);}
static void wrap_glLightModelf(GLenum pname, GLfloat param);
static void (APIENTRYP pglLightModelf)(GLenum pname, GLfloat param) = wrap_glLightModelf;
static void wrap_glLightModelf(GLenum pname, GLfloat param) {return trampoline<void>("glLightModelf", nullptr, nullptr, nullptr, &pglLightModelf, pname, param);}
extern "C" void APIENTRY glLightModelf(GLenum pname, GLfloat param) {return (*pglLightModelf)(pname, param);}
static void wrap_glLightModelfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglLightModelfv)(GLenum pname, const GLfloat *params) = wrap_glLightModelfv;
static void wrap_glLightModelfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glLightModelfv", nullptr, nullptr, nullptr, &pglLightModelfv, pname, params);}
extern "C" void APIENTRY glLightModelfv(GLenum pname, const GLfloat *params) {return (*pglLightModelfv)(pname, params);}
static void wrap_glLightModeli(GLenum pname, GLint param);
static void (APIENTRYP pglLightModeli)(GLenum pname, GLint param) = wrap_glLightModeli;
static void wrap_glLightModeli(GLenum pname, GLint param) {return trampoline<void>("glLightModeli", nullptr, nullptr, nullptr, &pglLightModeli, pname, param);}
extern "C" void APIENTRY glLightModeli(GLenum pname, GLint param) {return (*pglLightModeli)(pname, param);}
static void wrap_glLightModeliv(GLenum pname, const GLint *params);
static void (APIENTRYP pglLightModeliv)(GLenum pname, const GLint *params) = wrap_glLightModeliv;
static void wrap_glLightModeliv(GLenum pname, const GLint *params) {return trampoline<void>("glLightModeliv", nullptr, nullptr, nullptr, &pglLightModeliv, pname, params);}
extern "C" void APIENTRY glLightModeliv(GLenum pname, const GLint *params) {return (*pglLightModeliv)(pname, params);}
static void wrap_glLightModelx(GLenum pname, GLfixed param);
static void (APIENTRYP pglLightModelx)(GLenum pname, GLfixed param) = wrap_glLightModelx;
static void wrap_glLightModelx(GLenum pname, GLfixed param) {return trampoline<void>("glLightModelx", "glLightModelxOES", nullptr, nullptr, &pglLightModelx, pname, param);}
extern "C" void APIENTRY glLightModelx(GLenum pname, GLfixed param) {return (*pglLightModelx)(pname, param);}
static void wrap_glLightModelxv(GLenum pname, const GLfixed *param);
static void (APIENTRYP pglLightModelxv)(GLenum pname, const GLfixed *param) = wrap_glLightModelxv;
static void wrap_glLightModelxv(GLenum pname, const GLfixed *param) {return trampoline<void>("glLightModelxv", "glLightModelxvOES", nullptr, nullptr, &pglLightModelxv, pname, param);}
extern "C" void APIENTRY glLightModelxv(GLenum pname, const GLfixed *param) {return (*pglLightModelxv)(pname, param);}
static void wrap_glLightf(GLenum light, GLenum pname, GLfloat param);
static void (APIENTRYP pglLightf)(GLenum light, GLenum pname, GLfloat param) = wrap_glLightf;
static void wrap_glLightf(GLenum light, GLenum pname, GLfloat param) {return trampoline<void>("glLightf", nullptr, nullptr, nullptr, &pglLightf, light, pname, param);}
extern "C" void APIENTRY glLightf(GLenum light, GLenum pname, GLfloat param) {return (*pglLightf)(light, pname, param);}
static void wrap_glLightfv(GLenum light, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglLightfv)(GLenum light, GLenum pname, const GLfloat *params) = wrap_glLightfv;
static void wrap_glLightfv(GLenum light, GLenum pname, const GLfloat *params) {return trampoline<void>("glLightfv", nullptr, nullptr, nullptr, &pglLightfv, light, pname, params);}
extern "C" void APIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params) {return (*pglLightfv)(light, pname, params);}
static void wrap_glLighti(GLenum light, GLenum pname, GLint param);
static void (APIENTRYP pglLighti)(GLenum light, GLenum pname, GLint param) = wrap_glLighti;
static void wrap_glLighti(GLenum light, GLenum pname, GLint param) {return trampoline<void>("glLighti", nullptr, nullptr, nullptr, &pglLighti, light, pname, param);}
extern "C" void APIENTRY glLighti(GLenum light, GLenum pname, GLint param) {return (*pglLighti)(light, pname, param);}
static void wrap_glLightiv(GLenum light, GLenum pname, const GLint *params);
static void (APIENTRYP pglLightiv)(GLenum light, GLenum pname, const GLint *params) = wrap_glLightiv;
static void wrap_glLightiv(GLenum light, GLenum pname, const GLint *params) {return trampoline<void>("glLightiv", nullptr, nullptr, nullptr, &pglLightiv, light, pname, params);}
extern "C" void APIENTRY glLightiv(GLenum light, GLenum pname, const GLint *params) {return (*pglLightiv)(light, pname, params);}
static void wrap_glLightx(GLenum light, GLenum pname, GLfixed param);
static void (APIENTRYP pglLightx)(GLenum light, GLenum pname, GLfixed param) = wrap_glLightx;
static void wrap_glLightx(GLenum light, GLenum pname, GLfixed param) {return trampoline<void>("glLightx", "glLightxOES", nullptr, nullptr, &pglLightx, light, pname, param);}
extern "C" void APIENTRY glLightx(GLenum light, GLenum pname, GLfixed param) {return (*pglLightx)(light, pname, param);}
static void wrap_glLightxv(GLenum light, GLenum pname, const GLfixed *params);
static void (APIENTRYP pglLightxv)(GLenum light, GLenum pname, const GLfixed *params) = wrap_glLightxv;
static void wrap_glLightxv(GLenum light, GLenum pname, const GLfixed *params) {return trampoline<void>("glLightxv", "glLightxvOES", nullptr, nullptr, &pglLightxv, light, pname, params);}
extern "C" void APIENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params) {return (*pglLightxv)(light, pname, params);}
static void wrap_glLineStipple(GLint factor, GLushort pattern);
static void (APIENTRYP pglLineStipple)(GLint factor, GLushort pattern) = wrap_glLineStipple;
static void wrap_glLineStipple(GLint factor, GLushort pattern) {return trampoline<void>("glLineStipple", nullptr, nullptr, nullptr, &pglLineStipple, factor, pattern);}
extern "C" void APIENTRY glLineStipple(GLint factor, GLushort pattern) {return (*pglLineStipple)(factor, pattern);}
static void wrap_glLineWidth(GLfloat width);
static void (APIENTRYP pglLineWidth)(GLfloat width) = wrap_glLineWidth;
static void wrap_glLineWidth(GLfloat width) {return trampoline<void>("glLineWidth", nullptr, nullptr, nullptr, &pglLineWidth, width);}
extern "C" void APIENTRY glLineWidth(GLfloat width) {return (*pglLineWidth)(width);}
static void wrap_glLineWidthx(GLfixed width);
static void (APIENTRYP pglLineWidthx)(GLfixed width) = wrap_glLineWidthx;
static void wrap_glLineWidthx(GLfixed width) {return trampoline<void>("glLineWidthx", "glLineWidthxOES", nullptr, nullptr, &pglLineWidthx, width);}
extern "C" void APIENTRY glLineWidthx(GLfixed width) {return (*pglLineWidthx)(width);}
static void wrap_glLinkProgram(GLuint program);
static void (APIENTRYP pglLinkProgram)(GLuint program) = wrap_glLinkProgram;
static void wrap_glLinkProgram(GLuint program) {return trampoline<void>("glLinkProgram", "glLinkProgramARB", nullptr, nullptr, &pglLinkProgram, program);}
extern "C" void APIENTRY glLinkProgram(GLuint program) {return (*pglLinkProgram)(program);}
static void wrap_glListBase(GLuint base);
static void (APIENTRYP pglListBase)(GLuint base) = wrap_glListBase;
static void wrap_glListBase(GLuint base) {return trampoline<void>("glListBase", nullptr, nullptr, nullptr, &pglListBase, base);}
extern "C" void APIENTRY glListBase(GLuint base) {return (*pglListBase)(base);}
static void wrap_glListDrawCommandsStatesClient(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
static void (APIENTRYP pglListDrawCommandsStatesClient)(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) = wrap_glListDrawCommandsStatesClient;
static void wrap_glListDrawCommandsStatesClient(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {return trampoline<void>("glListDrawCommandsStatesClient", "glListDrawCommandsStatesClientNV", nullptr, nullptr, &pglListDrawCommandsStatesClient, list, segment, indirects, sizes, states, fbos, count);}
extern "C" void APIENTRY glListDrawCommandsStatesClient(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {return (*pglListDrawCommandsStatesClient)(list, segment, indirects, sizes, states, fbos, count);}
static void wrap_glListParameterf(GLuint list, GLenum pname, GLfloat param);
static void (APIENTRYP pglListParameterf)(GLuint list, GLenum pname, GLfloat param) = wrap_glListParameterf;
static void wrap_glListParameterf(GLuint list, GLenum pname, GLfloat param) {return trampoline<void>("glListParameterf", "glListParameterfSGIX", nullptr, nullptr, &pglListParameterf, list, pname, param);}
extern "C" void APIENTRY glListParameterf(GLuint list, GLenum pname, GLfloat param) {return (*pglListParameterf)(list, pname, param);}
static void wrap_glListParameterfv(GLuint list, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglListParameterfv)(GLuint list, GLenum pname, const GLfloat *params) = wrap_glListParameterfv;
static void wrap_glListParameterfv(GLuint list, GLenum pname, const GLfloat *params) {return trampoline<void>("glListParameterfv", "glListParameterfvSGIX", nullptr, nullptr, &pglListParameterfv, list, pname, params);}
extern "C" void APIENTRY glListParameterfv(GLuint list, GLenum pname, const GLfloat *params) {return (*pglListParameterfv)(list, pname, params);}
static void wrap_glListParameteri(GLuint list, GLenum pname, GLint param);
static void (APIENTRYP pglListParameteri)(GLuint list, GLenum pname, GLint param) = wrap_glListParameteri;
static void wrap_glListParameteri(GLuint list, GLenum pname, GLint param) {return trampoline<void>("glListParameteri", "glListParameteriSGIX", nullptr, nullptr, &pglListParameteri, list, pname, param);}
extern "C" void APIENTRY glListParameteri(GLuint list, GLenum pname, GLint param) {return (*pglListParameteri)(list, pname, param);}
static void wrap_glListParameteriv(GLuint list, GLenum pname, const GLint *params);
static void (APIENTRYP pglListParameteriv)(GLuint list, GLenum pname, const GLint *params) = wrap_glListParameteriv;
static void wrap_glListParameteriv(GLuint list, GLenum pname, const GLint *params) {return trampoline<void>("glListParameteriv", "glListParameterivSGIX", nullptr, nullptr, &pglListParameteriv, list, pname, params);}
extern "C" void APIENTRY glListParameteriv(GLuint list, GLenum pname, const GLint *params) {return (*pglListParameteriv)(list, pname, params);}
static void wrap_glLoadIdentity(void);
static void (APIENTRYP pglLoadIdentity)(void) = wrap_glLoadIdentity;
static void wrap_glLoadIdentity(void) {return trampoline<void>("glLoadIdentity", nullptr, nullptr, nullptr, &pglLoadIdentity);}
extern "C" void APIENTRY glLoadIdentity(void) {return (*pglLoadIdentity)();}
static void wrap_glLoadIdentityDeformationMap(GLbitfield mask);
static void (APIENTRYP pglLoadIdentityDeformationMap)(GLbitfield mask) = wrap_glLoadIdentityDeformationMap;
static void wrap_glLoadIdentityDeformationMap(GLbitfield mask) {return trampoline<void>("glLoadIdentityDeformationMap", "glLoadIdentityDeformationMapSGIX", nullptr, nullptr, &pglLoadIdentityDeformationMap, mask);}
extern "C" void APIENTRY glLoadIdentityDeformationMap(GLbitfield mask) {return (*pglLoadIdentityDeformationMap)(mask);}
static void wrap_glLoadMatrixd(const GLdouble *m);
static void (APIENTRYP pglLoadMatrixd)(const GLdouble *m) = wrap_glLoadMatrixd;
static void wrap_glLoadMatrixd(const GLdouble *m) {return trampoline<void>("glLoadMatrixd", nullptr, nullptr, nullptr, &pglLoadMatrixd, m);}
extern "C" void APIENTRY glLoadMatrixd(const GLdouble *m) {return (*pglLoadMatrixd)(m);}
static void wrap_glLoadMatrixf(const GLfloat *m);
static void (APIENTRYP pglLoadMatrixf)(const GLfloat *m) = wrap_glLoadMatrixf;
static void wrap_glLoadMatrixf(const GLfloat *m) {return trampoline<void>("glLoadMatrixf", nullptr, nullptr, nullptr, &pglLoadMatrixf, m);}
extern "C" void APIENTRY glLoadMatrixf(const GLfloat *m) {return (*pglLoadMatrixf)(m);}
static void wrap_glLoadMatrixx(const GLfixed *m);
static void (APIENTRYP pglLoadMatrixx)(const GLfixed *m) = wrap_glLoadMatrixx;
static void wrap_glLoadMatrixx(const GLfixed *m) {return trampoline<void>("glLoadMatrixx", "glLoadMatrixxOES", nullptr, nullptr, &pglLoadMatrixx, m);}
extern "C" void APIENTRY glLoadMatrixx(const GLfixed *m) {return (*pglLoadMatrixx)(m);}
static void wrap_glLoadName(GLuint name);
static void (APIENTRYP pglLoadName)(GLuint name) = wrap_glLoadName;
static void wrap_glLoadName(GLuint name) {return trampoline<void>("glLoadName", nullptr, nullptr, nullptr, &pglLoadName, name);}
extern "C" void APIENTRY glLoadName(GLuint name) {return (*pglLoadName)(name);}
static void wrap_glLoadProgram(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
static void (APIENTRYP pglLoadProgram)(GLenum target, GLuint id, GLsizei len, const GLubyte *program) = wrap_glLoadProgram;
static void wrap_glLoadProgram(GLenum target, GLuint id, GLsizei len, const GLubyte *program) {return trampoline<void>("glLoadProgram", "glLoadProgramNV", nullptr, nullptr, &pglLoadProgram, target, id, len, program);}
extern "C" void APIENTRY glLoadProgram(GLenum target, GLuint id, GLsizei len, const GLubyte *program) {return (*pglLoadProgram)(target, id, len, program);}
static void wrap_glLoadTransposeMatrixd(const GLdouble m[16]);
static void (APIENTRYP pglLoadTransposeMatrixd)(const GLdouble m[16]) = wrap_glLoadTransposeMatrixd;
static void wrap_glLoadTransposeMatrixd(const GLdouble m[16]) {return trampoline<void>("glLoadTransposeMatrixd", "glLoadTransposeMatrixdARB", nullptr, nullptr, &pglLoadTransposeMatrixd, m);}
extern "C" void APIENTRY glLoadTransposeMatrixd(const GLdouble m[16]) {return (*pglLoadTransposeMatrixd)(m);}
static void wrap_glLoadTransposeMatrixf(const GLfloat m[16]);
static void (APIENTRYP pglLoadTransposeMatrixf)(const GLfloat m[16]) = wrap_glLoadTransposeMatrixf;
static void wrap_glLoadTransposeMatrixf(const GLfloat m[16]) {return trampoline<void>("glLoadTransposeMatrixf", "glLoadTransposeMatrixfARB", nullptr, nullptr, &pglLoadTransposeMatrixf, m);}
extern "C" void APIENTRY glLoadTransposeMatrixf(const GLfloat m[16]) {return (*pglLoadTransposeMatrixf)(m);}
static void wrap_glLoadTransposeMatrixx(const GLfixed *m);
static void (APIENTRYP pglLoadTransposeMatrixx)(const GLfixed *m) = wrap_glLoadTransposeMatrixx;
static void wrap_glLoadTransposeMatrixx(const GLfixed *m) {return trampoline<void>("glLoadTransposeMatrixx", "glLoadTransposeMatrixxOES", nullptr, nullptr, &pglLoadTransposeMatrixx, m);}
extern "C" void APIENTRY glLoadTransposeMatrixx(const GLfixed *m) {return (*pglLoadTransposeMatrixx)(m);}
static void wrap_glLockArrays(GLint first, GLsizei count);
static void (APIENTRYP pglLockArrays)(GLint first, GLsizei count) = wrap_glLockArrays;
static void wrap_glLockArrays(GLint first, GLsizei count) {return trampoline<void>("glLockArrays", "glLockArraysEXT", nullptr, nullptr, &pglLockArrays, first, count);}
extern "C" void APIENTRY glLockArrays(GLint first, GLsizei count) {return (*pglLockArrays)(first, count);}
static void wrap_glLogicOp(GLenum opcode);
static void (APIENTRYP pglLogicOp)(GLenum opcode) = wrap_glLogicOp;
static void wrap_glLogicOp(GLenum opcode) {return trampoline<void>("glLogicOp", nullptr, nullptr, nullptr, &pglLogicOp, opcode);}
extern "C" void APIENTRY glLogicOp(GLenum opcode) {return (*pglLogicOp)(opcode);}
static void wrap_glMakeBufferNonResident(GLenum target);
static void (APIENTRYP pglMakeBufferNonResident)(GLenum target) = wrap_glMakeBufferNonResident;
static void wrap_glMakeBufferNonResident(GLenum target) {return trampoline<void>("glMakeBufferNonResident", "glMakeBufferNonResidentNV", nullptr, nullptr, &pglMakeBufferNonResident, target);}
extern "C" void APIENTRY glMakeBufferNonResident(GLenum target) {return (*pglMakeBufferNonResident)(target);}
static void wrap_glMakeBufferResident(GLenum target, GLenum access);
static void (APIENTRYP pglMakeBufferResident)(GLenum target, GLenum access) = wrap_glMakeBufferResident;
static void wrap_glMakeBufferResident(GLenum target, GLenum access) {return trampoline<void>("glMakeBufferResident", "glMakeBufferResidentNV", nullptr, nullptr, &pglMakeBufferResident, target, access);}
extern "C" void APIENTRY glMakeBufferResident(GLenum target, GLenum access) {return (*pglMakeBufferResident)(target, access);}
static void wrap_glMakeImageHandleNonResident(GLuint64 handle);
static void (APIENTRYP pglMakeImageHandleNonResident)(GLuint64 handle) = wrap_glMakeImageHandleNonResident;
static void wrap_glMakeImageHandleNonResident(GLuint64 handle) {return trampoline<void>("glMakeImageHandleNonResident", "glMakeImageHandleNonResidentARB", "glMakeImageHandleNonResidentNV", nullptr, &pglMakeImageHandleNonResident, handle);}
extern "C" void APIENTRY glMakeImageHandleNonResident(GLuint64 handle) {return (*pglMakeImageHandleNonResident)(handle);}
static void wrap_glMakeImageHandleResident(GLuint64 handle, GLenum access);
static void (APIENTRYP pglMakeImageHandleResident)(GLuint64 handle, GLenum access) = wrap_glMakeImageHandleResident;
static void wrap_glMakeImageHandleResident(GLuint64 handle, GLenum access) {return trampoline<void>("glMakeImageHandleResident", "glMakeImageHandleResidentARB", "glMakeImageHandleResidentNV", nullptr, &pglMakeImageHandleResident, handle, access);}
extern "C" void APIENTRY glMakeImageHandleResident(GLuint64 handle, GLenum access) {return (*pglMakeImageHandleResident)(handle, access);}
static void wrap_glMakeNamedBufferNonResident(GLuint buffer);
static void (APIENTRYP pglMakeNamedBufferNonResident)(GLuint buffer) = wrap_glMakeNamedBufferNonResident;
static void wrap_glMakeNamedBufferNonResident(GLuint buffer) {return trampoline<void>("glMakeNamedBufferNonResident", "glMakeNamedBufferNonResidentNV", nullptr, nullptr, &pglMakeNamedBufferNonResident, buffer);}
extern "C" void APIENTRY glMakeNamedBufferNonResident(GLuint buffer) {return (*pglMakeNamedBufferNonResident)(buffer);}
static void wrap_glMakeNamedBufferResident(GLuint buffer, GLenum access);
static void (APIENTRYP pglMakeNamedBufferResident)(GLuint buffer, GLenum access) = wrap_glMakeNamedBufferResident;
static void wrap_glMakeNamedBufferResident(GLuint buffer, GLenum access) {return trampoline<void>("glMakeNamedBufferResident", "glMakeNamedBufferResidentNV", nullptr, nullptr, &pglMakeNamedBufferResident, buffer, access);}
extern "C" void APIENTRY glMakeNamedBufferResident(GLuint buffer, GLenum access) {return (*pglMakeNamedBufferResident)(buffer, access);}
static void wrap_glMakeTextureHandleNonResident(GLuint64 handle);
static void (APIENTRYP pglMakeTextureHandleNonResident)(GLuint64 handle) = wrap_glMakeTextureHandleNonResident;
static void wrap_glMakeTextureHandleNonResident(GLuint64 handle) {return trampoline<void>("glMakeTextureHandleNonResident", "glMakeTextureHandleNonResidentARB", "glMakeTextureHandleNonResidentNV", nullptr, &pglMakeTextureHandleNonResident, handle);}
extern "C" void APIENTRY glMakeTextureHandleNonResident(GLuint64 handle) {return (*pglMakeTextureHandleNonResident)(handle);}
static void wrap_glMakeTextureHandleResident(GLuint64 handle);
static void (APIENTRYP pglMakeTextureHandleResident)(GLuint64 handle) = wrap_glMakeTextureHandleResident;
static void wrap_glMakeTextureHandleResident(GLuint64 handle) {return trampoline<void>("glMakeTextureHandleResident", "glMakeTextureHandleResidentARB", "glMakeTextureHandleResidentNV", nullptr, &pglMakeTextureHandleResident, handle);}
extern "C" void APIENTRY glMakeTextureHandleResident(GLuint64 handle) {return (*pglMakeTextureHandleResident)(handle);}
static void wrap_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
static void (APIENTRYP pglMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) = wrap_glMap1d;
static void wrap_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {return trampoline<void>("glMap1d", nullptr, nullptr, nullptr, &pglMap1d, target, u1, u2, stride, order, points);}
extern "C" void APIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {return (*pglMap1d)(target, u1, u2, stride, order, points);}
static void wrap_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
static void (APIENTRYP pglMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) = wrap_glMap1f;
static void wrap_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {return trampoline<void>("glMap1f", nullptr, nullptr, nullptr, &pglMap1f, target, u1, u2, stride, order, points);}
extern "C" void APIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {return (*pglMap1f)(target, u1, u2, stride, order, points);}
static void wrap_glMap1x(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
static void (APIENTRYP pglMap1x)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) = wrap_glMap1x;
static void wrap_glMap1x(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) {return trampoline<void>("glMap1x", "glMap1xOES", nullptr, nullptr, &pglMap1x, target, u1, u2, stride, order, points);}
extern "C" void APIENTRY glMap1x(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) {return (*pglMap1x)(target, u1, u2, stride, order, points);}
static void wrap_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
static void (APIENTRYP pglMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) = wrap_glMap2d;
static void wrap_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {return trampoline<void>("glMap2d", nullptr, nullptr, nullptr, &pglMap2d, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
extern "C" void APIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {return (*pglMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
static void wrap_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
static void (APIENTRYP pglMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) = wrap_glMap2f;
static void wrap_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {return trampoline<void>("glMap2f", nullptr, nullptr, nullptr, &pglMap2f, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
extern "C" void APIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {return (*pglMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
static void wrap_glMap2x(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
static void (APIENTRYP pglMap2x)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) = wrap_glMap2x;
static void wrap_glMap2x(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) {return trampoline<void>("glMap2x", "glMap2xOES", nullptr, nullptr, &pglMap2x, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
extern "C" void APIENTRY glMap2x(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) {return (*pglMap2x)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
static void * wrap_glMapBuffer(GLenum target, GLenum access);
static void * (APIENTRYP pglMapBuffer)(GLenum target, GLenum access) = wrap_glMapBuffer;
static void * wrap_glMapBuffer(GLenum target, GLenum access) {return trampoline<void *>("glMapBuffer", "glMapBufferARB", nullptr, nullptr, &pglMapBuffer, target, access);}
extern "C" void * APIENTRY glMapBuffer(GLenum target, GLenum access) {return (*pglMapBuffer)(target, access);}
static void * wrap_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
static void * (APIENTRYP pglMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) = wrap_glMapBufferRange;
static void * wrap_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {return trampoline<void *>("glMapBufferRange", nullptr, nullptr, nullptr, &pglMapBufferRange, target, offset, length, access);}
extern "C" void * APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {return (*pglMapBufferRange)(target, offset, length, access);}
static void wrap_glMapControlPoints(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
static void (APIENTRYP pglMapControlPoints)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) = wrap_glMapControlPoints;
static void wrap_glMapControlPoints(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) {return trampoline<void>("glMapControlPoints", "glMapControlPointsNV", nullptr, nullptr, &pglMapControlPoints, target, index, type, ustride, vstride, uorder, vorder, packed, points);}
extern "C" void APIENTRY glMapControlPoints(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) {return (*pglMapControlPoints)(target, index, type, ustride, vstride, uorder, vorder, packed, points);}
static void wrap_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
static void (APIENTRYP pglMapGrid1d)(GLint un, GLdouble u1, GLdouble u2) = wrap_glMapGrid1d;
static void wrap_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {return trampoline<void>("glMapGrid1d", nullptr, nullptr, nullptr, &pglMapGrid1d, un, u1, u2);}
extern "C" void APIENTRY glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {return (*pglMapGrid1d)(un, u1, u2);}
static void wrap_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
static void (APIENTRYP pglMapGrid1f)(GLint un, GLfloat u1, GLfloat u2) = wrap_glMapGrid1f;
static void wrap_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {return trampoline<void>("glMapGrid1f", nullptr, nullptr, nullptr, &pglMapGrid1f, un, u1, u2);}
extern "C" void APIENTRY glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {return (*pglMapGrid1f)(un, u1, u2);}
static void wrap_glMapGrid1x(GLint n, GLfixed u1, GLfixed u2);
static void (APIENTRYP pglMapGrid1x)(GLint n, GLfixed u1, GLfixed u2) = wrap_glMapGrid1x;
static void wrap_glMapGrid1x(GLint n, GLfixed u1, GLfixed u2) {return trampoline<void>("glMapGrid1x", "glMapGrid1xOES", nullptr, nullptr, &pglMapGrid1x, n, u1, u2);}
extern "C" void APIENTRY glMapGrid1x(GLint n, GLfixed u1, GLfixed u2) {return (*pglMapGrid1x)(n, u1, u2);}
static void wrap_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
static void (APIENTRYP pglMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) = wrap_glMapGrid2d;
static void wrap_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {return trampoline<void>("glMapGrid2d", nullptr, nullptr, nullptr, &pglMapGrid2d, un, u1, u2, vn, v1, v2);}
extern "C" void APIENTRY glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {return (*pglMapGrid2d)(un, u1, u2, vn, v1, v2);}
static void wrap_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
static void (APIENTRYP pglMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) = wrap_glMapGrid2f;
static void wrap_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {return trampoline<void>("glMapGrid2f", nullptr, nullptr, nullptr, &pglMapGrid2f, un, u1, u2, vn, v1, v2);}
extern "C" void APIENTRY glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {return (*pglMapGrid2f)(un, u1, u2, vn, v1, v2);}
static void wrap_glMapGrid2x(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
static void (APIENTRYP pglMapGrid2x)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) = wrap_glMapGrid2x;
static void wrap_glMapGrid2x(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) {return trampoline<void>("glMapGrid2x", "glMapGrid2xOES", nullptr, nullptr, &pglMapGrid2x, n, u1, u2, v1, v2);}
extern "C" void APIENTRY glMapGrid2x(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) {return (*pglMapGrid2x)(n, u1, u2, v1, v2);}
static void * wrap_glMapNamedBuffer(GLuint buffer, GLenum access);
static void * (APIENTRYP pglMapNamedBuffer)(GLuint buffer, GLenum access) = wrap_glMapNamedBuffer;
static void * wrap_glMapNamedBuffer(GLuint buffer, GLenum access) {return trampoline<void *>("glMapNamedBuffer", "glMapNamedBufferEXT", nullptr, nullptr, &pglMapNamedBuffer, buffer, access);}
extern "C" void * APIENTRY glMapNamedBuffer(GLuint buffer, GLenum access) {return (*pglMapNamedBuffer)(buffer, access);}
static void * wrap_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
static void * (APIENTRYP pglMapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) = wrap_glMapNamedBufferRange;
static void * wrap_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {return trampoline<void *>("glMapNamedBufferRange", "glMapNamedBufferRangeEXT", nullptr, nullptr, &pglMapNamedBufferRange, buffer, offset, length, access);}
extern "C" void * APIENTRY glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {return (*pglMapNamedBufferRange)(buffer, offset, length, access);}
static void * wrap_glMapObjectBuffer(GLuint buffer);
static void * (APIENTRYP pglMapObjectBuffer)(GLuint buffer) = wrap_glMapObjectBuffer;
static void * wrap_glMapObjectBuffer(GLuint buffer) {return trampoline<void *>("glMapObjectBuffer", "glMapObjectBufferATI", nullptr, nullptr, &pglMapObjectBuffer, buffer);}
extern "C" void * APIENTRY glMapObjectBuffer(GLuint buffer) {return (*pglMapObjectBuffer)(buffer);}
static void wrap_glMapParameterfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglMapParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glMapParameterfv;
static void wrap_glMapParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glMapParameterfv", "glMapParameterfvNV", nullptr, nullptr, &pglMapParameterfv, target, pname, params);}
extern "C" void APIENTRY glMapParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglMapParameterfv)(target, pname, params);}
static void wrap_glMapParameteriv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglMapParameteriv)(GLenum target, GLenum pname, const GLint *params) = wrap_glMapParameteriv;
static void wrap_glMapParameteriv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glMapParameteriv", "glMapParameterivNV", nullptr, nullptr, &pglMapParameteriv, target, pname, params);}
extern "C" void APIENTRY glMapParameteriv(GLenum target, GLenum pname, const GLint *params) {return (*pglMapParameteriv)(target, pname, params);}
static void * wrap_glMapTexture2D(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout);
static void * (APIENTRYP pglMapTexture2D)(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) = wrap_glMapTexture2D;
static void * wrap_glMapTexture2D(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) {return trampoline<void *>("glMapTexture2D", "glMapTexture2DINTEL", nullptr, nullptr, &pglMapTexture2D, texture, level, access, stride, layout);}
extern "C" void * APIENTRY glMapTexture2D(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) {return (*pglMapTexture2D)(texture, level, access, stride, layout);}
static void wrap_glMapVertexAttrib1d(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
static void (APIENTRYP pglMapVertexAttrib1d)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) = wrap_glMapVertexAttrib1d;
static void wrap_glMapVertexAttrib1d(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {return trampoline<void>("glMapVertexAttrib1d", "glMapVertexAttrib1dAPPLE", nullptr, nullptr, &pglMapVertexAttrib1d, index, size, u1, u2, stride, order, points);}
extern "C" void APIENTRY glMapVertexAttrib1d(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {return (*pglMapVertexAttrib1d)(index, size, u1, u2, stride, order, points);}
static void wrap_glMapVertexAttrib1f(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
static void (APIENTRYP pglMapVertexAttrib1f)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) = wrap_glMapVertexAttrib1f;
static void wrap_glMapVertexAttrib1f(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {return trampoline<void>("glMapVertexAttrib1f", "glMapVertexAttrib1fAPPLE", nullptr, nullptr, &pglMapVertexAttrib1f, index, size, u1, u2, stride, order, points);}
extern "C" void APIENTRY glMapVertexAttrib1f(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {return (*pglMapVertexAttrib1f)(index, size, u1, u2, stride, order, points);}
static void wrap_glMapVertexAttrib2d(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
static void (APIENTRYP pglMapVertexAttrib2d)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) = wrap_glMapVertexAttrib2d;
static void wrap_glMapVertexAttrib2d(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {return trampoline<void>("glMapVertexAttrib2d", "glMapVertexAttrib2dAPPLE", nullptr, nullptr, &pglMapVertexAttrib2d, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
extern "C" void APIENTRY glMapVertexAttrib2d(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {return (*pglMapVertexAttrib2d)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
static void wrap_glMapVertexAttrib2f(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
static void (APIENTRYP pglMapVertexAttrib2f)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) = wrap_glMapVertexAttrib2f;
static void wrap_glMapVertexAttrib2f(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {return trampoline<void>("glMapVertexAttrib2f", "glMapVertexAttrib2fAPPLE", nullptr, nullptr, &pglMapVertexAttrib2f, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
extern "C" void APIENTRY glMapVertexAttrib2f(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {return (*pglMapVertexAttrib2f)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
static void wrap_glMaterialf(GLenum face, GLenum pname, GLfloat param);
static void (APIENTRYP pglMaterialf)(GLenum face, GLenum pname, GLfloat param) = wrap_glMaterialf;
static void wrap_glMaterialf(GLenum face, GLenum pname, GLfloat param) {return trampoline<void>("glMaterialf", nullptr, nullptr, nullptr, &pglMaterialf, face, pname, param);}
extern "C" void APIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param) {return (*pglMaterialf)(face, pname, param);}
static void wrap_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglMaterialfv)(GLenum face, GLenum pname, const GLfloat *params) = wrap_glMaterialfv;
static void wrap_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {return trampoline<void>("glMaterialfv", nullptr, nullptr, nullptr, &pglMaterialfv, face, pname, params);}
extern "C" void APIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {return (*pglMaterialfv)(face, pname, params);}
static void wrap_glMateriali(GLenum face, GLenum pname, GLint param);
static void (APIENTRYP pglMateriali)(GLenum face, GLenum pname, GLint param) = wrap_glMateriali;
static void wrap_glMateriali(GLenum face, GLenum pname, GLint param) {return trampoline<void>("glMateriali", nullptr, nullptr, nullptr, &pglMateriali, face, pname, param);}
extern "C" void APIENTRY glMateriali(GLenum face, GLenum pname, GLint param) {return (*pglMateriali)(face, pname, param);}
static void wrap_glMaterialiv(GLenum face, GLenum pname, const GLint *params);
static void (APIENTRYP pglMaterialiv)(GLenum face, GLenum pname, const GLint *params) = wrap_glMaterialiv;
static void wrap_glMaterialiv(GLenum face, GLenum pname, const GLint *params) {return trampoline<void>("glMaterialiv", nullptr, nullptr, nullptr, &pglMaterialiv, face, pname, params);}
extern "C" void APIENTRY glMaterialiv(GLenum face, GLenum pname, const GLint *params) {return (*pglMaterialiv)(face, pname, params);}
static void wrap_glMaterialx(GLenum face, GLenum pname, GLfixed param);
static void (APIENTRYP pglMaterialx)(GLenum face, GLenum pname, GLfixed param) = wrap_glMaterialx;
static void wrap_glMaterialx(GLenum face, GLenum pname, GLfixed param) {return trampoline<void>("glMaterialx", "glMaterialxOES", nullptr, nullptr, &pglMaterialx, face, pname, param);}
extern "C" void APIENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param) {return (*pglMaterialx)(face, pname, param);}
static void wrap_glMaterialxv(GLenum face, GLenum pname, const GLfixed *param);
static void (APIENTRYP pglMaterialxv)(GLenum face, GLenum pname, const GLfixed *param) = wrap_glMaterialxv;
static void wrap_glMaterialxv(GLenum face, GLenum pname, const GLfixed *param) {return trampoline<void>("glMaterialxv", "glMaterialxvOES", nullptr, nullptr, &pglMaterialxv, face, pname, param);}
extern "C" void APIENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *param) {return (*pglMaterialxv)(face, pname, param);}
static void wrap_glMatrixFrustum(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
static void (APIENTRYP pglMatrixFrustum)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = wrap_glMatrixFrustum;
static void wrap_glMatrixFrustum(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {return trampoline<void>("glMatrixFrustum", "glMatrixFrustumEXT", nullptr, nullptr, &pglMatrixFrustum, mode, left, right, bottom, top, zNear, zFar);}
extern "C" void APIENTRY glMatrixFrustum(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {return (*pglMatrixFrustum)(mode, left, right, bottom, top, zNear, zFar);}
static void wrap_glMatrixIndexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglMatrixIndexPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glMatrixIndexPointer;
static void wrap_glMatrixIndexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glMatrixIndexPointer", "glMatrixIndexPointerARB", nullptr, nullptr, &pglMatrixIndexPointer, size, type, stride, pointer);}
extern "C" void APIENTRY glMatrixIndexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglMatrixIndexPointer)(size, type, stride, pointer);}
static void wrap_glMatrixIndexubv(GLint size, const GLubyte *indices);
static void (APIENTRYP pglMatrixIndexubv)(GLint size, const GLubyte *indices) = wrap_glMatrixIndexubv;
static void wrap_glMatrixIndexubv(GLint size, const GLubyte *indices) {return trampoline<void>("glMatrixIndexubv", "glMatrixIndexubvARB", nullptr, nullptr, &pglMatrixIndexubv, size, indices);}
extern "C" void APIENTRY glMatrixIndexubv(GLint size, const GLubyte *indices) {return (*pglMatrixIndexubv)(size, indices);}
static void wrap_glMatrixIndexuiv(GLint size, const GLuint *indices);
static void (APIENTRYP pglMatrixIndexuiv)(GLint size, const GLuint *indices) = wrap_glMatrixIndexuiv;
static void wrap_glMatrixIndexuiv(GLint size, const GLuint *indices) {return trampoline<void>("glMatrixIndexuiv", "glMatrixIndexuivARB", nullptr, nullptr, &pglMatrixIndexuiv, size, indices);}
extern "C" void APIENTRY glMatrixIndexuiv(GLint size, const GLuint *indices) {return (*pglMatrixIndexuiv)(size, indices);}
static void wrap_glMatrixIndexusv(GLint size, const GLushort *indices);
static void (APIENTRYP pglMatrixIndexusv)(GLint size, const GLushort *indices) = wrap_glMatrixIndexusv;
static void wrap_glMatrixIndexusv(GLint size, const GLushort *indices) {return trampoline<void>("glMatrixIndexusv", "glMatrixIndexusvARB", nullptr, nullptr, &pglMatrixIndexusv, size, indices);}
extern "C" void APIENTRY glMatrixIndexusv(GLint size, const GLushort *indices) {return (*pglMatrixIndexusv)(size, indices);}
static void wrap_glMatrixLoad3x2f(GLenum matrixMode, const GLfloat *m);
static void (APIENTRYP pglMatrixLoad3x2f)(GLenum matrixMode, const GLfloat *m) = wrap_glMatrixLoad3x2f;
static void wrap_glMatrixLoad3x2f(GLenum matrixMode, const GLfloat *m) {return trampoline<void>("glMatrixLoad3x2f", "glMatrixLoad3x2fNV", nullptr, nullptr, &pglMatrixLoad3x2f, matrixMode, m);}
extern "C" void APIENTRY glMatrixLoad3x2f(GLenum matrixMode, const GLfloat *m) {return (*pglMatrixLoad3x2f)(matrixMode, m);}
static void wrap_glMatrixLoad3x3f(GLenum matrixMode, const GLfloat *m);
static void (APIENTRYP pglMatrixLoad3x3f)(GLenum matrixMode, const GLfloat *m) = wrap_glMatrixLoad3x3f;
static void wrap_glMatrixLoad3x3f(GLenum matrixMode, const GLfloat *m) {return trampoline<void>("glMatrixLoad3x3f", "glMatrixLoad3x3fNV", nullptr, nullptr, &pglMatrixLoad3x3f, matrixMode, m);}
extern "C" void APIENTRY glMatrixLoad3x3f(GLenum matrixMode, const GLfloat *m) {return (*pglMatrixLoad3x3f)(matrixMode, m);}
static void wrap_glMatrixLoadIdentity(GLenum mode);
static void (APIENTRYP pglMatrixLoadIdentity)(GLenum mode) = wrap_glMatrixLoadIdentity;
static void wrap_glMatrixLoadIdentity(GLenum mode) {return trampoline<void>("glMatrixLoadIdentity", "glMatrixLoadIdentityEXT", nullptr, nullptr, &pglMatrixLoadIdentity, mode);}
extern "C" void APIENTRY glMatrixLoadIdentity(GLenum mode) {return (*pglMatrixLoadIdentity)(mode);}
static void wrap_glMatrixLoadTranspose3x3f(GLenum matrixMode, const GLfloat *m);
static void (APIENTRYP pglMatrixLoadTranspose3x3f)(GLenum matrixMode, const GLfloat *m) = wrap_glMatrixLoadTranspose3x3f;
static void wrap_glMatrixLoadTranspose3x3f(GLenum matrixMode, const GLfloat *m) {return trampoline<void>("glMatrixLoadTranspose3x3f", "glMatrixLoadTranspose3x3fNV", nullptr, nullptr, &pglMatrixLoadTranspose3x3f, matrixMode, m);}
extern "C" void APIENTRY glMatrixLoadTranspose3x3f(GLenum matrixMode, const GLfloat *m) {return (*pglMatrixLoadTranspose3x3f)(matrixMode, m);}
static void wrap_glMatrixLoadTransposed(GLenum mode, const GLdouble *m);
static void (APIENTRYP pglMatrixLoadTransposed)(GLenum mode, const GLdouble *m) = wrap_glMatrixLoadTransposed;
static void wrap_glMatrixLoadTransposed(GLenum mode, const GLdouble *m) {return trampoline<void>("glMatrixLoadTransposed", "glMatrixLoadTransposedEXT", nullptr, nullptr, &pglMatrixLoadTransposed, mode, m);}
extern "C" void APIENTRY glMatrixLoadTransposed(GLenum mode, const GLdouble *m) {return (*pglMatrixLoadTransposed)(mode, m);}
static void wrap_glMatrixLoadTransposef(GLenum mode, const GLfloat *m);
static void (APIENTRYP pglMatrixLoadTransposef)(GLenum mode, const GLfloat *m) = wrap_glMatrixLoadTransposef;
static void wrap_glMatrixLoadTransposef(GLenum mode, const GLfloat *m) {return trampoline<void>("glMatrixLoadTransposef", "glMatrixLoadTransposefEXT", nullptr, nullptr, &pglMatrixLoadTransposef, mode, m);}
extern "C" void APIENTRY glMatrixLoadTransposef(GLenum mode, const GLfloat *m) {return (*pglMatrixLoadTransposef)(mode, m);}
static void wrap_glMatrixLoadd(GLenum mode, const GLdouble *m);
static void (APIENTRYP pglMatrixLoadd)(GLenum mode, const GLdouble *m) = wrap_glMatrixLoadd;
static void wrap_glMatrixLoadd(GLenum mode, const GLdouble *m) {return trampoline<void>("glMatrixLoadd", "glMatrixLoaddEXT", nullptr, nullptr, &pglMatrixLoadd, mode, m);}
extern "C" void APIENTRY glMatrixLoadd(GLenum mode, const GLdouble *m) {return (*pglMatrixLoadd)(mode, m);}
static void wrap_glMatrixLoadf(GLenum mode, const GLfloat *m);
static void (APIENTRYP pglMatrixLoadf)(GLenum mode, const GLfloat *m) = wrap_glMatrixLoadf;
static void wrap_glMatrixLoadf(GLenum mode, const GLfloat *m) {return trampoline<void>("glMatrixLoadf", "glMatrixLoadfEXT", nullptr, nullptr, &pglMatrixLoadf, mode, m);}
extern "C" void APIENTRY glMatrixLoadf(GLenum mode, const GLfloat *m) {return (*pglMatrixLoadf)(mode, m);}
static void wrap_glMatrixMode(GLenum mode);
static void (APIENTRYP pglMatrixMode)(GLenum mode) = wrap_glMatrixMode;
static void wrap_glMatrixMode(GLenum mode) {return trampoline<void>("glMatrixMode", nullptr, nullptr, nullptr, &pglMatrixMode, mode);}
extern "C" void APIENTRY glMatrixMode(GLenum mode) {return (*pglMatrixMode)(mode);}
static void wrap_glMatrixMult3x2f(GLenum matrixMode, const GLfloat *m);
static void (APIENTRYP pglMatrixMult3x2f)(GLenum matrixMode, const GLfloat *m) = wrap_glMatrixMult3x2f;
static void wrap_glMatrixMult3x2f(GLenum matrixMode, const GLfloat *m) {return trampoline<void>("glMatrixMult3x2f", "glMatrixMult3x2fNV", nullptr, nullptr, &pglMatrixMult3x2f, matrixMode, m);}
extern "C" void APIENTRY glMatrixMult3x2f(GLenum matrixMode, const GLfloat *m) {return (*pglMatrixMult3x2f)(matrixMode, m);}
static void wrap_glMatrixMult3x3f(GLenum matrixMode, const GLfloat *m);
static void (APIENTRYP pglMatrixMult3x3f)(GLenum matrixMode, const GLfloat *m) = wrap_glMatrixMult3x3f;
static void wrap_glMatrixMult3x3f(GLenum matrixMode, const GLfloat *m) {return trampoline<void>("glMatrixMult3x3f", "glMatrixMult3x3fNV", nullptr, nullptr, &pglMatrixMult3x3f, matrixMode, m);}
extern "C" void APIENTRY glMatrixMult3x3f(GLenum matrixMode, const GLfloat *m) {return (*pglMatrixMult3x3f)(matrixMode, m);}
static void wrap_glMatrixMultTranspose3x3f(GLenum matrixMode, const GLfloat *m);
static void (APIENTRYP pglMatrixMultTranspose3x3f)(GLenum matrixMode, const GLfloat *m) = wrap_glMatrixMultTranspose3x3f;
static void wrap_glMatrixMultTranspose3x3f(GLenum matrixMode, const GLfloat *m) {return trampoline<void>("glMatrixMultTranspose3x3f", "glMatrixMultTranspose3x3fNV", nullptr, nullptr, &pglMatrixMultTranspose3x3f, matrixMode, m);}
extern "C" void APIENTRY glMatrixMultTranspose3x3f(GLenum matrixMode, const GLfloat *m) {return (*pglMatrixMultTranspose3x3f)(matrixMode, m);}
static void wrap_glMatrixMultTransposed(GLenum mode, const GLdouble *m);
static void (APIENTRYP pglMatrixMultTransposed)(GLenum mode, const GLdouble *m) = wrap_glMatrixMultTransposed;
static void wrap_glMatrixMultTransposed(GLenum mode, const GLdouble *m) {return trampoline<void>("glMatrixMultTransposed", "glMatrixMultTransposedEXT", nullptr, nullptr, &pglMatrixMultTransposed, mode, m);}
extern "C" void APIENTRY glMatrixMultTransposed(GLenum mode, const GLdouble *m) {return (*pglMatrixMultTransposed)(mode, m);}
static void wrap_glMatrixMultTransposef(GLenum mode, const GLfloat *m);
static void (APIENTRYP pglMatrixMultTransposef)(GLenum mode, const GLfloat *m) = wrap_glMatrixMultTransposef;
static void wrap_glMatrixMultTransposef(GLenum mode, const GLfloat *m) {return trampoline<void>("glMatrixMultTransposef", "glMatrixMultTransposefEXT", nullptr, nullptr, &pglMatrixMultTransposef, mode, m);}
extern "C" void APIENTRY glMatrixMultTransposef(GLenum mode, const GLfloat *m) {return (*pglMatrixMultTransposef)(mode, m);}
static void wrap_glMatrixMultd(GLenum mode, const GLdouble *m);
static void (APIENTRYP pglMatrixMultd)(GLenum mode, const GLdouble *m) = wrap_glMatrixMultd;
static void wrap_glMatrixMultd(GLenum mode, const GLdouble *m) {return trampoline<void>("glMatrixMultd", "glMatrixMultdEXT", nullptr, nullptr, &pglMatrixMultd, mode, m);}
extern "C" void APIENTRY glMatrixMultd(GLenum mode, const GLdouble *m) {return (*pglMatrixMultd)(mode, m);}
static void wrap_glMatrixMultf(GLenum mode, const GLfloat *m);
static void (APIENTRYP pglMatrixMultf)(GLenum mode, const GLfloat *m) = wrap_glMatrixMultf;
static void wrap_glMatrixMultf(GLenum mode, const GLfloat *m) {return trampoline<void>("glMatrixMultf", "glMatrixMultfEXT", nullptr, nullptr, &pglMatrixMultf, mode, m);}
extern "C" void APIENTRY glMatrixMultf(GLenum mode, const GLfloat *m) {return (*pglMatrixMultf)(mode, m);}
static void wrap_glMatrixOrtho(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
static void (APIENTRYP pglMatrixOrtho)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = wrap_glMatrixOrtho;
static void wrap_glMatrixOrtho(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {return trampoline<void>("glMatrixOrtho", "glMatrixOrthoEXT", nullptr, nullptr, &pglMatrixOrtho, mode, left, right, bottom, top, zNear, zFar);}
extern "C" void APIENTRY glMatrixOrtho(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {return (*pglMatrixOrtho)(mode, left, right, bottom, top, zNear, zFar);}
static void wrap_glMatrixPop(GLenum mode);
static void (APIENTRYP pglMatrixPop)(GLenum mode) = wrap_glMatrixPop;
static void wrap_glMatrixPop(GLenum mode) {return trampoline<void>("glMatrixPop", "glMatrixPopEXT", nullptr, nullptr, &pglMatrixPop, mode);}
extern "C" void APIENTRY glMatrixPop(GLenum mode) {return (*pglMatrixPop)(mode);}
static void wrap_glMatrixPush(GLenum mode);
static void (APIENTRYP pglMatrixPush)(GLenum mode) = wrap_glMatrixPush;
static void wrap_glMatrixPush(GLenum mode) {return trampoline<void>("glMatrixPush", "glMatrixPushEXT", nullptr, nullptr, &pglMatrixPush, mode);}
extern "C" void APIENTRY glMatrixPush(GLenum mode) {return (*pglMatrixPush)(mode);}
static void wrap_glMatrixRotated(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglMatrixRotated)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = wrap_glMatrixRotated;
static void wrap_glMatrixRotated(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glMatrixRotated", "glMatrixRotatedEXT", nullptr, nullptr, &pglMatrixRotated, mode, angle, x, y, z);}
extern "C" void APIENTRY glMatrixRotated(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {return (*pglMatrixRotated)(mode, angle, x, y, z);}
static void wrap_glMatrixRotatef(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglMatrixRotatef)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = wrap_glMatrixRotatef;
static void wrap_glMatrixRotatef(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glMatrixRotatef", "glMatrixRotatefEXT", nullptr, nullptr, &pglMatrixRotatef, mode, angle, x, y, z);}
extern "C" void APIENTRY glMatrixRotatef(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {return (*pglMatrixRotatef)(mode, angle, x, y, z);}
static void wrap_glMatrixScaled(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglMatrixScaled)(GLenum mode, GLdouble x, GLdouble y, GLdouble z) = wrap_glMatrixScaled;
static void wrap_glMatrixScaled(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glMatrixScaled", "glMatrixScaledEXT", nullptr, nullptr, &pglMatrixScaled, mode, x, y, z);}
extern "C" void APIENTRY glMatrixScaled(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {return (*pglMatrixScaled)(mode, x, y, z);}
static void wrap_glMatrixScalef(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglMatrixScalef)(GLenum mode, GLfloat x, GLfloat y, GLfloat z) = wrap_glMatrixScalef;
static void wrap_glMatrixScalef(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glMatrixScalef", "glMatrixScalefEXT", nullptr, nullptr, &pglMatrixScalef, mode, x, y, z);}
extern "C" void APIENTRY glMatrixScalef(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {return (*pglMatrixScalef)(mode, x, y, z);}
static void wrap_glMatrixTranslated(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglMatrixTranslated)(GLenum mode, GLdouble x, GLdouble y, GLdouble z) = wrap_glMatrixTranslated;
static void wrap_glMatrixTranslated(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glMatrixTranslated", "glMatrixTranslatedEXT", nullptr, nullptr, &pglMatrixTranslated, mode, x, y, z);}
extern "C" void APIENTRY glMatrixTranslated(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {return (*pglMatrixTranslated)(mode, x, y, z);}
static void wrap_glMatrixTranslatef(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglMatrixTranslatef)(GLenum mode, GLfloat x, GLfloat y, GLfloat z) = wrap_glMatrixTranslatef;
static void wrap_glMatrixTranslatef(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glMatrixTranslatef", "glMatrixTranslatefEXT", nullptr, nullptr, &pglMatrixTranslatef, mode, x, y, z);}
extern "C" void APIENTRY glMatrixTranslatef(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {return (*pglMatrixTranslatef)(mode, x, y, z);}
static void wrap_glMaxShaderCompilerThreads(GLuint count);
static void (APIENTRYP pglMaxShaderCompilerThreads)(GLuint count) = wrap_glMaxShaderCompilerThreads;
static void wrap_glMaxShaderCompilerThreads(GLuint count) {return trampoline<void>("glMaxShaderCompilerThreads", "glMaxShaderCompilerThreadsARB", nullptr, nullptr, &pglMaxShaderCompilerThreads, count);}
extern "C" void APIENTRY glMaxShaderCompilerThreads(GLuint count) {return (*pglMaxShaderCompilerThreads)(count);}
static void wrap_glMemoryBarrier(GLbitfield barriers);
static void (APIENTRYP pglMemoryBarrier)(GLbitfield barriers) = wrap_glMemoryBarrier;
static void wrap_glMemoryBarrier(GLbitfield barriers) {return trampoline<void>("glMemoryBarrier", "glMemoryBarrierEXT", nullptr, nullptr, &pglMemoryBarrier, barriers);}
extern "C" void APIENTRY glMemoryBarrier(GLbitfield barriers) {return (*pglMemoryBarrier)(barriers);}
static void wrap_glMemoryBarrierByRegion(GLbitfield barriers);
static void (APIENTRYP pglMemoryBarrierByRegion)(GLbitfield barriers) = wrap_glMemoryBarrierByRegion;
static void wrap_glMemoryBarrierByRegion(GLbitfield barriers) {return trampoline<void>("glMemoryBarrierByRegion", nullptr, nullptr, nullptr, &pglMemoryBarrierByRegion, barriers);}
extern "C" void APIENTRY glMemoryBarrierByRegion(GLbitfield barriers) {return (*pglMemoryBarrierByRegion)(barriers);}
static void wrap_glMinSampleShading(GLfloat value);
static void (APIENTRYP pglMinSampleShading)(GLfloat value) = wrap_glMinSampleShading;
static void wrap_glMinSampleShading(GLfloat value) {return trampoline<void>("glMinSampleShading", "glMinSampleShadingARB", nullptr, nullptr, &pglMinSampleShading, value);}
extern "C" void APIENTRY glMinSampleShading(GLfloat value) {return (*pglMinSampleShading)(value);}
static void wrap_glMinmax(GLenum target, GLenum internalformat, GLboolean sink);
static void (APIENTRYP pglMinmax)(GLenum target, GLenum internalformat, GLboolean sink) = wrap_glMinmax;
static void wrap_glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {return trampoline<void>("glMinmax", "glMinmaxEXT", nullptr, nullptr, &pglMinmax, target, internalformat, sink);}
extern "C" void APIENTRY glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {return (*pglMinmax)(target, internalformat, sink);}
static void wrap_glMultMatrixd(const GLdouble *m);
static void (APIENTRYP pglMultMatrixd)(const GLdouble *m) = wrap_glMultMatrixd;
static void wrap_glMultMatrixd(const GLdouble *m) {return trampoline<void>("glMultMatrixd", nullptr, nullptr, nullptr, &pglMultMatrixd, m);}
extern "C" void APIENTRY glMultMatrixd(const GLdouble *m) {return (*pglMultMatrixd)(m);}
static void wrap_glMultMatrixf(const GLfloat *m);
static void (APIENTRYP pglMultMatrixf)(const GLfloat *m) = wrap_glMultMatrixf;
static void wrap_glMultMatrixf(const GLfloat *m) {return trampoline<void>("glMultMatrixf", nullptr, nullptr, nullptr, &pglMultMatrixf, m);}
extern "C" void APIENTRY glMultMatrixf(const GLfloat *m) {return (*pglMultMatrixf)(m);}
static void wrap_glMultMatrixx(const GLfixed *m);
static void (APIENTRYP pglMultMatrixx)(const GLfixed *m) = wrap_glMultMatrixx;
static void wrap_glMultMatrixx(const GLfixed *m) {return trampoline<void>("glMultMatrixx", "glMultMatrixxOES", nullptr, nullptr, &pglMultMatrixx, m);}
extern "C" void APIENTRY glMultMatrixx(const GLfixed *m) {return (*pglMultMatrixx)(m);}
static void wrap_glMultTransposeMatrixd(const GLdouble m[16]);
static void (APIENTRYP pglMultTransposeMatrixd)(const GLdouble m[16]) = wrap_glMultTransposeMatrixd;
static void wrap_glMultTransposeMatrixd(const GLdouble m[16]) {return trampoline<void>("glMultTransposeMatrixd", "glMultTransposeMatrixdARB", nullptr, nullptr, &pglMultTransposeMatrixd, m);}
extern "C" void APIENTRY glMultTransposeMatrixd(const GLdouble m[16]) {return (*pglMultTransposeMatrixd)(m);}
static void wrap_glMultTransposeMatrixf(const GLfloat m[16]);
static void (APIENTRYP pglMultTransposeMatrixf)(const GLfloat m[16]) = wrap_glMultTransposeMatrixf;
static void wrap_glMultTransposeMatrixf(const GLfloat m[16]) {return trampoline<void>("glMultTransposeMatrixf", "glMultTransposeMatrixfARB", nullptr, nullptr, &pglMultTransposeMatrixf, m);}
extern "C" void APIENTRY glMultTransposeMatrixf(const GLfloat m[16]) {return (*pglMultTransposeMatrixf)(m);}
static void wrap_glMultTransposeMatrixx(const GLfixed *m);
static void (APIENTRYP pglMultTransposeMatrixx)(const GLfixed *m) = wrap_glMultTransposeMatrixx;
static void wrap_glMultTransposeMatrixx(const GLfixed *m) {return trampoline<void>("glMultTransposeMatrixx", "glMultTransposeMatrixxOES", nullptr, nullptr, &pglMultTransposeMatrixx, m);}
extern "C" void APIENTRY glMultTransposeMatrixx(const GLfixed *m) {return (*pglMultTransposeMatrixx)(m);}
static void wrap_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
static void (APIENTRYP pglMultiDrawArrays)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) = wrap_glMultiDrawArrays;
static void wrap_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {return trampoline<void>("glMultiDrawArrays", "glMultiDrawArraysEXT", nullptr, nullptr, &pglMultiDrawArrays, mode, first, count, drawcount);}
extern "C" void APIENTRY glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {return (*pglMultiDrawArrays)(mode, first, count, drawcount);}
static void wrap_glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
static void (APIENTRYP pglMultiDrawArraysIndirect)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) = wrap_glMultiDrawArraysIndirect;
static void wrap_glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {return trampoline<void>("glMultiDrawArraysIndirect", "glMultiDrawArraysIndirectAMD", nullptr, nullptr, &pglMultiDrawArraysIndirect, mode, indirect, drawcount, stride);}
extern "C" void APIENTRY glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {return (*pglMultiDrawArraysIndirect)(mode, indirect, drawcount, stride);}
static void wrap_glMultiDrawArraysIndirectBindless(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
static void (APIENTRYP pglMultiDrawArraysIndirectBindless)(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) = wrap_glMultiDrawArraysIndirectBindless;
static void wrap_glMultiDrawArraysIndirectBindless(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {return trampoline<void>("glMultiDrawArraysIndirectBindless", "glMultiDrawArraysIndirectBindlessNV", nullptr, nullptr, &pglMultiDrawArraysIndirectBindless, mode, indirect, drawCount, stride, vertexBufferCount);}
extern "C" void APIENTRY glMultiDrawArraysIndirectBindless(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {return (*pglMultiDrawArraysIndirectBindless)(mode, indirect, drawCount, stride, vertexBufferCount);}
static void wrap_glMultiDrawArraysIndirectBindlessCount(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
static void (APIENTRYP pglMultiDrawArraysIndirectBindlessCount)(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) = wrap_glMultiDrawArraysIndirectBindlessCount;
static void wrap_glMultiDrawArraysIndirectBindlessCount(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {return trampoline<void>("glMultiDrawArraysIndirectBindlessCount", "glMultiDrawArraysIndirectBindlessCountNV", nullptr, nullptr, &pglMultiDrawArraysIndirectBindlessCount, mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);}
extern "C" void APIENTRY glMultiDrawArraysIndirectBindlessCount(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {return (*pglMultiDrawArraysIndirectBindlessCount)(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);}
static void wrap_glMultiDrawArraysIndirectCount(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
static void (APIENTRYP pglMultiDrawArraysIndirectCount)(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = wrap_glMultiDrawArraysIndirectCount;
static void wrap_glMultiDrawArraysIndirectCount(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {return trampoline<void>("glMultiDrawArraysIndirectCount", "glMultiDrawArraysIndirectCountARB", nullptr, nullptr, &pglMultiDrawArraysIndirectCount, mode, indirect, drawcount, maxdrawcount, stride);}
extern "C" void APIENTRY glMultiDrawArraysIndirectCount(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {return (*pglMultiDrawArraysIndirectCount)(mode, indirect, drawcount, maxdrawcount, stride);}
static void wrap_glMultiDrawElementArray(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
static void (APIENTRYP pglMultiDrawElementArray)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) = wrap_glMultiDrawElementArray;
static void wrap_glMultiDrawElementArray(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {return trampoline<void>("glMultiDrawElementArray", "glMultiDrawElementArrayAPPLE", nullptr, nullptr, &pglMultiDrawElementArray, mode, first, count, primcount);}
extern "C" void APIENTRY glMultiDrawElementArray(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {return (*pglMultiDrawElementArray)(mode, first, count, primcount);}
static void wrap_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
static void (APIENTRYP pglMultiDrawElements)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) = wrap_glMultiDrawElements;
static void wrap_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {return trampoline<void>("glMultiDrawElements", "glMultiDrawElementsEXT", nullptr, nullptr, &pglMultiDrawElements, mode, count, type, indices, drawcount);}
extern "C" void APIENTRY glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {return (*pglMultiDrawElements)(mode, count, type, indices, drawcount);}
static void wrap_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
static void (APIENTRYP pglMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) = wrap_glMultiDrawElementsBaseVertex;
static void wrap_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {return trampoline<void>("glMultiDrawElementsBaseVertex", nullptr, nullptr, nullptr, &pglMultiDrawElementsBaseVertex, mode, count, type, indices, drawcount, basevertex);}
extern "C" void APIENTRY glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {return (*pglMultiDrawElementsBaseVertex)(mode, count, type, indices, drawcount, basevertex);}
static void wrap_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
static void (APIENTRYP pglMultiDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) = wrap_glMultiDrawElementsIndirect;
static void wrap_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {return trampoline<void>("glMultiDrawElementsIndirect", "glMultiDrawElementsIndirectAMD", nullptr, nullptr, &pglMultiDrawElementsIndirect, mode, type, indirect, drawcount, stride);}
extern "C" void APIENTRY glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {return (*pglMultiDrawElementsIndirect)(mode, type, indirect, drawcount, stride);}
static void wrap_glMultiDrawElementsIndirectBindless(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
static void (APIENTRYP pglMultiDrawElementsIndirectBindless)(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) = wrap_glMultiDrawElementsIndirectBindless;
static void wrap_glMultiDrawElementsIndirectBindless(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {return trampoline<void>("glMultiDrawElementsIndirectBindless", "glMultiDrawElementsIndirectBindlessNV", nullptr, nullptr, &pglMultiDrawElementsIndirectBindless, mode, type, indirect, drawCount, stride, vertexBufferCount);}
extern "C" void APIENTRY glMultiDrawElementsIndirectBindless(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {return (*pglMultiDrawElementsIndirectBindless)(mode, type, indirect, drawCount, stride, vertexBufferCount);}
static void wrap_glMultiDrawElementsIndirectBindlessCount(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
static void (APIENTRYP pglMultiDrawElementsIndirectBindlessCount)(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) = wrap_glMultiDrawElementsIndirectBindlessCount;
static void wrap_glMultiDrawElementsIndirectBindlessCount(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {return trampoline<void>("glMultiDrawElementsIndirectBindlessCount", "glMultiDrawElementsIndirectBindlessCountNV", nullptr, nullptr, &pglMultiDrawElementsIndirectBindlessCount, mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);}
extern "C" void APIENTRY glMultiDrawElementsIndirectBindlessCount(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {return (*pglMultiDrawElementsIndirectBindlessCount)(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);}
static void wrap_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
static void (APIENTRYP pglMultiDrawElementsIndirectCount)(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = wrap_glMultiDrawElementsIndirectCount;
static void wrap_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {return trampoline<void>("glMultiDrawElementsIndirectCount", "glMultiDrawElementsIndirectCountARB", nullptr, nullptr, &pglMultiDrawElementsIndirectCount, mode, type, indirect, drawcount, maxdrawcount, stride);}
extern "C" void APIENTRY glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {return (*pglMultiDrawElementsIndirectCount)(mode, type, indirect, drawcount, maxdrawcount, stride);}
static void wrap_glMultiDrawRangeElementArray(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
static void (APIENTRYP pglMultiDrawRangeElementArray)(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) = wrap_glMultiDrawRangeElementArray;
static void wrap_glMultiDrawRangeElementArray(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) {return trampoline<void>("glMultiDrawRangeElementArray", "glMultiDrawRangeElementArrayAPPLE", nullptr, nullptr, &pglMultiDrawRangeElementArray, mode, start, end, first, count, primcount);}
extern "C" void APIENTRY glMultiDrawRangeElementArray(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) {return (*pglMultiDrawRangeElementArray)(mode, start, end, first, count, primcount);}
static void wrap_glMultiModeDrawArrays(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
static void (APIENTRYP pglMultiModeDrawArrays)(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) = wrap_glMultiModeDrawArrays;
static void wrap_glMultiModeDrawArrays(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) {return trampoline<void>("glMultiModeDrawArrays", "glMultiModeDrawArraysIBM", nullptr, nullptr, &pglMultiModeDrawArrays, mode, first, count, primcount, modestride);}
extern "C" void APIENTRY glMultiModeDrawArrays(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) {return (*pglMultiModeDrawArrays)(mode, first, count, primcount, modestride);}
static void wrap_glMultiModeDrawElements(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);
static void (APIENTRYP pglMultiModeDrawElements)(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride) = wrap_glMultiModeDrawElements;
static void wrap_glMultiModeDrawElements(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride) {return trampoline<void>("glMultiModeDrawElements", "glMultiModeDrawElementsIBM", nullptr, nullptr, &pglMultiModeDrawElements, mode, count, type, indices, primcount, modestride);}
extern "C" void APIENTRY glMultiModeDrawElements(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride) {return (*pglMultiModeDrawElements)(mode, count, type, indices, primcount, modestride);}
static void wrap_glMultiTexBuffer(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
static void (APIENTRYP pglMultiTexBuffer)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) = wrap_glMultiTexBuffer;
static void wrap_glMultiTexBuffer(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {return trampoline<void>("glMultiTexBuffer", "glMultiTexBufferEXT", nullptr, nullptr, &pglMultiTexBuffer, texunit, target, internalformat, buffer);}
extern "C" void APIENTRY glMultiTexBuffer(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {return (*pglMultiTexBuffer)(texunit, target, internalformat, buffer);}
static void wrap_glMultiTexCoord1b(GLenum texture, GLbyte s);
static void (APIENTRYP pglMultiTexCoord1b)(GLenum texture, GLbyte s) = wrap_glMultiTexCoord1b;
static void wrap_glMultiTexCoord1b(GLenum texture, GLbyte s) {return trampoline<void>("glMultiTexCoord1b", "glMultiTexCoord1bOES", nullptr, nullptr, &pglMultiTexCoord1b, texture, s);}
extern "C" void APIENTRY glMultiTexCoord1b(GLenum texture, GLbyte s) {return (*pglMultiTexCoord1b)(texture, s);}
static void wrap_glMultiTexCoord1bv(GLenum texture, const GLbyte *coords);
static void (APIENTRYP pglMultiTexCoord1bv)(GLenum texture, const GLbyte *coords) = wrap_glMultiTexCoord1bv;
static void wrap_glMultiTexCoord1bv(GLenum texture, const GLbyte *coords) {return trampoline<void>("glMultiTexCoord1bv", "glMultiTexCoord1bvOES", nullptr, nullptr, &pglMultiTexCoord1bv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord1bv(GLenum texture, const GLbyte *coords) {return (*pglMultiTexCoord1bv)(texture, coords);}
static void wrap_glMultiTexCoord1d(GLenum target, GLdouble s);
static void (APIENTRYP pglMultiTexCoord1d)(GLenum target, GLdouble s) = wrap_glMultiTexCoord1d;
static void wrap_glMultiTexCoord1d(GLenum target, GLdouble s) {return trampoline<void>("glMultiTexCoord1d", "glMultiTexCoord1dARB", "glMultiTexCoord1dARB", nullptr, &pglMultiTexCoord1d, target, s);}
extern "C" void APIENTRY glMultiTexCoord1d(GLenum target, GLdouble s) {return (*pglMultiTexCoord1d)(target, s);}
static void wrap_glMultiTexCoord1dv(GLenum target, const GLdouble *v);
static void (APIENTRYP pglMultiTexCoord1dv)(GLenum target, const GLdouble *v) = wrap_glMultiTexCoord1dv;
static void wrap_glMultiTexCoord1dv(GLenum target, const GLdouble *v) {return trampoline<void>("glMultiTexCoord1dv", "glMultiTexCoord1dvARB", "glMultiTexCoord1dvARB", nullptr, &pglMultiTexCoord1dv, target, v);}
extern "C" void APIENTRY glMultiTexCoord1dv(GLenum target, const GLdouble *v) {return (*pglMultiTexCoord1dv)(target, v);}
static void wrap_glMultiTexCoord1f(GLenum target, GLfloat s);
static void (APIENTRYP pglMultiTexCoord1f)(GLenum target, GLfloat s) = wrap_glMultiTexCoord1f;
static void wrap_glMultiTexCoord1f(GLenum target, GLfloat s) {return trampoline<void>("glMultiTexCoord1f", "glMultiTexCoord1fARB", "glMultiTexCoord1fARB", nullptr, &pglMultiTexCoord1f, target, s);}
extern "C" void APIENTRY glMultiTexCoord1f(GLenum target, GLfloat s) {return (*pglMultiTexCoord1f)(target, s);}
static void wrap_glMultiTexCoord1fv(GLenum target, const GLfloat *v);
static void (APIENTRYP pglMultiTexCoord1fv)(GLenum target, const GLfloat *v) = wrap_glMultiTexCoord1fv;
static void wrap_glMultiTexCoord1fv(GLenum target, const GLfloat *v) {return trampoline<void>("glMultiTexCoord1fv", "glMultiTexCoord1fvARB", "glMultiTexCoord1fvARB", nullptr, &pglMultiTexCoord1fv, target, v);}
extern "C" void APIENTRY glMultiTexCoord1fv(GLenum target, const GLfloat *v) {return (*pglMultiTexCoord1fv)(target, v);}
static void wrap_glMultiTexCoord1h(GLenum target, GLhalfNV s);
static void (APIENTRYP pglMultiTexCoord1h)(GLenum target, GLhalfNV s) = wrap_glMultiTexCoord1h;
static void wrap_glMultiTexCoord1h(GLenum target, GLhalfNV s) {return trampoline<void>("glMultiTexCoord1h", "glMultiTexCoord1hNV", nullptr, nullptr, &pglMultiTexCoord1h, target, s);}
extern "C" void APIENTRY glMultiTexCoord1h(GLenum target, GLhalfNV s) {return (*pglMultiTexCoord1h)(target, s);}
static void wrap_glMultiTexCoord1hv(GLenum target, const GLhalfNV *v);
static void (APIENTRYP pglMultiTexCoord1hv)(GLenum target, const GLhalfNV *v) = wrap_glMultiTexCoord1hv;
static void wrap_glMultiTexCoord1hv(GLenum target, const GLhalfNV *v) {return trampoline<void>("glMultiTexCoord1hv", "glMultiTexCoord1hvNV", nullptr, nullptr, &pglMultiTexCoord1hv, target, v);}
extern "C" void APIENTRY glMultiTexCoord1hv(GLenum target, const GLhalfNV *v) {return (*pglMultiTexCoord1hv)(target, v);}
static void wrap_glMultiTexCoord1i(GLenum target, GLint s);
static void (APIENTRYP pglMultiTexCoord1i)(GLenum target, GLint s) = wrap_glMultiTexCoord1i;
static void wrap_glMultiTexCoord1i(GLenum target, GLint s) {return trampoline<void>("glMultiTexCoord1i", "glMultiTexCoord1iARB", "glMultiTexCoord1iARB", nullptr, &pglMultiTexCoord1i, target, s);}
extern "C" void APIENTRY glMultiTexCoord1i(GLenum target, GLint s) {return (*pglMultiTexCoord1i)(target, s);}
static void wrap_glMultiTexCoord1iv(GLenum target, const GLint *v);
static void (APIENTRYP pglMultiTexCoord1iv)(GLenum target, const GLint *v) = wrap_glMultiTexCoord1iv;
static void wrap_glMultiTexCoord1iv(GLenum target, const GLint *v) {return trampoline<void>("glMultiTexCoord1iv", "glMultiTexCoord1ivARB", "glMultiTexCoord1ivARB", nullptr, &pglMultiTexCoord1iv, target, v);}
extern "C" void APIENTRY glMultiTexCoord1iv(GLenum target, const GLint *v) {return (*pglMultiTexCoord1iv)(target, v);}
static void wrap_glMultiTexCoord1s(GLenum target, GLshort s);
static void (APIENTRYP pglMultiTexCoord1s)(GLenum target, GLshort s) = wrap_glMultiTexCoord1s;
static void wrap_glMultiTexCoord1s(GLenum target, GLshort s) {return trampoline<void>("glMultiTexCoord1s", "glMultiTexCoord1sARB", "glMultiTexCoord1sARB", nullptr, &pglMultiTexCoord1s, target, s);}
extern "C" void APIENTRY glMultiTexCoord1s(GLenum target, GLshort s) {return (*pglMultiTexCoord1s)(target, s);}
static void wrap_glMultiTexCoord1sv(GLenum target, const GLshort *v);
static void (APIENTRYP pglMultiTexCoord1sv)(GLenum target, const GLshort *v) = wrap_glMultiTexCoord1sv;
static void wrap_glMultiTexCoord1sv(GLenum target, const GLshort *v) {return trampoline<void>("glMultiTexCoord1sv", "glMultiTexCoord1svARB", "glMultiTexCoord1svARB", nullptr, &pglMultiTexCoord1sv, target, v);}
extern "C" void APIENTRY glMultiTexCoord1sv(GLenum target, const GLshort *v) {return (*pglMultiTexCoord1sv)(target, v);}
static void wrap_glMultiTexCoord1x(GLenum texture, GLfixed s);
static void (APIENTRYP pglMultiTexCoord1x)(GLenum texture, GLfixed s) = wrap_glMultiTexCoord1x;
static void wrap_glMultiTexCoord1x(GLenum texture, GLfixed s) {return trampoline<void>("glMultiTexCoord1x", "glMultiTexCoord1xOES", nullptr, nullptr, &pglMultiTexCoord1x, texture, s);}
extern "C" void APIENTRY glMultiTexCoord1x(GLenum texture, GLfixed s) {return (*pglMultiTexCoord1x)(texture, s);}
static void wrap_glMultiTexCoord1xv(GLenum texture, const GLfixed *coords);
static void (APIENTRYP pglMultiTexCoord1xv)(GLenum texture, const GLfixed *coords) = wrap_glMultiTexCoord1xv;
static void wrap_glMultiTexCoord1xv(GLenum texture, const GLfixed *coords) {return trampoline<void>("glMultiTexCoord1xv", "glMultiTexCoord1xvOES", nullptr, nullptr, &pglMultiTexCoord1xv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord1xv(GLenum texture, const GLfixed *coords) {return (*pglMultiTexCoord1xv)(texture, coords);}
static void wrap_glMultiTexCoord2b(GLenum texture, GLbyte s, GLbyte t);
static void (APIENTRYP pglMultiTexCoord2b)(GLenum texture, GLbyte s, GLbyte t) = wrap_glMultiTexCoord2b;
static void wrap_glMultiTexCoord2b(GLenum texture, GLbyte s, GLbyte t) {return trampoline<void>("glMultiTexCoord2b", "glMultiTexCoord2bOES", nullptr, nullptr, &pglMultiTexCoord2b, texture, s, t);}
extern "C" void APIENTRY glMultiTexCoord2b(GLenum texture, GLbyte s, GLbyte t) {return (*pglMultiTexCoord2b)(texture, s, t);}
static void wrap_glMultiTexCoord2bv(GLenum texture, const GLbyte *coords);
static void (APIENTRYP pglMultiTexCoord2bv)(GLenum texture, const GLbyte *coords) = wrap_glMultiTexCoord2bv;
static void wrap_glMultiTexCoord2bv(GLenum texture, const GLbyte *coords) {return trampoline<void>("glMultiTexCoord2bv", "glMultiTexCoord2bvOES", nullptr, nullptr, &pglMultiTexCoord2bv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord2bv(GLenum texture, const GLbyte *coords) {return (*pglMultiTexCoord2bv)(texture, coords);}
static void wrap_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
static void (APIENTRYP pglMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t) = wrap_glMultiTexCoord2d;
static void wrap_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {return trampoline<void>("glMultiTexCoord2d", "glMultiTexCoord2dARB", "glMultiTexCoord2dARB", nullptr, &pglMultiTexCoord2d, target, s, t);}
extern "C" void APIENTRY glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {return (*pglMultiTexCoord2d)(target, s, t);}
static void wrap_glMultiTexCoord2dv(GLenum target, const GLdouble *v);
static void (APIENTRYP pglMultiTexCoord2dv)(GLenum target, const GLdouble *v) = wrap_glMultiTexCoord2dv;
static void wrap_glMultiTexCoord2dv(GLenum target, const GLdouble *v) {return trampoline<void>("glMultiTexCoord2dv", "glMultiTexCoord2dvARB", "glMultiTexCoord2dvARB", nullptr, &pglMultiTexCoord2dv, target, v);}
extern "C" void APIENTRY glMultiTexCoord2dv(GLenum target, const GLdouble *v) {return (*pglMultiTexCoord2dv)(target, v);}
static void wrap_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
static void (APIENTRYP pglMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t) = wrap_glMultiTexCoord2f;
static void wrap_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {return trampoline<void>("glMultiTexCoord2f", "glMultiTexCoord2fARB", "glMultiTexCoord2fARB", nullptr, &pglMultiTexCoord2f, target, s, t);}
extern "C" void APIENTRY glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {return (*pglMultiTexCoord2f)(target, s, t);}
static void wrap_glMultiTexCoord2fv(GLenum target, const GLfloat *v);
static void (APIENTRYP pglMultiTexCoord2fv)(GLenum target, const GLfloat *v) = wrap_glMultiTexCoord2fv;
static void wrap_glMultiTexCoord2fv(GLenum target, const GLfloat *v) {return trampoline<void>("glMultiTexCoord2fv", "glMultiTexCoord2fvARB", "glMultiTexCoord2fvARB", nullptr, &pglMultiTexCoord2fv, target, v);}
extern "C" void APIENTRY glMultiTexCoord2fv(GLenum target, const GLfloat *v) {return (*pglMultiTexCoord2fv)(target, v);}
static void wrap_glMultiTexCoord2h(GLenum target, GLhalfNV s, GLhalfNV t);
static void (APIENTRYP pglMultiTexCoord2h)(GLenum target, GLhalfNV s, GLhalfNV t) = wrap_glMultiTexCoord2h;
static void wrap_glMultiTexCoord2h(GLenum target, GLhalfNV s, GLhalfNV t) {return trampoline<void>("glMultiTexCoord2h", "glMultiTexCoord2hNV", nullptr, nullptr, &pglMultiTexCoord2h, target, s, t);}
extern "C" void APIENTRY glMultiTexCoord2h(GLenum target, GLhalfNV s, GLhalfNV t) {return (*pglMultiTexCoord2h)(target, s, t);}
static void wrap_glMultiTexCoord2hv(GLenum target, const GLhalfNV *v);
static void (APIENTRYP pglMultiTexCoord2hv)(GLenum target, const GLhalfNV *v) = wrap_glMultiTexCoord2hv;
static void wrap_glMultiTexCoord2hv(GLenum target, const GLhalfNV *v) {return trampoline<void>("glMultiTexCoord2hv", "glMultiTexCoord2hvNV", nullptr, nullptr, &pglMultiTexCoord2hv, target, v);}
extern "C" void APIENTRY glMultiTexCoord2hv(GLenum target, const GLhalfNV *v) {return (*pglMultiTexCoord2hv)(target, v);}
static void wrap_glMultiTexCoord2i(GLenum target, GLint s, GLint t);
static void (APIENTRYP pglMultiTexCoord2i)(GLenum target, GLint s, GLint t) = wrap_glMultiTexCoord2i;
static void wrap_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {return trampoline<void>("glMultiTexCoord2i", "glMultiTexCoord2iARB", "glMultiTexCoord2iARB", nullptr, &pglMultiTexCoord2i, target, s, t);}
extern "C" void APIENTRY glMultiTexCoord2i(GLenum target, GLint s, GLint t) {return (*pglMultiTexCoord2i)(target, s, t);}
static void wrap_glMultiTexCoord2iv(GLenum target, const GLint *v);
static void (APIENTRYP pglMultiTexCoord2iv)(GLenum target, const GLint *v) = wrap_glMultiTexCoord2iv;
static void wrap_glMultiTexCoord2iv(GLenum target, const GLint *v) {return trampoline<void>("glMultiTexCoord2iv", "glMultiTexCoord2ivARB", "glMultiTexCoord2ivARB", nullptr, &pglMultiTexCoord2iv, target, v);}
extern "C" void APIENTRY glMultiTexCoord2iv(GLenum target, const GLint *v) {return (*pglMultiTexCoord2iv)(target, v);}
static void wrap_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
static void (APIENTRYP pglMultiTexCoord2s)(GLenum target, GLshort s, GLshort t) = wrap_glMultiTexCoord2s;
static void wrap_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {return trampoline<void>("glMultiTexCoord2s", "glMultiTexCoord2sARB", "glMultiTexCoord2sARB", nullptr, &pglMultiTexCoord2s, target, s, t);}
extern "C" void APIENTRY glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {return (*pglMultiTexCoord2s)(target, s, t);}
static void wrap_glMultiTexCoord2sv(GLenum target, const GLshort *v);
static void (APIENTRYP pglMultiTexCoord2sv)(GLenum target, const GLshort *v) = wrap_glMultiTexCoord2sv;
static void wrap_glMultiTexCoord2sv(GLenum target, const GLshort *v) {return trampoline<void>("glMultiTexCoord2sv", "glMultiTexCoord2svARB", "glMultiTexCoord2svARB", nullptr, &pglMultiTexCoord2sv, target, v);}
extern "C" void APIENTRY glMultiTexCoord2sv(GLenum target, const GLshort *v) {return (*pglMultiTexCoord2sv)(target, v);}
static void wrap_glMultiTexCoord2x(GLenum texture, GLfixed s, GLfixed t);
static void (APIENTRYP pglMultiTexCoord2x)(GLenum texture, GLfixed s, GLfixed t) = wrap_glMultiTexCoord2x;
static void wrap_glMultiTexCoord2x(GLenum texture, GLfixed s, GLfixed t) {return trampoline<void>("glMultiTexCoord2x", "glMultiTexCoord2xOES", nullptr, nullptr, &pglMultiTexCoord2x, texture, s, t);}
extern "C" void APIENTRY glMultiTexCoord2x(GLenum texture, GLfixed s, GLfixed t) {return (*pglMultiTexCoord2x)(texture, s, t);}
static void wrap_glMultiTexCoord2xv(GLenum texture, const GLfixed *coords);
static void (APIENTRYP pglMultiTexCoord2xv)(GLenum texture, const GLfixed *coords) = wrap_glMultiTexCoord2xv;
static void wrap_glMultiTexCoord2xv(GLenum texture, const GLfixed *coords) {return trampoline<void>("glMultiTexCoord2xv", "glMultiTexCoord2xvOES", nullptr, nullptr, &pglMultiTexCoord2xv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord2xv(GLenum texture, const GLfixed *coords) {return (*pglMultiTexCoord2xv)(texture, coords);}
static void wrap_glMultiTexCoord3b(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
static void (APIENTRYP pglMultiTexCoord3b)(GLenum texture, GLbyte s, GLbyte t, GLbyte r) = wrap_glMultiTexCoord3b;
static void wrap_glMultiTexCoord3b(GLenum texture, GLbyte s, GLbyte t, GLbyte r) {return trampoline<void>("glMultiTexCoord3b", "glMultiTexCoord3bOES", nullptr, nullptr, &pglMultiTexCoord3b, texture, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3b(GLenum texture, GLbyte s, GLbyte t, GLbyte r) {return (*pglMultiTexCoord3b)(texture, s, t, r);}
static void wrap_glMultiTexCoord3bv(GLenum texture, const GLbyte *coords);
static void (APIENTRYP pglMultiTexCoord3bv)(GLenum texture, const GLbyte *coords) = wrap_glMultiTexCoord3bv;
static void wrap_glMultiTexCoord3bv(GLenum texture, const GLbyte *coords) {return trampoline<void>("glMultiTexCoord3bv", "glMultiTexCoord3bvOES", nullptr, nullptr, &pglMultiTexCoord3bv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord3bv(GLenum texture, const GLbyte *coords) {return (*pglMultiTexCoord3bv)(texture, coords);}
static void wrap_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
static void (APIENTRYP pglMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r) = wrap_glMultiTexCoord3d;
static void wrap_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {return trampoline<void>("glMultiTexCoord3d", "glMultiTexCoord3dARB", "glMultiTexCoord3dARB", nullptr, &pglMultiTexCoord3d, target, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {return (*pglMultiTexCoord3d)(target, s, t, r);}
static void wrap_glMultiTexCoord3dv(GLenum target, const GLdouble *v);
static void (APIENTRYP pglMultiTexCoord3dv)(GLenum target, const GLdouble *v) = wrap_glMultiTexCoord3dv;
static void wrap_glMultiTexCoord3dv(GLenum target, const GLdouble *v) {return trampoline<void>("glMultiTexCoord3dv", "glMultiTexCoord3dvARB", "glMultiTexCoord3dvARB", nullptr, &pglMultiTexCoord3dv, target, v);}
extern "C" void APIENTRY glMultiTexCoord3dv(GLenum target, const GLdouble *v) {return (*pglMultiTexCoord3dv)(target, v);}
static void wrap_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
static void (APIENTRYP pglMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r) = wrap_glMultiTexCoord3f;
static void wrap_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {return trampoline<void>("glMultiTexCoord3f", "glMultiTexCoord3fARB", "glMultiTexCoord3fARB", nullptr, &pglMultiTexCoord3f, target, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {return (*pglMultiTexCoord3f)(target, s, t, r);}
static void wrap_glMultiTexCoord3fv(GLenum target, const GLfloat *v);
static void (APIENTRYP pglMultiTexCoord3fv)(GLenum target, const GLfloat *v) = wrap_glMultiTexCoord3fv;
static void wrap_glMultiTexCoord3fv(GLenum target, const GLfloat *v) {return trampoline<void>("glMultiTexCoord3fv", "glMultiTexCoord3fvARB", "glMultiTexCoord3fvARB", nullptr, &pglMultiTexCoord3fv, target, v);}
extern "C" void APIENTRY glMultiTexCoord3fv(GLenum target, const GLfloat *v) {return (*pglMultiTexCoord3fv)(target, v);}
static void wrap_glMultiTexCoord3h(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
static void (APIENTRYP pglMultiTexCoord3h)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) = wrap_glMultiTexCoord3h;
static void wrap_glMultiTexCoord3h(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {return trampoline<void>("glMultiTexCoord3h", "glMultiTexCoord3hNV", nullptr, nullptr, &pglMultiTexCoord3h, target, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3h(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {return (*pglMultiTexCoord3h)(target, s, t, r);}
static void wrap_glMultiTexCoord3hv(GLenum target, const GLhalfNV *v);
static void (APIENTRYP pglMultiTexCoord3hv)(GLenum target, const GLhalfNV *v) = wrap_glMultiTexCoord3hv;
static void wrap_glMultiTexCoord3hv(GLenum target, const GLhalfNV *v) {return trampoline<void>("glMultiTexCoord3hv", "glMultiTexCoord3hvNV", nullptr, nullptr, &pglMultiTexCoord3hv, target, v);}
extern "C" void APIENTRY glMultiTexCoord3hv(GLenum target, const GLhalfNV *v) {return (*pglMultiTexCoord3hv)(target, v);}
static void wrap_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
static void (APIENTRYP pglMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r) = wrap_glMultiTexCoord3i;
static void wrap_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {return trampoline<void>("glMultiTexCoord3i", "glMultiTexCoord3iARB", "glMultiTexCoord3iARB", nullptr, &pglMultiTexCoord3i, target, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {return (*pglMultiTexCoord3i)(target, s, t, r);}
static void wrap_glMultiTexCoord3iv(GLenum target, const GLint *v);
static void (APIENTRYP pglMultiTexCoord3iv)(GLenum target, const GLint *v) = wrap_glMultiTexCoord3iv;
static void wrap_glMultiTexCoord3iv(GLenum target, const GLint *v) {return trampoline<void>("glMultiTexCoord3iv", "glMultiTexCoord3ivARB", "glMultiTexCoord3ivARB", nullptr, &pglMultiTexCoord3iv, target, v);}
extern "C" void APIENTRY glMultiTexCoord3iv(GLenum target, const GLint *v) {return (*pglMultiTexCoord3iv)(target, v);}
static void wrap_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
static void (APIENTRYP pglMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r) = wrap_glMultiTexCoord3s;
static void wrap_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {return trampoline<void>("glMultiTexCoord3s", "glMultiTexCoord3sARB", "glMultiTexCoord3sARB", nullptr, &pglMultiTexCoord3s, target, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {return (*pglMultiTexCoord3s)(target, s, t, r);}
static void wrap_glMultiTexCoord3sv(GLenum target, const GLshort *v);
static void (APIENTRYP pglMultiTexCoord3sv)(GLenum target, const GLshort *v) = wrap_glMultiTexCoord3sv;
static void wrap_glMultiTexCoord3sv(GLenum target, const GLshort *v) {return trampoline<void>("glMultiTexCoord3sv", "glMultiTexCoord3svARB", "glMultiTexCoord3svARB", nullptr, &pglMultiTexCoord3sv, target, v);}
extern "C" void APIENTRY glMultiTexCoord3sv(GLenum target, const GLshort *v) {return (*pglMultiTexCoord3sv)(target, v);}
static void wrap_glMultiTexCoord3x(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
static void (APIENTRYP pglMultiTexCoord3x)(GLenum texture, GLfixed s, GLfixed t, GLfixed r) = wrap_glMultiTexCoord3x;
static void wrap_glMultiTexCoord3x(GLenum texture, GLfixed s, GLfixed t, GLfixed r) {return trampoline<void>("glMultiTexCoord3x", "glMultiTexCoord3xOES", nullptr, nullptr, &pglMultiTexCoord3x, texture, s, t, r);}
extern "C" void APIENTRY glMultiTexCoord3x(GLenum texture, GLfixed s, GLfixed t, GLfixed r) {return (*pglMultiTexCoord3x)(texture, s, t, r);}
static void wrap_glMultiTexCoord3xv(GLenum texture, const GLfixed *coords);
static void (APIENTRYP pglMultiTexCoord3xv)(GLenum texture, const GLfixed *coords) = wrap_glMultiTexCoord3xv;
static void wrap_glMultiTexCoord3xv(GLenum texture, const GLfixed *coords) {return trampoline<void>("glMultiTexCoord3xv", "glMultiTexCoord3xvOES", nullptr, nullptr, &pglMultiTexCoord3xv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord3xv(GLenum texture, const GLfixed *coords) {return (*pglMultiTexCoord3xv)(texture, coords);}
static void wrap_glMultiTexCoord4b(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
static void (APIENTRYP pglMultiTexCoord4b)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) = wrap_glMultiTexCoord4b;
static void wrap_glMultiTexCoord4b(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) {return trampoline<void>("glMultiTexCoord4b", "glMultiTexCoord4bOES", nullptr, nullptr, &pglMultiTexCoord4b, texture, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4b(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) {return (*pglMultiTexCoord4b)(texture, s, t, r, q);}
static void wrap_glMultiTexCoord4bv(GLenum texture, const GLbyte *coords);
static void (APIENTRYP pglMultiTexCoord4bv)(GLenum texture, const GLbyte *coords) = wrap_glMultiTexCoord4bv;
static void wrap_glMultiTexCoord4bv(GLenum texture, const GLbyte *coords) {return trampoline<void>("glMultiTexCoord4bv", "glMultiTexCoord4bvOES", nullptr, nullptr, &pglMultiTexCoord4bv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord4bv(GLenum texture, const GLbyte *coords) {return (*pglMultiTexCoord4bv)(texture, coords);}
static void wrap_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
static void (APIENTRYP pglMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) = wrap_glMultiTexCoord4d;
static void wrap_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {return trampoline<void>("glMultiTexCoord4d", "glMultiTexCoord4dARB", "glMultiTexCoord4dARB", nullptr, &pglMultiTexCoord4d, target, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {return (*pglMultiTexCoord4d)(target, s, t, r, q);}
static void wrap_glMultiTexCoord4dv(GLenum target, const GLdouble *v);
static void (APIENTRYP pglMultiTexCoord4dv)(GLenum target, const GLdouble *v) = wrap_glMultiTexCoord4dv;
static void wrap_glMultiTexCoord4dv(GLenum target, const GLdouble *v) {return trampoline<void>("glMultiTexCoord4dv", "glMultiTexCoord4dvARB", "glMultiTexCoord4dvARB", nullptr, &pglMultiTexCoord4dv, target, v);}
extern "C" void APIENTRY glMultiTexCoord4dv(GLenum target, const GLdouble *v) {return (*pglMultiTexCoord4dv)(target, v);}
static void wrap_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
static void (APIENTRYP pglMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) = wrap_glMultiTexCoord4f;
static void wrap_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {return trampoline<void>("glMultiTexCoord4f", "glMultiTexCoord4fARB", "glMultiTexCoord4fARB", nullptr, &pglMultiTexCoord4f, target, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {return (*pglMultiTexCoord4f)(target, s, t, r, q);}
static void wrap_glMultiTexCoord4fv(GLenum target, const GLfloat *v);
static void (APIENTRYP pglMultiTexCoord4fv)(GLenum target, const GLfloat *v) = wrap_glMultiTexCoord4fv;
static void wrap_glMultiTexCoord4fv(GLenum target, const GLfloat *v) {return trampoline<void>("glMultiTexCoord4fv", "glMultiTexCoord4fvARB", "glMultiTexCoord4fvARB", nullptr, &pglMultiTexCoord4fv, target, v);}
extern "C" void APIENTRY glMultiTexCoord4fv(GLenum target, const GLfloat *v) {return (*pglMultiTexCoord4fv)(target, v);}
static void wrap_glMultiTexCoord4h(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
static void (APIENTRYP pglMultiTexCoord4h)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) = wrap_glMultiTexCoord4h;
static void wrap_glMultiTexCoord4h(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {return trampoline<void>("glMultiTexCoord4h", "glMultiTexCoord4hNV", nullptr, nullptr, &pglMultiTexCoord4h, target, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4h(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {return (*pglMultiTexCoord4h)(target, s, t, r, q);}
static void wrap_glMultiTexCoord4hv(GLenum target, const GLhalfNV *v);
static void (APIENTRYP pglMultiTexCoord4hv)(GLenum target, const GLhalfNV *v) = wrap_glMultiTexCoord4hv;
static void wrap_glMultiTexCoord4hv(GLenum target, const GLhalfNV *v) {return trampoline<void>("glMultiTexCoord4hv", "glMultiTexCoord4hvNV", nullptr, nullptr, &pglMultiTexCoord4hv, target, v);}
extern "C" void APIENTRY glMultiTexCoord4hv(GLenum target, const GLhalfNV *v) {return (*pglMultiTexCoord4hv)(target, v);}
static void wrap_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
static void (APIENTRYP pglMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q) = wrap_glMultiTexCoord4i;
static void wrap_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {return trampoline<void>("glMultiTexCoord4i", "glMultiTexCoord4iARB", "glMultiTexCoord4iARB", nullptr, &pglMultiTexCoord4i, target, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {return (*pglMultiTexCoord4i)(target, s, t, r, q);}
static void wrap_glMultiTexCoord4iv(GLenum target, const GLint *v);
static void (APIENTRYP pglMultiTexCoord4iv)(GLenum target, const GLint *v) = wrap_glMultiTexCoord4iv;
static void wrap_glMultiTexCoord4iv(GLenum target, const GLint *v) {return trampoline<void>("glMultiTexCoord4iv", "glMultiTexCoord4ivARB", "glMultiTexCoord4ivARB", nullptr, &pglMultiTexCoord4iv, target, v);}
extern "C" void APIENTRY glMultiTexCoord4iv(GLenum target, const GLint *v) {return (*pglMultiTexCoord4iv)(target, v);}
static void wrap_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
static void (APIENTRYP pglMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) = wrap_glMultiTexCoord4s;
static void wrap_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {return trampoline<void>("glMultiTexCoord4s", "glMultiTexCoord4sARB", "glMultiTexCoord4sARB", nullptr, &pglMultiTexCoord4s, target, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {return (*pglMultiTexCoord4s)(target, s, t, r, q);}
static void wrap_glMultiTexCoord4sv(GLenum target, const GLshort *v);
static void (APIENTRYP pglMultiTexCoord4sv)(GLenum target, const GLshort *v) = wrap_glMultiTexCoord4sv;
static void wrap_glMultiTexCoord4sv(GLenum target, const GLshort *v) {return trampoline<void>("glMultiTexCoord4sv", "glMultiTexCoord4svARB", "glMultiTexCoord4svARB", nullptr, &pglMultiTexCoord4sv, target, v);}
extern "C" void APIENTRY glMultiTexCoord4sv(GLenum target, const GLshort *v) {return (*pglMultiTexCoord4sv)(target, v);}
static void wrap_glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
static void (APIENTRYP pglMultiTexCoord4x)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) = wrap_glMultiTexCoord4x;
static void wrap_glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {return trampoline<void>("glMultiTexCoord4x", "glMultiTexCoord4xOES", nullptr, nullptr, &pglMultiTexCoord4x, texture, s, t, r, q);}
extern "C" void APIENTRY glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {return (*pglMultiTexCoord4x)(texture, s, t, r, q);}
static void wrap_glMultiTexCoord4xv(GLenum texture, const GLfixed *coords);
static void (APIENTRYP pglMultiTexCoord4xv)(GLenum texture, const GLfixed *coords) = wrap_glMultiTexCoord4xv;
static void wrap_glMultiTexCoord4xv(GLenum texture, const GLfixed *coords) {return trampoline<void>("glMultiTexCoord4xv", "glMultiTexCoord4xvOES", nullptr, nullptr, &pglMultiTexCoord4xv, texture, coords);}
extern "C" void APIENTRY glMultiTexCoord4xv(GLenum texture, const GLfixed *coords) {return (*pglMultiTexCoord4xv)(texture, coords);}
static void wrap_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
static void (APIENTRYP pglMultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords) = wrap_glMultiTexCoordP1ui;
static void wrap_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {return trampoline<void>("glMultiTexCoordP1ui", nullptr, nullptr, nullptr, &pglMultiTexCoordP1ui, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {return (*pglMultiTexCoordP1ui)(texture, type, coords);}
static void wrap_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
static void (APIENTRYP pglMultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint *coords) = wrap_glMultiTexCoordP1uiv;
static void wrap_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {return trampoline<void>("glMultiTexCoordP1uiv", nullptr, nullptr, nullptr, &pglMultiTexCoordP1uiv, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {return (*pglMultiTexCoordP1uiv)(texture, type, coords);}
static void wrap_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
static void (APIENTRYP pglMultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords) = wrap_glMultiTexCoordP2ui;
static void wrap_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {return trampoline<void>("glMultiTexCoordP2ui", nullptr, nullptr, nullptr, &pglMultiTexCoordP2ui, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {return (*pglMultiTexCoordP2ui)(texture, type, coords);}
static void wrap_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
static void (APIENTRYP pglMultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint *coords) = wrap_glMultiTexCoordP2uiv;
static void wrap_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {return trampoline<void>("glMultiTexCoordP2uiv", nullptr, nullptr, nullptr, &pglMultiTexCoordP2uiv, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {return (*pglMultiTexCoordP2uiv)(texture, type, coords);}
static void wrap_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
static void (APIENTRYP pglMultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords) = wrap_glMultiTexCoordP3ui;
static void wrap_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {return trampoline<void>("glMultiTexCoordP3ui", nullptr, nullptr, nullptr, &pglMultiTexCoordP3ui, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {return (*pglMultiTexCoordP3ui)(texture, type, coords);}
static void wrap_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
static void (APIENTRYP pglMultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint *coords) = wrap_glMultiTexCoordP3uiv;
static void wrap_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {return trampoline<void>("glMultiTexCoordP3uiv", nullptr, nullptr, nullptr, &pglMultiTexCoordP3uiv, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {return (*pglMultiTexCoordP3uiv)(texture, type, coords);}
static void wrap_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
static void (APIENTRYP pglMultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords) = wrap_glMultiTexCoordP4ui;
static void wrap_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {return trampoline<void>("glMultiTexCoordP4ui", nullptr, nullptr, nullptr, &pglMultiTexCoordP4ui, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {return (*pglMultiTexCoordP4ui)(texture, type, coords);}
static void wrap_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
static void (APIENTRYP pglMultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint *coords) = wrap_glMultiTexCoordP4uiv;
static void wrap_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {return trampoline<void>("glMultiTexCoordP4uiv", nullptr, nullptr, nullptr, &pglMultiTexCoordP4uiv, texture, type, coords);}
extern "C" void APIENTRY glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {return (*pglMultiTexCoordP4uiv)(texture, type, coords);}
static void wrap_glMultiTexCoordPointer(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglMultiTexCoordPointer)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glMultiTexCoordPointer;
static void wrap_glMultiTexCoordPointer(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glMultiTexCoordPointer", "glMultiTexCoordPointerEXT", nullptr, nullptr, &pglMultiTexCoordPointer, texunit, size, type, stride, pointer);}
extern "C" void APIENTRY glMultiTexCoordPointer(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglMultiTexCoordPointer)(texunit, size, type, stride, pointer);}
static void wrap_glMultiTexEnvf(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
static void (APIENTRYP pglMultiTexEnvf)(GLenum texunit, GLenum target, GLenum pname, GLfloat param) = wrap_glMultiTexEnvf;
static void wrap_glMultiTexEnvf(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {return trampoline<void>("glMultiTexEnvf", "glMultiTexEnvfEXT", nullptr, nullptr, &pglMultiTexEnvf, texunit, target, pname, param);}
extern "C" void APIENTRY glMultiTexEnvf(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {return (*pglMultiTexEnvf)(texunit, target, pname, param);}
static void wrap_glMultiTexEnvfv(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglMultiTexEnvfv)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) = wrap_glMultiTexEnvfv;
static void wrap_glMultiTexEnvfv(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glMultiTexEnvfv", "glMultiTexEnvfvEXT", nullptr, nullptr, &pglMultiTexEnvfv, texunit, target, pname, params);}
extern "C" void APIENTRY glMultiTexEnvfv(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {return (*pglMultiTexEnvfv)(texunit, target, pname, params);}
static void wrap_glMultiTexEnvi(GLenum texunit, GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglMultiTexEnvi)(GLenum texunit, GLenum target, GLenum pname, GLint param) = wrap_glMultiTexEnvi;
static void wrap_glMultiTexEnvi(GLenum texunit, GLenum target, GLenum pname, GLint param) {return trampoline<void>("glMultiTexEnvi", "glMultiTexEnviEXT", nullptr, nullptr, &pglMultiTexEnvi, texunit, target, pname, param);}
extern "C" void APIENTRY glMultiTexEnvi(GLenum texunit, GLenum target, GLenum pname, GLint param) {return (*pglMultiTexEnvi)(texunit, target, pname, param);}
static void wrap_glMultiTexEnviv(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglMultiTexEnviv)(GLenum texunit, GLenum target, GLenum pname, const GLint *params) = wrap_glMultiTexEnviv;
static void wrap_glMultiTexEnviv(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glMultiTexEnviv", "glMultiTexEnvivEXT", nullptr, nullptr, &pglMultiTexEnviv, texunit, target, pname, params);}
extern "C" void APIENTRY glMultiTexEnviv(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {return (*pglMultiTexEnviv)(texunit, target, pname, params);}
static void wrap_glMultiTexGend(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
static void (APIENTRYP pglMultiTexGend)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) = wrap_glMultiTexGend;
static void wrap_glMultiTexGend(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {return trampoline<void>("glMultiTexGend", "glMultiTexGendEXT", nullptr, nullptr, &pglMultiTexGend, texunit, coord, pname, param);}
extern "C" void APIENTRY glMultiTexGend(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {return (*pglMultiTexGend)(texunit, coord, pname, param);}
static void wrap_glMultiTexGendv(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
static void (APIENTRYP pglMultiTexGendv)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) = wrap_glMultiTexGendv;
static void wrap_glMultiTexGendv(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) {return trampoline<void>("glMultiTexGendv", "glMultiTexGendvEXT", nullptr, nullptr, &pglMultiTexGendv, texunit, coord, pname, params);}
extern "C" void APIENTRY glMultiTexGendv(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) {return (*pglMultiTexGendv)(texunit, coord, pname, params);}
static void wrap_glMultiTexGenf(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
static void (APIENTRYP pglMultiTexGenf)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) = wrap_glMultiTexGenf;
static void wrap_glMultiTexGenf(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {return trampoline<void>("glMultiTexGenf", "glMultiTexGenfEXT", nullptr, nullptr, &pglMultiTexGenf, texunit, coord, pname, param);}
extern "C" void APIENTRY glMultiTexGenf(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {return (*pglMultiTexGenf)(texunit, coord, pname, param);}
static void wrap_glMultiTexGenfv(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglMultiTexGenfv)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) = wrap_glMultiTexGenfv;
static void wrap_glMultiTexGenfv(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) {return trampoline<void>("glMultiTexGenfv", "glMultiTexGenfvEXT", nullptr, nullptr, &pglMultiTexGenfv, texunit, coord, pname, params);}
extern "C" void APIENTRY glMultiTexGenfv(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) {return (*pglMultiTexGenfv)(texunit, coord, pname, params);}
static void wrap_glMultiTexGeni(GLenum texunit, GLenum coord, GLenum pname, GLint param);
static void (APIENTRYP pglMultiTexGeni)(GLenum texunit, GLenum coord, GLenum pname, GLint param) = wrap_glMultiTexGeni;
static void wrap_glMultiTexGeni(GLenum texunit, GLenum coord, GLenum pname, GLint param) {return trampoline<void>("glMultiTexGeni", "glMultiTexGeniEXT", nullptr, nullptr, &pglMultiTexGeni, texunit, coord, pname, param);}
extern "C" void APIENTRY glMultiTexGeni(GLenum texunit, GLenum coord, GLenum pname, GLint param) {return (*pglMultiTexGeni)(texunit, coord, pname, param);}
static void wrap_glMultiTexGeniv(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
static void (APIENTRYP pglMultiTexGeniv)(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) = wrap_glMultiTexGeniv;
static void wrap_glMultiTexGeniv(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) {return trampoline<void>("glMultiTexGeniv", "glMultiTexGenivEXT", nullptr, nullptr, &pglMultiTexGeniv, texunit, coord, pname, params);}
extern "C" void APIENTRY glMultiTexGeniv(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) {return (*pglMultiTexGeniv)(texunit, coord, pname, params);}
static void wrap_glMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglMultiTexImage1D)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glMultiTexImage1D;
static void wrap_glMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glMultiTexImage1D", "glMultiTexImage1DEXT", nullptr, nullptr, &pglMultiTexImage1D, texunit, target, level, internalformat, width, border, format, type, pixels);}
extern "C" void APIENTRY glMultiTexImage1D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglMultiTexImage1D)(texunit, target, level, internalformat, width, border, format, type, pixels);}
static void wrap_glMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglMultiTexImage2D)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glMultiTexImage2D;
static void wrap_glMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glMultiTexImage2D", "glMultiTexImage2DEXT", nullptr, nullptr, &pglMultiTexImage2D, texunit, target, level, internalformat, width, height, border, format, type, pixels);}
extern "C" void APIENTRY glMultiTexImage2D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglMultiTexImage2D)(texunit, target, level, internalformat, width, height, border, format, type, pixels);}
static void wrap_glMultiTexImage3D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglMultiTexImage3D)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glMultiTexImage3D;
static void wrap_glMultiTexImage3D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glMultiTexImage3D", "glMultiTexImage3DEXT", nullptr, nullptr, &pglMultiTexImage3D, texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);}
extern "C" void APIENTRY glMultiTexImage3D(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglMultiTexImage3D)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);}
static void wrap_glMultiTexParameterIiv(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglMultiTexParameterIiv)(GLenum texunit, GLenum target, GLenum pname, const GLint *params) = wrap_glMultiTexParameterIiv;
static void wrap_glMultiTexParameterIiv(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glMultiTexParameterIiv", "glMultiTexParameterIivEXT", nullptr, nullptr, &pglMultiTexParameterIiv, texunit, target, pname, params);}
extern "C" void APIENTRY glMultiTexParameterIiv(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {return (*pglMultiTexParameterIiv)(texunit, target, pname, params);}
static void wrap_glMultiTexParameterIuiv(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
static void (APIENTRYP pglMultiTexParameterIuiv)(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) = wrap_glMultiTexParameterIuiv;
static void wrap_glMultiTexParameterIuiv(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) {return trampoline<void>("glMultiTexParameterIuiv", "glMultiTexParameterIuivEXT", nullptr, nullptr, &pglMultiTexParameterIuiv, texunit, target, pname, params);}
extern "C" void APIENTRY glMultiTexParameterIuiv(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) {return (*pglMultiTexParameterIuiv)(texunit, target, pname, params);}
static void wrap_glMultiTexParameterf(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
static void (APIENTRYP pglMultiTexParameterf)(GLenum texunit, GLenum target, GLenum pname, GLfloat param) = wrap_glMultiTexParameterf;
static void wrap_glMultiTexParameterf(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {return trampoline<void>("glMultiTexParameterf", "glMultiTexParameterfEXT", nullptr, nullptr, &pglMultiTexParameterf, texunit, target, pname, param);}
extern "C" void APIENTRY glMultiTexParameterf(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {return (*pglMultiTexParameterf)(texunit, target, pname, param);}
static void wrap_glMultiTexParameterfv(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglMultiTexParameterfv)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) = wrap_glMultiTexParameterfv;
static void wrap_glMultiTexParameterfv(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glMultiTexParameterfv", "glMultiTexParameterfvEXT", nullptr, nullptr, &pglMultiTexParameterfv, texunit, target, pname, params);}
extern "C" void APIENTRY glMultiTexParameterfv(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {return (*pglMultiTexParameterfv)(texunit, target, pname, params);}
static void wrap_glMultiTexParameteri(GLenum texunit, GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglMultiTexParameteri)(GLenum texunit, GLenum target, GLenum pname, GLint param) = wrap_glMultiTexParameteri;
static void wrap_glMultiTexParameteri(GLenum texunit, GLenum target, GLenum pname, GLint param) {return trampoline<void>("glMultiTexParameteri", "glMultiTexParameteriEXT", nullptr, nullptr, &pglMultiTexParameteri, texunit, target, pname, param);}
extern "C" void APIENTRY glMultiTexParameteri(GLenum texunit, GLenum target, GLenum pname, GLint param) {return (*pglMultiTexParameteri)(texunit, target, pname, param);}
static void wrap_glMultiTexParameteriv(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglMultiTexParameteriv)(GLenum texunit, GLenum target, GLenum pname, const GLint *params) = wrap_glMultiTexParameteriv;
static void wrap_glMultiTexParameteriv(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glMultiTexParameteriv", "glMultiTexParameterivEXT", nullptr, nullptr, &pglMultiTexParameteriv, texunit, target, pname, params);}
extern "C" void APIENTRY glMultiTexParameteriv(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {return (*pglMultiTexParameteriv)(texunit, target, pname, params);}
static void wrap_glMultiTexRenderbuffer(GLenum texunit, GLenum target, GLuint renderbuffer);
static void (APIENTRYP pglMultiTexRenderbuffer)(GLenum texunit, GLenum target, GLuint renderbuffer) = wrap_glMultiTexRenderbuffer;
static void wrap_glMultiTexRenderbuffer(GLenum texunit, GLenum target, GLuint renderbuffer) {return trampoline<void>("glMultiTexRenderbuffer", "glMultiTexRenderbufferEXT", nullptr, nullptr, &pglMultiTexRenderbuffer, texunit, target, renderbuffer);}
extern "C" void APIENTRY glMultiTexRenderbuffer(GLenum texunit, GLenum target, GLuint renderbuffer) {return (*pglMultiTexRenderbuffer)(texunit, target, renderbuffer);}
static void wrap_glMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglMultiTexSubImage1D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) = wrap_glMultiTexSubImage1D;
static void wrap_glMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glMultiTexSubImage1D", "glMultiTexSubImage1DEXT", nullptr, nullptr, &pglMultiTexSubImage1D, texunit, target, level, xoffset, width, format, type, pixels);}
extern "C" void APIENTRY glMultiTexSubImage1D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {return (*pglMultiTexSubImage1D)(texunit, target, level, xoffset, width, format, type, pixels);}
static void wrap_glMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglMultiTexSubImage2D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) = wrap_glMultiTexSubImage2D;
static void wrap_glMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glMultiTexSubImage2D", "glMultiTexSubImage2DEXT", nullptr, nullptr, &pglMultiTexSubImage2D, texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);}
extern "C" void APIENTRY glMultiTexSubImage2D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {return (*pglMultiTexSubImage2D)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);}
static void wrap_glMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglMultiTexSubImage3D)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) = wrap_glMultiTexSubImage3D;
static void wrap_glMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glMultiTexSubImage3D", "glMultiTexSubImage3DEXT", nullptr, nullptr, &pglMultiTexSubImage3D, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
extern "C" void APIENTRY glMultiTexSubImage3D(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {return (*pglMultiTexSubImage3D)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
static void wrap_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
static void (APIENTRYP pglNamedBufferData)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) = wrap_glNamedBufferData;
static void wrap_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {return trampoline<void>("glNamedBufferData", "glNamedBufferDataEXT", nullptr, nullptr, &pglNamedBufferData, buffer, size, data, usage);}
extern "C" void APIENTRY glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {return (*pglNamedBufferData)(buffer, size, data, usage);}
static void wrap_glNamedBufferPageCommitment(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
static void (APIENTRYP pglNamedBufferPageCommitment)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) = wrap_glNamedBufferPageCommitment;
static void wrap_glNamedBufferPageCommitment(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {return trampoline<void>("glNamedBufferPageCommitment", "glNamedBufferPageCommitmentEXT", "glNamedBufferPageCommitmentARB", nullptr, &pglNamedBufferPageCommitment, buffer, offset, size, commit);}
extern "C" void APIENTRY glNamedBufferPageCommitment(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {return (*pglNamedBufferPageCommitment)(buffer, offset, size, commit);}
static void wrap_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
static void (APIENTRYP pglNamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) = wrap_glNamedBufferStorage;
static void wrap_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {return trampoline<void>("glNamedBufferStorage", "glNamedBufferStorageEXT", nullptr, nullptr, &pglNamedBufferStorage, buffer, size, data, flags);}
extern "C" void APIENTRY glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {return (*pglNamedBufferStorage)(buffer, size, data, flags);}
static void wrap_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
static void (APIENTRYP pglNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) = wrap_glNamedBufferSubData;
static void wrap_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {return trampoline<void>("glNamedBufferSubData", "glNamedBufferSubDataEXT", nullptr, nullptr, &pglNamedBufferSubData, buffer, offset, size, data);}
extern "C" void APIENTRY glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {return (*pglNamedBufferSubData)(buffer, offset, size, data);}
static void wrap_glNamedCopyBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
static void (APIENTRYP pglNamedCopyBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = wrap_glNamedCopyBufferSubData;
static void wrap_glNamedCopyBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {return trampoline<void>("glNamedCopyBufferSubData", "glNamedCopyBufferSubDataEXT", nullptr, nullptr, &pglNamedCopyBufferSubData, readBuffer, writeBuffer, readOffset, writeOffset, size);}
extern "C" void APIENTRY glNamedCopyBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {return (*pglNamedCopyBufferSubData)(readBuffer, writeBuffer, readOffset, writeOffset, size);}
static void wrap_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
static void (APIENTRYP pglNamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf) = wrap_glNamedFramebufferDrawBuffer;
static void wrap_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {return trampoline<void>("glNamedFramebufferDrawBuffer", nullptr, nullptr, nullptr, &pglNamedFramebufferDrawBuffer, framebuffer, buf);}
extern "C" void APIENTRY glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {return (*pglNamedFramebufferDrawBuffer)(framebuffer, buf);}
static void wrap_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
static void (APIENTRYP pglNamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum *bufs) = wrap_glNamedFramebufferDrawBuffers;
static void wrap_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {return trampoline<void>("glNamedFramebufferDrawBuffers", nullptr, nullptr, nullptr, &pglNamedFramebufferDrawBuffers, framebuffer, n, bufs);}
extern "C" void APIENTRY glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {return (*pglNamedFramebufferDrawBuffers)(framebuffer, n, bufs);}
static void wrap_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
static void (APIENTRYP pglNamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param) = wrap_glNamedFramebufferParameteri;
static void wrap_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {return trampoline<void>("glNamedFramebufferParameteri", "glNamedFramebufferParameteriEXT", nullptr, nullptr, &pglNamedFramebufferParameteri, framebuffer, pname, param);}
extern "C" void APIENTRY glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {return (*pglNamedFramebufferParameteri)(framebuffer, pname, param);}
static void wrap_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
static void (APIENTRYP pglNamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src) = wrap_glNamedFramebufferReadBuffer;
static void wrap_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {return trampoline<void>("glNamedFramebufferReadBuffer", nullptr, nullptr, nullptr, &pglNamedFramebufferReadBuffer, framebuffer, src);}
extern "C" void APIENTRY glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {return (*pglNamedFramebufferReadBuffer)(framebuffer, src);}
static void wrap_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
static void (APIENTRYP pglNamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = wrap_glNamedFramebufferRenderbuffer;
static void wrap_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {return trampoline<void>("glNamedFramebufferRenderbuffer", "glNamedFramebufferRenderbufferEXT", nullptr, nullptr, &pglNamedFramebufferRenderbuffer, framebuffer, attachment, renderbuffertarget, renderbuffer);}
extern "C" void APIENTRY glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {return (*pglNamedFramebufferRenderbuffer)(framebuffer, attachment, renderbuffertarget, renderbuffer);}
static void wrap_glNamedFramebufferSampleLocationsfv(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglNamedFramebufferSampleLocationsfv)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) = wrap_glNamedFramebufferSampleLocationsfv;
static void wrap_glNamedFramebufferSampleLocationsfv(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {return trampoline<void>("glNamedFramebufferSampleLocationsfv", "glNamedFramebufferSampleLocationsfvARB", "glNamedFramebufferSampleLocationsfvNV", nullptr, &pglNamedFramebufferSampleLocationsfv, framebuffer, start, count, v);}
extern "C" void APIENTRY glNamedFramebufferSampleLocationsfv(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {return (*pglNamedFramebufferSampleLocationsfv)(framebuffer, start, count, v);}
static void wrap_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
static void (APIENTRYP pglNamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) = wrap_glNamedFramebufferTexture;
static void wrap_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {return trampoline<void>("glNamedFramebufferTexture", "glNamedFramebufferTextureEXT", nullptr, nullptr, &pglNamedFramebufferTexture, framebuffer, attachment, texture, level);}
extern "C" void APIENTRY glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {return (*pglNamedFramebufferTexture)(framebuffer, attachment, texture, level);}
static void wrap_glNamedFramebufferTexture1D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
static void (APIENTRYP pglNamedFramebufferTexture1D)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = wrap_glNamedFramebufferTexture1D;
static void wrap_glNamedFramebufferTexture1D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return trampoline<void>("glNamedFramebufferTexture1D", "glNamedFramebufferTexture1DEXT", nullptr, nullptr, &pglNamedFramebufferTexture1D, framebuffer, attachment, textarget, texture, level);}
extern "C" void APIENTRY glNamedFramebufferTexture1D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return (*pglNamedFramebufferTexture1D)(framebuffer, attachment, textarget, texture, level);}
static void wrap_glNamedFramebufferTexture2D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
static void (APIENTRYP pglNamedFramebufferTexture2D)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = wrap_glNamedFramebufferTexture2D;
static void wrap_glNamedFramebufferTexture2D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return trampoline<void>("glNamedFramebufferTexture2D", "glNamedFramebufferTexture2DEXT", nullptr, nullptr, &pglNamedFramebufferTexture2D, framebuffer, attachment, textarget, texture, level);}
extern "C" void APIENTRY glNamedFramebufferTexture2D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {return (*pglNamedFramebufferTexture2D)(framebuffer, attachment, textarget, texture, level);}
static void wrap_glNamedFramebufferTexture3D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
static void (APIENTRYP pglNamedFramebufferTexture3D)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = wrap_glNamedFramebufferTexture3D;
static void wrap_glNamedFramebufferTexture3D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {return trampoline<void>("glNamedFramebufferTexture3D", "glNamedFramebufferTexture3DEXT", nullptr, nullptr, &pglNamedFramebufferTexture3D, framebuffer, attachment, textarget, texture, level, zoffset);}
extern "C" void APIENTRY glNamedFramebufferTexture3D(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {return (*pglNamedFramebufferTexture3D)(framebuffer, attachment, textarget, texture, level, zoffset);}
static void wrap_glNamedFramebufferTextureFace(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
static void (APIENTRYP pglNamedFramebufferTextureFace)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) = wrap_glNamedFramebufferTextureFace;
static void wrap_glNamedFramebufferTextureFace(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {return trampoline<void>("glNamedFramebufferTextureFace", "glNamedFramebufferTextureFaceEXT", nullptr, nullptr, &pglNamedFramebufferTextureFace, framebuffer, attachment, texture, level, face);}
extern "C" void APIENTRY glNamedFramebufferTextureFace(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {return (*pglNamedFramebufferTextureFace)(framebuffer, attachment, texture, level, face);}
static void wrap_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
static void (APIENTRYP pglNamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) = wrap_glNamedFramebufferTextureLayer;
static void wrap_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {return trampoline<void>("glNamedFramebufferTextureLayer", "glNamedFramebufferTextureLayerEXT", nullptr, nullptr, &pglNamedFramebufferTextureLayer, framebuffer, attachment, texture, level, layer);}
extern "C" void APIENTRY glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {return (*pglNamedFramebufferTextureLayer)(framebuffer, attachment, texture, level, layer);}
static void wrap_glNamedProgramLocalParameter4d(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglNamedProgramLocalParameter4d)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glNamedProgramLocalParameter4d;
static void wrap_glNamedProgramLocalParameter4d(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glNamedProgramLocalParameter4d", "glNamedProgramLocalParameter4dEXT", nullptr, nullptr, &pglNamedProgramLocalParameter4d, program, target, index, x, y, z, w);}
extern "C" void APIENTRY glNamedProgramLocalParameter4d(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglNamedProgramLocalParameter4d)(program, target, index, x, y, z, w);}
static void wrap_glNamedProgramLocalParameter4dv(GLuint program, GLenum target, GLuint index, const GLdouble *params);
static void (APIENTRYP pglNamedProgramLocalParameter4dv)(GLuint program, GLenum target, GLuint index, const GLdouble *params) = wrap_glNamedProgramLocalParameter4dv;
static void wrap_glNamedProgramLocalParameter4dv(GLuint program, GLenum target, GLuint index, const GLdouble *params) {return trampoline<void>("glNamedProgramLocalParameter4dv", "glNamedProgramLocalParameter4dvEXT", nullptr, nullptr, &pglNamedProgramLocalParameter4dv, program, target, index, params);}
extern "C" void APIENTRY glNamedProgramLocalParameter4dv(GLuint program, GLenum target, GLuint index, const GLdouble *params) {return (*pglNamedProgramLocalParameter4dv)(program, target, index, params);}
static void wrap_glNamedProgramLocalParameter4f(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglNamedProgramLocalParameter4f)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glNamedProgramLocalParameter4f;
static void wrap_glNamedProgramLocalParameter4f(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glNamedProgramLocalParameter4f", "glNamedProgramLocalParameter4fEXT", nullptr, nullptr, &pglNamedProgramLocalParameter4f, program, target, index, x, y, z, w);}
extern "C" void APIENTRY glNamedProgramLocalParameter4f(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglNamedProgramLocalParameter4f)(program, target, index, x, y, z, w);}
static void wrap_glNamedProgramLocalParameter4fv(GLuint program, GLenum target, GLuint index, const GLfloat *params);
static void (APIENTRYP pglNamedProgramLocalParameter4fv)(GLuint program, GLenum target, GLuint index, const GLfloat *params) = wrap_glNamedProgramLocalParameter4fv;
static void wrap_glNamedProgramLocalParameter4fv(GLuint program, GLenum target, GLuint index, const GLfloat *params) {return trampoline<void>("glNamedProgramLocalParameter4fv", "glNamedProgramLocalParameter4fvEXT", nullptr, nullptr, &pglNamedProgramLocalParameter4fv, program, target, index, params);}
extern "C" void APIENTRY glNamedProgramLocalParameter4fv(GLuint program, GLenum target, GLuint index, const GLfloat *params) {return (*pglNamedProgramLocalParameter4fv)(program, target, index, params);}
static void wrap_glNamedProgramLocalParameterI4i(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglNamedProgramLocalParameterI4i)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = wrap_glNamedProgramLocalParameterI4i;
static void wrap_glNamedProgramLocalParameterI4i(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glNamedProgramLocalParameterI4i", "glNamedProgramLocalParameterI4iEXT", nullptr, nullptr, &pglNamedProgramLocalParameterI4i, program, target, index, x, y, z, w);}
extern "C" void APIENTRY glNamedProgramLocalParameterI4i(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {return (*pglNamedProgramLocalParameterI4i)(program, target, index, x, y, z, w);}
static void wrap_glNamedProgramLocalParameterI4iv(GLuint program, GLenum target, GLuint index, const GLint *params);
static void (APIENTRYP pglNamedProgramLocalParameterI4iv)(GLuint program, GLenum target, GLuint index, const GLint *params) = wrap_glNamedProgramLocalParameterI4iv;
static void wrap_glNamedProgramLocalParameterI4iv(GLuint program, GLenum target, GLuint index, const GLint *params) {return trampoline<void>("glNamedProgramLocalParameterI4iv", "glNamedProgramLocalParameterI4ivEXT", nullptr, nullptr, &pglNamedProgramLocalParameterI4iv, program, target, index, params);}
extern "C" void APIENTRY glNamedProgramLocalParameterI4iv(GLuint program, GLenum target, GLuint index, const GLint *params) {return (*pglNamedProgramLocalParameterI4iv)(program, target, index, params);}
static void wrap_glNamedProgramLocalParameterI4ui(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
static void (APIENTRYP pglNamedProgramLocalParameterI4ui)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = wrap_glNamedProgramLocalParameterI4ui;
static void wrap_glNamedProgramLocalParameterI4ui(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return trampoline<void>("glNamedProgramLocalParameterI4ui", "glNamedProgramLocalParameterI4uiEXT", nullptr, nullptr, &pglNamedProgramLocalParameterI4ui, program, target, index, x, y, z, w);}
extern "C" void APIENTRY glNamedProgramLocalParameterI4ui(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return (*pglNamedProgramLocalParameterI4ui)(program, target, index, x, y, z, w);}
static void wrap_glNamedProgramLocalParameterI4uiv(GLuint program, GLenum target, GLuint index, const GLuint *params);
static void (APIENTRYP pglNamedProgramLocalParameterI4uiv)(GLuint program, GLenum target, GLuint index, const GLuint *params) = wrap_glNamedProgramLocalParameterI4uiv;
static void wrap_glNamedProgramLocalParameterI4uiv(GLuint program, GLenum target, GLuint index, const GLuint *params) {return trampoline<void>("glNamedProgramLocalParameterI4uiv", "glNamedProgramLocalParameterI4uivEXT", nullptr, nullptr, &pglNamedProgramLocalParameterI4uiv, program, target, index, params);}
extern "C" void APIENTRY glNamedProgramLocalParameterI4uiv(GLuint program, GLenum target, GLuint index, const GLuint *params) {return (*pglNamedProgramLocalParameterI4uiv)(program, target, index, params);}
static void wrap_glNamedProgramLocalParameters4fv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
static void (APIENTRYP pglNamedProgramLocalParameters4fv)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) = wrap_glNamedProgramLocalParameters4fv;
static void wrap_glNamedProgramLocalParameters4fv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) {return trampoline<void>("glNamedProgramLocalParameters4fv", "glNamedProgramLocalParameters4fvEXT", nullptr, nullptr, &pglNamedProgramLocalParameters4fv, program, target, index, count, params);}
extern "C" void APIENTRY glNamedProgramLocalParameters4fv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) {return (*pglNamedProgramLocalParameters4fv)(program, target, index, count, params);}
static void wrap_glNamedProgramLocalParametersI4iv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
static void (APIENTRYP pglNamedProgramLocalParametersI4iv)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) = wrap_glNamedProgramLocalParametersI4iv;
static void wrap_glNamedProgramLocalParametersI4iv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) {return trampoline<void>("glNamedProgramLocalParametersI4iv", "glNamedProgramLocalParametersI4ivEXT", nullptr, nullptr, &pglNamedProgramLocalParametersI4iv, program, target, index, count, params);}
extern "C" void APIENTRY glNamedProgramLocalParametersI4iv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) {return (*pglNamedProgramLocalParametersI4iv)(program, target, index, count, params);}
static void wrap_glNamedProgramLocalParametersI4uiv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
static void (APIENTRYP pglNamedProgramLocalParametersI4uiv)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) = wrap_glNamedProgramLocalParametersI4uiv;
static void wrap_glNamedProgramLocalParametersI4uiv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) {return trampoline<void>("glNamedProgramLocalParametersI4uiv", "glNamedProgramLocalParametersI4uivEXT", nullptr, nullptr, &pglNamedProgramLocalParametersI4uiv, program, target, index, count, params);}
extern "C" void APIENTRY glNamedProgramLocalParametersI4uiv(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) {return (*pglNamedProgramLocalParametersI4uiv)(program, target, index, count, params);}
static void wrap_glNamedProgramString(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
static void (APIENTRYP pglNamedProgramString)(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) = wrap_glNamedProgramString;
static void wrap_glNamedProgramString(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) {return trampoline<void>("glNamedProgramString", "glNamedProgramStringEXT", nullptr, nullptr, &pglNamedProgramString, program, target, format, len, string);}
extern "C" void APIENTRY glNamedProgramString(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) {return (*pglNamedProgramString)(program, target, format, len, string);}
static void wrap_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglNamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glNamedRenderbufferStorage;
static void wrap_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glNamedRenderbufferStorage", "glNamedRenderbufferStorageEXT", nullptr, nullptr, &pglNamedRenderbufferStorage, renderbuffer, internalformat, width, height);}
extern "C" void APIENTRY glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglNamedRenderbufferStorage)(renderbuffer, internalformat, width, height);}
static void wrap_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglNamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glNamedRenderbufferStorageMultisample;
static void wrap_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glNamedRenderbufferStorageMultisample", "glNamedRenderbufferStorageMultisampleEXT", nullptr, nullptr, &pglNamedRenderbufferStorageMultisample, renderbuffer, samples, internalformat, width, height);}
extern "C" void APIENTRY glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglNamedRenderbufferStorageMultisample)(renderbuffer, samples, internalformat, width, height);}
static void wrap_glNamedRenderbufferStorageMultisampleCoverage(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglNamedRenderbufferStorageMultisampleCoverage)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glNamedRenderbufferStorageMultisampleCoverage;
static void wrap_glNamedRenderbufferStorageMultisampleCoverage(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glNamedRenderbufferStorageMultisampleCoverage", "glNamedRenderbufferStorageMultisampleCoverageEXT", nullptr, nullptr, &pglNamedRenderbufferStorageMultisampleCoverage, renderbuffer, coverageSamples, colorSamples, internalformat, width, height);}
extern "C" void APIENTRY glNamedRenderbufferStorageMultisampleCoverage(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglNamedRenderbufferStorageMultisampleCoverage)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);}
static void wrap_glNamedString(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
static void (APIENTRYP pglNamedString)(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) = wrap_glNamedString;
static void wrap_glNamedString(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) {return trampoline<void>("glNamedString", "glNamedStringARB", nullptr, nullptr, &pglNamedString, type, namelen, name, stringlen, string);}
extern "C" void APIENTRY glNamedString(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) {return (*pglNamedString)(type, namelen, name, stringlen, string);}
static void wrap_glNewList(GLuint list, GLenum mode);
static void (APIENTRYP pglNewList)(GLuint list, GLenum mode) = wrap_glNewList;
static void wrap_glNewList(GLuint list, GLenum mode) {return trampoline<void>("glNewList", nullptr, nullptr, nullptr, &pglNewList, list, mode);}
extern "C" void APIENTRY glNewList(GLuint list, GLenum mode) {return (*pglNewList)(list, mode);}
static GLuint wrap_glNewObjectBuffer(GLsizei size, const void *pointer, GLenum usage);
static GLuint (APIENTRYP pglNewObjectBuffer)(GLsizei size, const void *pointer, GLenum usage) = wrap_glNewObjectBuffer;
static GLuint wrap_glNewObjectBuffer(GLsizei size, const void *pointer, GLenum usage) {return trampoline<GLuint>("glNewObjectBuffer", "glNewObjectBufferATI", nullptr, nullptr, &pglNewObjectBuffer, size, pointer, usage);}
extern "C" GLuint APIENTRY glNewObjectBuffer(GLsizei size, const void *pointer, GLenum usage) {return (*pglNewObjectBuffer)(size, pointer, usage);}
static void wrap_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
static void (APIENTRYP pglNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz) = wrap_glNormal3b;
static void wrap_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {return trampoline<void>("glNormal3b", nullptr, nullptr, nullptr, &pglNormal3b, nx, ny, nz);}
extern "C" void APIENTRY glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {return (*pglNormal3b)(nx, ny, nz);}
static void wrap_glNormal3bv(const GLbyte *v);
static void (APIENTRYP pglNormal3bv)(const GLbyte *v) = wrap_glNormal3bv;
static void wrap_glNormal3bv(const GLbyte *v) {return trampoline<void>("glNormal3bv", nullptr, nullptr, nullptr, &pglNormal3bv, v);}
extern "C" void APIENTRY glNormal3bv(const GLbyte *v) {return (*pglNormal3bv)(v);}
static void wrap_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
static void (APIENTRYP pglNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz) = wrap_glNormal3d;
static void wrap_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {return trampoline<void>("glNormal3d", nullptr, nullptr, nullptr, &pglNormal3d, nx, ny, nz);}
extern "C" void APIENTRY glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {return (*pglNormal3d)(nx, ny, nz);}
static void wrap_glNormal3dv(const GLdouble *v);
static void (APIENTRYP pglNormal3dv)(const GLdouble *v) = wrap_glNormal3dv;
static void wrap_glNormal3dv(const GLdouble *v) {return trampoline<void>("glNormal3dv", nullptr, nullptr, nullptr, &pglNormal3dv, v);}
extern "C" void APIENTRY glNormal3dv(const GLdouble *v) {return (*pglNormal3dv)(v);}
static void wrap_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
static void (APIENTRYP pglNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz) = wrap_glNormal3f;
static void wrap_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {return trampoline<void>("glNormal3f", nullptr, nullptr, nullptr, &pglNormal3f, nx, ny, nz);}
extern "C" void APIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {return (*pglNormal3f)(nx, ny, nz);}
static void wrap_glNormal3fVertex3f(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglNormal3fVertex3f)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glNormal3fVertex3f;
static void wrap_glNormal3fVertex3f(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glNormal3fVertex3f", "glNormal3fVertex3fSUN", nullptr, nullptr, &pglNormal3fVertex3f, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glNormal3fVertex3f(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglNormal3fVertex3f)(nx, ny, nz, x, y, z);}
static void wrap_glNormal3fVertex3fv(const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglNormal3fVertex3fv)(const GLfloat *n, const GLfloat *v) = wrap_glNormal3fVertex3fv;
static void wrap_glNormal3fVertex3fv(const GLfloat *n, const GLfloat *v) {return trampoline<void>("glNormal3fVertex3fv", "glNormal3fVertex3fvSUN", nullptr, nullptr, &pglNormal3fVertex3fv, n, v);}
extern "C" void APIENTRY glNormal3fVertex3fv(const GLfloat *n, const GLfloat *v) {return (*pglNormal3fVertex3fv)(n, v);}
static void wrap_glNormal3fv(const GLfloat *v);
static void (APIENTRYP pglNormal3fv)(const GLfloat *v) = wrap_glNormal3fv;
static void wrap_glNormal3fv(const GLfloat *v) {return trampoline<void>("glNormal3fv", nullptr, nullptr, nullptr, &pglNormal3fv, v);}
extern "C" void APIENTRY glNormal3fv(const GLfloat *v) {return (*pglNormal3fv)(v);}
static void wrap_glNormal3h(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
static void (APIENTRYP pglNormal3h)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) = wrap_glNormal3h;
static void wrap_glNormal3h(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {return trampoline<void>("glNormal3h", "glNormal3hNV", nullptr, nullptr, &pglNormal3h, nx, ny, nz);}
extern "C" void APIENTRY glNormal3h(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {return (*pglNormal3h)(nx, ny, nz);}
static void wrap_glNormal3hv(const GLhalfNV *v);
static void (APIENTRYP pglNormal3hv)(const GLhalfNV *v) = wrap_glNormal3hv;
static void wrap_glNormal3hv(const GLhalfNV *v) {return trampoline<void>("glNormal3hv", "glNormal3hvNV", nullptr, nullptr, &pglNormal3hv, v);}
extern "C" void APIENTRY glNormal3hv(const GLhalfNV *v) {return (*pglNormal3hv)(v);}
static void wrap_glNormal3i(GLint nx, GLint ny, GLint nz);
static void (APIENTRYP pglNormal3i)(GLint nx, GLint ny, GLint nz) = wrap_glNormal3i;
static void wrap_glNormal3i(GLint nx, GLint ny, GLint nz) {return trampoline<void>("glNormal3i", nullptr, nullptr, nullptr, &pglNormal3i, nx, ny, nz);}
extern "C" void APIENTRY glNormal3i(GLint nx, GLint ny, GLint nz) {return (*pglNormal3i)(nx, ny, nz);}
static void wrap_glNormal3iv(const GLint *v);
static void (APIENTRYP pglNormal3iv)(const GLint *v) = wrap_glNormal3iv;
static void wrap_glNormal3iv(const GLint *v) {return trampoline<void>("glNormal3iv", nullptr, nullptr, nullptr, &pglNormal3iv, v);}
extern "C" void APIENTRY glNormal3iv(const GLint *v) {return (*pglNormal3iv)(v);}
static void wrap_glNormal3s(GLshort nx, GLshort ny, GLshort nz);
static void (APIENTRYP pglNormal3s)(GLshort nx, GLshort ny, GLshort nz) = wrap_glNormal3s;
static void wrap_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {return trampoline<void>("glNormal3s", nullptr, nullptr, nullptr, &pglNormal3s, nx, ny, nz);}
extern "C" void APIENTRY glNormal3s(GLshort nx, GLshort ny, GLshort nz) {return (*pglNormal3s)(nx, ny, nz);}
static void wrap_glNormal3sv(const GLshort *v);
static void (APIENTRYP pglNormal3sv)(const GLshort *v) = wrap_glNormal3sv;
static void wrap_glNormal3sv(const GLshort *v) {return trampoline<void>("glNormal3sv", nullptr, nullptr, nullptr, &pglNormal3sv, v);}
extern "C" void APIENTRY glNormal3sv(const GLshort *v) {return (*pglNormal3sv)(v);}
static void wrap_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz);
static void (APIENTRYP pglNormal3x)(GLfixed nx, GLfixed ny, GLfixed nz) = wrap_glNormal3x;
static void wrap_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) {return trampoline<void>("glNormal3x", "glNormal3xOES", nullptr, nullptr, &pglNormal3x, nx, ny, nz);}
extern "C" void APIENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) {return (*pglNormal3x)(nx, ny, nz);}
static void wrap_glNormal3xv(const GLfixed *coords);
static void (APIENTRYP pglNormal3xv)(const GLfixed *coords) = wrap_glNormal3xv;
static void wrap_glNormal3xv(const GLfixed *coords) {return trampoline<void>("glNormal3xv", "glNormal3xvOES", nullptr, nullptr, &pglNormal3xv, coords);}
extern "C" void APIENTRY glNormal3xv(const GLfixed *coords) {return (*pglNormal3xv)(coords);}
static void wrap_glNormalFormat(GLenum type, GLsizei stride);
static void (APIENTRYP pglNormalFormat)(GLenum type, GLsizei stride) = wrap_glNormalFormat;
static void wrap_glNormalFormat(GLenum type, GLsizei stride) {return trampoline<void>("glNormalFormat", "glNormalFormatNV", nullptr, nullptr, &pglNormalFormat, type, stride);}
extern "C" void APIENTRY glNormalFormat(GLenum type, GLsizei stride) {return (*pglNormalFormat)(type, stride);}
static void wrap_glNormalP3ui(GLenum type, GLuint coords);
static void (APIENTRYP pglNormalP3ui)(GLenum type, GLuint coords) = wrap_glNormalP3ui;
static void wrap_glNormalP3ui(GLenum type, GLuint coords) {return trampoline<void>("glNormalP3ui", nullptr, nullptr, nullptr, &pglNormalP3ui, type, coords);}
extern "C" void APIENTRY glNormalP3ui(GLenum type, GLuint coords) {return (*pglNormalP3ui)(type, coords);}
static void wrap_glNormalP3uiv(GLenum type, const GLuint *coords);
static void (APIENTRYP pglNormalP3uiv)(GLenum type, const GLuint *coords) = wrap_glNormalP3uiv;
static void wrap_glNormalP3uiv(GLenum type, const GLuint *coords) {return trampoline<void>("glNormalP3uiv", nullptr, nullptr, nullptr, &pglNormalP3uiv, type, coords);}
extern "C" void APIENTRY glNormalP3uiv(GLenum type, const GLuint *coords) {return (*pglNormalP3uiv)(type, coords);}
static void wrap_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
static void (APIENTRYP pglNormalPointer)(GLenum type, GLsizei stride, const GLvoid *ptr) = wrap_glNormalPointer;
static void wrap_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr) {return trampoline<void>("glNormalPointer", "glNormalPointerEXT", nullptr, nullptr, &pglNormalPointer, type, stride, ptr);}
extern "C" void APIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr) {return (*pglNormalPointer)(type, stride, ptr);}
static void wrap_glNormalPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglNormalPointerList)(GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glNormalPointerList;
static void wrap_glNormalPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glNormalPointerList", "glNormalPointerListIBM", nullptr, nullptr, &pglNormalPointerList, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glNormalPointerList(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglNormalPointerList)(type, stride, pointer, ptrstride);}
static void wrap_glNormalPointerv(GLenum type, const void **pointer);
static void (APIENTRYP pglNormalPointerv)(GLenum type, const void **pointer) = wrap_glNormalPointerv;
static void wrap_glNormalPointerv(GLenum type, const void **pointer) {return trampoline<void>("glNormalPointerv", "glNormalPointervINTEL", nullptr, nullptr, &pglNormalPointerv, type, pointer);}
extern "C" void APIENTRY glNormalPointerv(GLenum type, const void **pointer) {return (*pglNormalPointerv)(type, pointer);}
static void wrap_glNormalStream3b(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
static void (APIENTRYP pglNormalStream3b)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) = wrap_glNormalStream3b;
static void wrap_glNormalStream3b(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {return trampoline<void>("glNormalStream3b", "glNormalStream3bATI", nullptr, nullptr, &pglNormalStream3b, stream, nx, ny, nz);}
extern "C" void APIENTRY glNormalStream3b(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {return (*pglNormalStream3b)(stream, nx, ny, nz);}
static void wrap_glNormalStream3bv(GLenum stream, const GLbyte *coords);
static void (APIENTRYP pglNormalStream3bv)(GLenum stream, const GLbyte *coords) = wrap_glNormalStream3bv;
static void wrap_glNormalStream3bv(GLenum stream, const GLbyte *coords) {return trampoline<void>("glNormalStream3bv", "glNormalStream3bvATI", nullptr, nullptr, &pglNormalStream3bv, stream, coords);}
extern "C" void APIENTRY glNormalStream3bv(GLenum stream, const GLbyte *coords) {return (*pglNormalStream3bv)(stream, coords);}
static void wrap_glNormalStream3d(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
static void (APIENTRYP pglNormalStream3d)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) = wrap_glNormalStream3d;
static void wrap_glNormalStream3d(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {return trampoline<void>("glNormalStream3d", "glNormalStream3dATI", nullptr, nullptr, &pglNormalStream3d, stream, nx, ny, nz);}
extern "C" void APIENTRY glNormalStream3d(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {return (*pglNormalStream3d)(stream, nx, ny, nz);}
static void wrap_glNormalStream3dv(GLenum stream, const GLdouble *coords);
static void (APIENTRYP pglNormalStream3dv)(GLenum stream, const GLdouble *coords) = wrap_glNormalStream3dv;
static void wrap_glNormalStream3dv(GLenum stream, const GLdouble *coords) {return trampoline<void>("glNormalStream3dv", "glNormalStream3dvATI", nullptr, nullptr, &pglNormalStream3dv, stream, coords);}
extern "C" void APIENTRY glNormalStream3dv(GLenum stream, const GLdouble *coords) {return (*pglNormalStream3dv)(stream, coords);}
static void wrap_glNormalStream3f(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
static void (APIENTRYP pglNormalStream3f)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) = wrap_glNormalStream3f;
static void wrap_glNormalStream3f(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {return trampoline<void>("glNormalStream3f", "glNormalStream3fATI", nullptr, nullptr, &pglNormalStream3f, stream, nx, ny, nz);}
extern "C" void APIENTRY glNormalStream3f(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {return (*pglNormalStream3f)(stream, nx, ny, nz);}
static void wrap_glNormalStream3fv(GLenum stream, const GLfloat *coords);
static void (APIENTRYP pglNormalStream3fv)(GLenum stream, const GLfloat *coords) = wrap_glNormalStream3fv;
static void wrap_glNormalStream3fv(GLenum stream, const GLfloat *coords) {return trampoline<void>("glNormalStream3fv", "glNormalStream3fvATI", nullptr, nullptr, &pglNormalStream3fv, stream, coords);}
extern "C" void APIENTRY glNormalStream3fv(GLenum stream, const GLfloat *coords) {return (*pglNormalStream3fv)(stream, coords);}
static void wrap_glNormalStream3i(GLenum stream, GLint nx, GLint ny, GLint nz);
static void (APIENTRYP pglNormalStream3i)(GLenum stream, GLint nx, GLint ny, GLint nz) = wrap_glNormalStream3i;
static void wrap_glNormalStream3i(GLenum stream, GLint nx, GLint ny, GLint nz) {return trampoline<void>("glNormalStream3i", "glNormalStream3iATI", nullptr, nullptr, &pglNormalStream3i, stream, nx, ny, nz);}
extern "C" void APIENTRY glNormalStream3i(GLenum stream, GLint nx, GLint ny, GLint nz) {return (*pglNormalStream3i)(stream, nx, ny, nz);}
static void wrap_glNormalStream3iv(GLenum stream, const GLint *coords);
static void (APIENTRYP pglNormalStream3iv)(GLenum stream, const GLint *coords) = wrap_glNormalStream3iv;
static void wrap_glNormalStream3iv(GLenum stream, const GLint *coords) {return trampoline<void>("glNormalStream3iv", "glNormalStream3ivATI", nullptr, nullptr, &pglNormalStream3iv, stream, coords);}
extern "C" void APIENTRY glNormalStream3iv(GLenum stream, const GLint *coords) {return (*pglNormalStream3iv)(stream, coords);}
static void wrap_glNormalStream3s(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
static void (APIENTRYP pglNormalStream3s)(GLenum stream, GLshort nx, GLshort ny, GLshort nz) = wrap_glNormalStream3s;
static void wrap_glNormalStream3s(GLenum stream, GLshort nx, GLshort ny, GLshort nz) {return trampoline<void>("glNormalStream3s", "glNormalStream3sATI", nullptr, nullptr, &pglNormalStream3s, stream, nx, ny, nz);}
extern "C" void APIENTRY glNormalStream3s(GLenum stream, GLshort nx, GLshort ny, GLshort nz) {return (*pglNormalStream3s)(stream, nx, ny, nz);}
static void wrap_glNormalStream3sv(GLenum stream, const GLshort *coords);
static void (APIENTRYP pglNormalStream3sv)(GLenum stream, const GLshort *coords) = wrap_glNormalStream3sv;
static void wrap_glNormalStream3sv(GLenum stream, const GLshort *coords) {return trampoline<void>("glNormalStream3sv", "glNormalStream3svATI", nullptr, nullptr, &pglNormalStream3sv, stream, coords);}
extern "C" void APIENTRY glNormalStream3sv(GLenum stream, const GLshort *coords) {return (*pglNormalStream3sv)(stream, coords);}
static void wrap_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
static void (APIENTRYP pglObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) = wrap_glObjectLabel;
static void wrap_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {return trampoline<void>("glObjectLabel", nullptr, nullptr, nullptr, &pglObjectLabel, identifier, name, length, label);}
extern "C" void APIENTRY glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {return (*pglObjectLabel)(identifier, name, length, label);}
static void wrap_glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
static void (APIENTRYP pglObjectPtrLabel)(const void *ptr, GLsizei length, const GLchar *label) = wrap_glObjectPtrLabel;
static void wrap_glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {return trampoline<void>("glObjectPtrLabel", nullptr, nullptr, nullptr, &pglObjectPtrLabel, ptr, length, label);}
extern "C" void APIENTRY glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {return (*pglObjectPtrLabel)(ptr, length, label);}
static GLenum wrap_glObjectPurgeable(GLenum objectType, GLuint name, GLenum option);
static GLenum (APIENTRYP pglObjectPurgeable)(GLenum objectType, GLuint name, GLenum option) = wrap_glObjectPurgeable;
static GLenum wrap_glObjectPurgeable(GLenum objectType, GLuint name, GLenum option) {return trampoline<GLenum>("glObjectPurgeable", "glObjectPurgeableAPPLE", nullptr, nullptr, &pglObjectPurgeable, objectType, name, option);}
extern "C" GLenum APIENTRY glObjectPurgeable(GLenum objectType, GLuint name, GLenum option) {return (*pglObjectPurgeable)(objectType, name, option);}
static GLenum wrap_glObjectUnpurgeable(GLenum objectType, GLuint name, GLenum option);
static GLenum (APIENTRYP pglObjectUnpurgeable)(GLenum objectType, GLuint name, GLenum option) = wrap_glObjectUnpurgeable;
static GLenum wrap_glObjectUnpurgeable(GLenum objectType, GLuint name, GLenum option) {return trampoline<GLenum>("glObjectUnpurgeable", "glObjectUnpurgeableAPPLE", nullptr, nullptr, &pglObjectUnpurgeable, objectType, name, option);}
extern "C" GLenum APIENTRY glObjectUnpurgeable(GLenum objectType, GLuint name, GLenum option) {return (*pglObjectUnpurgeable)(objectType, name, option);}
static void wrap_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val);
static void (APIENTRYP pglOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val) = wrap_glOrtho;
static void wrap_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val) {return trampoline<void>("glOrtho", nullptr, nullptr, nullptr, &pglOrtho, left, right, bottom, top, near_val, far_val);}
extern "C" void APIENTRY glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val) {return (*pglOrtho)(left, right, bottom, top, near_val, far_val);}
static void wrap_glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
static void (APIENTRYP pglOrthof)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) = wrap_glOrthof;
static void wrap_glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {return trampoline<void>("glOrthof", "glOrthofOES", nullptr, nullptr, &pglOrthof, l, r, b, t, n, f);}
extern "C" void APIENTRY glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {return (*pglOrthof)(l, r, b, t, n, f);}
static void wrap_glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
static void (APIENTRYP pglOrthox)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) = wrap_glOrthox;
static void wrap_glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {return trampoline<void>("glOrthox", "glOrthoxOES", nullptr, nullptr, &pglOrthox, l, r, b, t, n, f);}
extern "C" void APIENTRY glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {return (*pglOrthox)(l, r, b, t, n, f);}
static void wrap_glPNTrianglesf(GLenum pname, GLfloat param);
static void (APIENTRYP pglPNTrianglesf)(GLenum pname, GLfloat param) = wrap_glPNTrianglesf;
static void wrap_glPNTrianglesf(GLenum pname, GLfloat param) {return trampoline<void>("glPNTrianglesf", "glPNTrianglesfATI", nullptr, nullptr, &pglPNTrianglesf, pname, param);}
extern "C" void APIENTRY glPNTrianglesf(GLenum pname, GLfloat param) {return (*pglPNTrianglesf)(pname, param);}
static void wrap_glPNTrianglesi(GLenum pname, GLint param);
static void (APIENTRYP pglPNTrianglesi)(GLenum pname, GLint param) = wrap_glPNTrianglesi;
static void wrap_glPNTrianglesi(GLenum pname, GLint param) {return trampoline<void>("glPNTrianglesi", "glPNTrianglesiATI", nullptr, nullptr, &pglPNTrianglesi, pname, param);}
extern "C" void APIENTRY glPNTrianglesi(GLenum pname, GLint param) {return (*pglPNTrianglesi)(pname, param);}
static void wrap_glPassTexCoord(GLuint dst, GLuint coord, GLenum swizzle);
static void (APIENTRYP pglPassTexCoord)(GLuint dst, GLuint coord, GLenum swizzle) = wrap_glPassTexCoord;
static void wrap_glPassTexCoord(GLuint dst, GLuint coord, GLenum swizzle) {return trampoline<void>("glPassTexCoord", "glPassTexCoordATI", nullptr, nullptr, &pglPassTexCoord, dst, coord, swizzle);}
extern "C" void APIENTRY glPassTexCoord(GLuint dst, GLuint coord, GLenum swizzle) {return (*pglPassTexCoord)(dst, coord, swizzle);}
static void wrap_glPassThrough(GLfloat token);
static void (APIENTRYP pglPassThrough)(GLfloat token) = wrap_glPassThrough;
static void wrap_glPassThrough(GLfloat token) {return trampoline<void>("glPassThrough", nullptr, nullptr, nullptr, &pglPassThrough, token);}
extern "C" void APIENTRY glPassThrough(GLfloat token) {return (*pglPassThrough)(token);}
static void wrap_glPassThroughx(GLfixed token);
static void (APIENTRYP pglPassThroughx)(GLfixed token) = wrap_glPassThroughx;
static void wrap_glPassThroughx(GLfixed token) {return trampoline<void>("glPassThroughx", "glPassThroughxOES", nullptr, nullptr, &pglPassThroughx, token);}
extern "C" void APIENTRY glPassThroughx(GLfixed token) {return (*pglPassThroughx)(token);}
static void wrap_glPatchParameterfv(GLenum pname, const GLfloat *values);
static void (APIENTRYP pglPatchParameterfv)(GLenum pname, const GLfloat *values) = wrap_glPatchParameterfv;
static void wrap_glPatchParameterfv(GLenum pname, const GLfloat *values) {return trampoline<void>("glPatchParameterfv", nullptr, nullptr, nullptr, &pglPatchParameterfv, pname, values);}
extern "C" void APIENTRY glPatchParameterfv(GLenum pname, const GLfloat *values) {return (*pglPatchParameterfv)(pname, values);}
static void wrap_glPatchParameteri(GLenum pname, GLint value);
static void (APIENTRYP pglPatchParameteri)(GLenum pname, GLint value) = wrap_glPatchParameteri;
static void wrap_glPatchParameteri(GLenum pname, GLint value) {return trampoline<void>("glPatchParameteri", nullptr, nullptr, nullptr, &pglPatchParameteri, pname, value);}
extern "C" void APIENTRY glPatchParameteri(GLenum pname, GLint value) {return (*pglPatchParameteri)(pname, value);}
static void wrap_glPathColorGen(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
static void (APIENTRYP pglPathColorGen)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) = wrap_glPathColorGen;
static void wrap_glPathColorGen(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) {return trampoline<void>("glPathColorGen", "glPathColorGenNV", nullptr, nullptr, &pglPathColorGen, color, genMode, colorFormat, coeffs);}
extern "C" void APIENTRY glPathColorGen(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) {return (*pglPathColorGen)(color, genMode, colorFormat, coeffs);}
static void wrap_glPathCommands(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
static void (APIENTRYP pglPathCommands)(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) = wrap_glPathCommands;
static void wrap_glPathCommands(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {return trampoline<void>("glPathCommands", "glPathCommandsNV", nullptr, nullptr, &pglPathCommands, path, numCommands, commands, numCoords, coordType, coords);}
extern "C" void APIENTRY glPathCommands(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {return (*pglPathCommands)(path, numCommands, commands, numCoords, coordType, coords);}
static void wrap_glPathCoords(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
static void (APIENTRYP pglPathCoords)(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) = wrap_glPathCoords;
static void wrap_glPathCoords(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) {return trampoline<void>("glPathCoords", "glPathCoordsNV", nullptr, nullptr, &pglPathCoords, path, numCoords, coordType, coords);}
extern "C" void APIENTRY glPathCoords(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) {return (*pglPathCoords)(path, numCoords, coordType, coords);}
static void wrap_glPathCoverDepthFunc(GLenum func);
static void (APIENTRYP pglPathCoverDepthFunc)(GLenum func) = wrap_glPathCoverDepthFunc;
static void wrap_glPathCoverDepthFunc(GLenum func) {return trampoline<void>("glPathCoverDepthFunc", "glPathCoverDepthFuncNV", nullptr, nullptr, &pglPathCoverDepthFunc, func);}
extern "C" void APIENTRY glPathCoverDepthFunc(GLenum func) {return (*pglPathCoverDepthFunc)(func);}
static void wrap_glPathDashArray(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
static void (APIENTRYP pglPathDashArray)(GLuint path, GLsizei dashCount, const GLfloat *dashArray) = wrap_glPathDashArray;
static void wrap_glPathDashArray(GLuint path, GLsizei dashCount, const GLfloat *dashArray) {return trampoline<void>("glPathDashArray", "glPathDashArrayNV", nullptr, nullptr, &pglPathDashArray, path, dashCount, dashArray);}
extern "C" void APIENTRY glPathDashArray(GLuint path, GLsizei dashCount, const GLfloat *dashArray) {return (*pglPathDashArray)(path, dashCount, dashArray);}
static void wrap_glPathFogGen(GLenum genMode);
static void (APIENTRYP pglPathFogGen)(GLenum genMode) = wrap_glPathFogGen;
static void wrap_glPathFogGen(GLenum genMode) {return trampoline<void>("glPathFogGen", "glPathFogGenNV", nullptr, nullptr, &pglPathFogGen, genMode);}
extern "C" void APIENTRY glPathFogGen(GLenum genMode) {return (*pglPathFogGen)(genMode);}
static GLenum wrap_glPathGlyphIndexArray(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
static GLenum (APIENTRYP pglPathGlyphIndexArray)(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = wrap_glPathGlyphIndexArray;
static GLenum wrap_glPathGlyphIndexArray(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return trampoline<GLenum>("glPathGlyphIndexArray", "glPathGlyphIndexArrayNV", nullptr, nullptr, &pglPathGlyphIndexArray, firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);}
extern "C" GLenum APIENTRY glPathGlyphIndexArray(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return (*pglPathGlyphIndexArray)(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);}
static GLenum wrap_glPathGlyphIndexRange(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
static GLenum (APIENTRYP pglPathGlyphIndexRange)(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) = wrap_glPathGlyphIndexRange;
static GLenum wrap_glPathGlyphIndexRange(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) {return trampoline<GLenum>("glPathGlyphIndexRange", "glPathGlyphIndexRangeNV", nullptr, nullptr, &pglPathGlyphIndexRange, fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);}
extern "C" GLenum APIENTRY glPathGlyphIndexRange(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) {return (*pglPathGlyphIndexRange)(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);}
static void wrap_glPathGlyphRange(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
static void (APIENTRYP pglPathGlyphRange)(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = wrap_glPathGlyphRange;
static void wrap_glPathGlyphRange(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return trampoline<void>("glPathGlyphRange", "glPathGlyphRangeNV", nullptr, nullptr, &pglPathGlyphRange, firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);}
extern "C" void APIENTRY glPathGlyphRange(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return (*pglPathGlyphRange)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);}
static void wrap_glPathGlyphs(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
static void (APIENTRYP pglPathGlyphs)(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = wrap_glPathGlyphs;
static void wrap_glPathGlyphs(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return trampoline<void>("glPathGlyphs", "glPathGlyphsNV", nullptr, nullptr, &pglPathGlyphs, firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);}
extern "C" void APIENTRY glPathGlyphs(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return (*pglPathGlyphs)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);}
static GLenum wrap_glPathMemoryGlyphIndexArray(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
static GLenum (APIENTRYP pglPathMemoryGlyphIndexArray)(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = wrap_glPathMemoryGlyphIndexArray;
static GLenum wrap_glPathMemoryGlyphIndexArray(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return trampoline<GLenum>("glPathMemoryGlyphIndexArray", "glPathMemoryGlyphIndexArrayNV", nullptr, nullptr, &pglPathMemoryGlyphIndexArray, firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);}
extern "C" GLenum APIENTRY glPathMemoryGlyphIndexArray(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {return (*pglPathMemoryGlyphIndexArray)(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);}
static void wrap_glPathParameterf(GLuint path, GLenum pname, GLfloat value);
static void (APIENTRYP pglPathParameterf)(GLuint path, GLenum pname, GLfloat value) = wrap_glPathParameterf;
static void wrap_glPathParameterf(GLuint path, GLenum pname, GLfloat value) {return trampoline<void>("glPathParameterf", "glPathParameterfNV", nullptr, nullptr, &pglPathParameterf, path, pname, value);}
extern "C" void APIENTRY glPathParameterf(GLuint path, GLenum pname, GLfloat value) {return (*pglPathParameterf)(path, pname, value);}
static void wrap_glPathParameterfv(GLuint path, GLenum pname, const GLfloat *value);
static void (APIENTRYP pglPathParameterfv)(GLuint path, GLenum pname, const GLfloat *value) = wrap_glPathParameterfv;
static void wrap_glPathParameterfv(GLuint path, GLenum pname, const GLfloat *value) {return trampoline<void>("glPathParameterfv", "glPathParameterfvNV", nullptr, nullptr, &pglPathParameterfv, path, pname, value);}
extern "C" void APIENTRY glPathParameterfv(GLuint path, GLenum pname, const GLfloat *value) {return (*pglPathParameterfv)(path, pname, value);}
static void wrap_glPathParameteri(GLuint path, GLenum pname, GLint value);
static void (APIENTRYP pglPathParameteri)(GLuint path, GLenum pname, GLint value) = wrap_glPathParameteri;
static void wrap_glPathParameteri(GLuint path, GLenum pname, GLint value) {return trampoline<void>("glPathParameteri", "glPathParameteriNV", nullptr, nullptr, &pglPathParameteri, path, pname, value);}
extern "C" void APIENTRY glPathParameteri(GLuint path, GLenum pname, GLint value) {return (*pglPathParameteri)(path, pname, value);}
static void wrap_glPathParameteriv(GLuint path, GLenum pname, const GLint *value);
static void (APIENTRYP pglPathParameteriv)(GLuint path, GLenum pname, const GLint *value) = wrap_glPathParameteriv;
static void wrap_glPathParameteriv(GLuint path, GLenum pname, const GLint *value) {return trampoline<void>("glPathParameteriv", "glPathParameterivNV", nullptr, nullptr, &pglPathParameteriv, path, pname, value);}
extern "C" void APIENTRY glPathParameteriv(GLuint path, GLenum pname, const GLint *value) {return (*pglPathParameteriv)(path, pname, value);}
static void wrap_glPathStencilDepthOffset(GLfloat factor, GLfloat units);
static void (APIENTRYP pglPathStencilDepthOffset)(GLfloat factor, GLfloat units) = wrap_glPathStencilDepthOffset;
static void wrap_glPathStencilDepthOffset(GLfloat factor, GLfloat units) {return trampoline<void>("glPathStencilDepthOffset", "glPathStencilDepthOffsetNV", nullptr, nullptr, &pglPathStencilDepthOffset, factor, units);}
extern "C" void APIENTRY glPathStencilDepthOffset(GLfloat factor, GLfloat units) {return (*pglPathStencilDepthOffset)(factor, units);}
static void wrap_glPathStencilFunc(GLenum func, GLint ref, GLuint mask);
static void (APIENTRYP pglPathStencilFunc)(GLenum func, GLint ref, GLuint mask) = wrap_glPathStencilFunc;
static void wrap_glPathStencilFunc(GLenum func, GLint ref, GLuint mask) {return trampoline<void>("glPathStencilFunc", "glPathStencilFuncNV", nullptr, nullptr, &pglPathStencilFunc, func, ref, mask);}
extern "C" void APIENTRY glPathStencilFunc(GLenum func, GLint ref, GLuint mask) {return (*pglPathStencilFunc)(func, ref, mask);}
static void wrap_glPathString(GLuint path, GLenum format, GLsizei length, const void *pathString);
static void (APIENTRYP pglPathString)(GLuint path, GLenum format, GLsizei length, const void *pathString) = wrap_glPathString;
static void wrap_glPathString(GLuint path, GLenum format, GLsizei length, const void *pathString) {return trampoline<void>("glPathString", "glPathStringNV", nullptr, nullptr, &pglPathString, path, format, length, pathString);}
extern "C" void APIENTRY glPathString(GLuint path, GLenum format, GLsizei length, const void *pathString) {return (*pglPathString)(path, format, length, pathString);}
static void wrap_glPathSubCommands(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
static void (APIENTRYP pglPathSubCommands)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) = wrap_glPathSubCommands;
static void wrap_glPathSubCommands(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {return trampoline<void>("glPathSubCommands", "glPathSubCommandsNV", nullptr, nullptr, &pglPathSubCommands, path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);}
extern "C" void APIENTRY glPathSubCommands(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {return (*pglPathSubCommands)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);}
static void wrap_glPathSubCoords(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
static void (APIENTRYP pglPathSubCoords)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) = wrap_glPathSubCoords;
static void wrap_glPathSubCoords(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) {return trampoline<void>("glPathSubCoords", "glPathSubCoordsNV", nullptr, nullptr, &pglPathSubCoords, path, coordStart, numCoords, coordType, coords);}
extern "C" void APIENTRY glPathSubCoords(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) {return (*pglPathSubCoords)(path, coordStart, numCoords, coordType, coords);}
static void wrap_glPathTexGen(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
static void (APIENTRYP pglPathTexGen)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) = wrap_glPathTexGen;
static void wrap_glPathTexGen(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) {return trampoline<void>("glPathTexGen", "glPathTexGenNV", nullptr, nullptr, &pglPathTexGen, texCoordSet, genMode, components, coeffs);}
extern "C" void APIENTRY glPathTexGen(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) {return (*pglPathTexGen)(texCoordSet, genMode, components, coeffs);}
static void wrap_glPauseTransformFeedback(void);
static void (APIENTRYP pglPauseTransformFeedback)(void) = wrap_glPauseTransformFeedback;
static void wrap_glPauseTransformFeedback(void) {return trampoline<void>("glPauseTransformFeedback", "glPauseTransformFeedbackNV", nullptr, nullptr, &pglPauseTransformFeedback);}
extern "C" void APIENTRY glPauseTransformFeedback(void) {return (*pglPauseTransformFeedback)();}
static void wrap_glPixelDataRange(GLenum target, GLsizei length, const void *pointer);
static void (APIENTRYP pglPixelDataRange)(GLenum target, GLsizei length, const void *pointer) = wrap_glPixelDataRange;
static void wrap_glPixelDataRange(GLenum target, GLsizei length, const void *pointer) {return trampoline<void>("glPixelDataRange", "glPixelDataRangeNV", nullptr, nullptr, &pglPixelDataRange, target, length, pointer);}
extern "C" void APIENTRY glPixelDataRange(GLenum target, GLsizei length, const void *pointer) {return (*pglPixelDataRange)(target, length, pointer);}
static void wrap_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values);
static void (APIENTRYP pglPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat *values) = wrap_glPixelMapfv;
static void wrap_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {return trampoline<void>("glPixelMapfv", nullptr, nullptr, nullptr, &pglPixelMapfv, map, mapsize, values);}
extern "C" void APIENTRY glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {return (*pglPixelMapfv)(map, mapsize, values);}
static void wrap_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values);
static void (APIENTRYP pglPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint *values) = wrap_glPixelMapuiv;
static void wrap_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {return trampoline<void>("glPixelMapuiv", nullptr, nullptr, nullptr, &pglPixelMapuiv, map, mapsize, values);}
extern "C" void APIENTRY glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {return (*pglPixelMapuiv)(map, mapsize, values);}
static void wrap_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values);
static void (APIENTRYP pglPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort *values) = wrap_glPixelMapusv;
static void wrap_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {return trampoline<void>("glPixelMapusv", nullptr, nullptr, nullptr, &pglPixelMapusv, map, mapsize, values);}
extern "C" void APIENTRY glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {return (*pglPixelMapusv)(map, mapsize, values);}
static void wrap_glPixelMapx(GLenum map, GLint size, const GLfixed *values);
static void (APIENTRYP pglPixelMapx)(GLenum map, GLint size, const GLfixed *values) = wrap_glPixelMapx;
static void wrap_glPixelMapx(GLenum map, GLint size, const GLfixed *values) {return trampoline<void>("glPixelMapx", nullptr, nullptr, nullptr, &pglPixelMapx, map, size, values);}
extern "C" void APIENTRY glPixelMapx(GLenum map, GLint size, const GLfixed *values) {return (*pglPixelMapx)(map, size, values);}
static void wrap_glPixelStoref(GLenum pname, GLfloat param);
static void (APIENTRYP pglPixelStoref)(GLenum pname, GLfloat param) = wrap_glPixelStoref;
static void wrap_glPixelStoref(GLenum pname, GLfloat param) {return trampoline<void>("glPixelStoref", nullptr, nullptr, nullptr, &pglPixelStoref, pname, param);}
extern "C" void APIENTRY glPixelStoref(GLenum pname, GLfloat param) {return (*pglPixelStoref)(pname, param);}
static void wrap_glPixelStorei(GLenum pname, GLint param);
static void (APIENTRYP pglPixelStorei)(GLenum pname, GLint param) = wrap_glPixelStorei;
static void wrap_glPixelStorei(GLenum pname, GLint param) {return trampoline<void>("glPixelStorei", nullptr, nullptr, nullptr, &pglPixelStorei, pname, param);}
extern "C" void APIENTRY glPixelStorei(GLenum pname, GLint param) {return (*pglPixelStorei)(pname, param);}
static void wrap_glPixelStorex(GLenum pname, GLfixed param);
static void (APIENTRYP pglPixelStorex)(GLenum pname, GLfixed param) = wrap_glPixelStorex;
static void wrap_glPixelStorex(GLenum pname, GLfixed param) {return trampoline<void>("glPixelStorex", nullptr, nullptr, nullptr, &pglPixelStorex, pname, param);}
extern "C" void APIENTRY glPixelStorex(GLenum pname, GLfixed param) {return (*pglPixelStorex)(pname, param);}
static void wrap_glPixelTexGen(GLenum mode);
static void (APIENTRYP pglPixelTexGen)(GLenum mode) = wrap_glPixelTexGen;
static void wrap_glPixelTexGen(GLenum mode) {return trampoline<void>("glPixelTexGen", "glPixelTexGenSGIX", nullptr, nullptr, &pglPixelTexGen, mode);}
extern "C" void APIENTRY glPixelTexGen(GLenum mode) {return (*pglPixelTexGen)(mode);}
static void wrap_glPixelTexGenParameterf(GLenum pname, GLfloat param);
static void (APIENTRYP pglPixelTexGenParameterf)(GLenum pname, GLfloat param) = wrap_glPixelTexGenParameterf;
static void wrap_glPixelTexGenParameterf(GLenum pname, GLfloat param) {return trampoline<void>("glPixelTexGenParameterf", "glPixelTexGenParameterfSGIS", nullptr, nullptr, &pglPixelTexGenParameterf, pname, param);}
extern "C" void APIENTRY glPixelTexGenParameterf(GLenum pname, GLfloat param) {return (*pglPixelTexGenParameterf)(pname, param);}
static void wrap_glPixelTexGenParameterfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglPixelTexGenParameterfv)(GLenum pname, const GLfloat *params) = wrap_glPixelTexGenParameterfv;
static void wrap_glPixelTexGenParameterfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glPixelTexGenParameterfv", "glPixelTexGenParameterfvSGIS", nullptr, nullptr, &pglPixelTexGenParameterfv, pname, params);}
extern "C" void APIENTRY glPixelTexGenParameterfv(GLenum pname, const GLfloat *params) {return (*pglPixelTexGenParameterfv)(pname, params);}
static void wrap_glPixelTexGenParameteri(GLenum pname, GLint param);
static void (APIENTRYP pglPixelTexGenParameteri)(GLenum pname, GLint param) = wrap_glPixelTexGenParameteri;
static void wrap_glPixelTexGenParameteri(GLenum pname, GLint param) {return trampoline<void>("glPixelTexGenParameteri", "glPixelTexGenParameteriSGIS", nullptr, nullptr, &pglPixelTexGenParameteri, pname, param);}
extern "C" void APIENTRY glPixelTexGenParameteri(GLenum pname, GLint param) {return (*pglPixelTexGenParameteri)(pname, param);}
static void wrap_glPixelTexGenParameteriv(GLenum pname, const GLint *params);
static void (APIENTRYP pglPixelTexGenParameteriv)(GLenum pname, const GLint *params) = wrap_glPixelTexGenParameteriv;
static void wrap_glPixelTexGenParameteriv(GLenum pname, const GLint *params) {return trampoline<void>("glPixelTexGenParameteriv", "glPixelTexGenParameterivSGIS", nullptr, nullptr, &pglPixelTexGenParameteriv, pname, params);}
extern "C" void APIENTRY glPixelTexGenParameteriv(GLenum pname, const GLint *params) {return (*pglPixelTexGenParameteriv)(pname, params);}
static void wrap_glPixelTransferf(GLenum pname, GLfloat param);
static void (APIENTRYP pglPixelTransferf)(GLenum pname, GLfloat param) = wrap_glPixelTransferf;
static void wrap_glPixelTransferf(GLenum pname, GLfloat param) {return trampoline<void>("glPixelTransferf", nullptr, nullptr, nullptr, &pglPixelTransferf, pname, param);}
extern "C" void APIENTRY glPixelTransferf(GLenum pname, GLfloat param) {return (*pglPixelTransferf)(pname, param);}
static void wrap_glPixelTransferi(GLenum pname, GLint param);
static void (APIENTRYP pglPixelTransferi)(GLenum pname, GLint param) = wrap_glPixelTransferi;
static void wrap_glPixelTransferi(GLenum pname, GLint param) {return trampoline<void>("glPixelTransferi", nullptr, nullptr, nullptr, &pglPixelTransferi, pname, param);}
extern "C" void APIENTRY glPixelTransferi(GLenum pname, GLint param) {return (*pglPixelTransferi)(pname, param);}
static void wrap_glPixelTransferx(GLenum pname, GLfixed param);
static void (APIENTRYP pglPixelTransferx)(GLenum pname, GLfixed param) = wrap_glPixelTransferx;
static void wrap_glPixelTransferx(GLenum pname, GLfixed param) {return trampoline<void>("glPixelTransferx", "glPixelTransferxOES", nullptr, nullptr, &pglPixelTransferx, pname, param);}
extern "C" void APIENTRY glPixelTransferx(GLenum pname, GLfixed param) {return (*pglPixelTransferx)(pname, param);}
static void wrap_glPixelTransformParameterf(GLenum target, GLenum pname, GLfloat param);
static void (APIENTRYP pglPixelTransformParameterf)(GLenum target, GLenum pname, GLfloat param) = wrap_glPixelTransformParameterf;
static void wrap_glPixelTransformParameterf(GLenum target, GLenum pname, GLfloat param) {return trampoline<void>("glPixelTransformParameterf", "glPixelTransformParameterfEXT", nullptr, nullptr, &pglPixelTransformParameterf, target, pname, param);}
extern "C" void APIENTRY glPixelTransformParameterf(GLenum target, GLenum pname, GLfloat param) {return (*pglPixelTransformParameterf)(target, pname, param);}
static void wrap_glPixelTransformParameterfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglPixelTransformParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glPixelTransformParameterfv;
static void wrap_glPixelTransformParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glPixelTransformParameterfv", "glPixelTransformParameterfvEXT", nullptr, nullptr, &pglPixelTransformParameterfv, target, pname, params);}
extern "C" void APIENTRY glPixelTransformParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglPixelTransformParameterfv)(target, pname, params);}
static void wrap_glPixelTransformParameteri(GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglPixelTransformParameteri)(GLenum target, GLenum pname, GLint param) = wrap_glPixelTransformParameteri;
static void wrap_glPixelTransformParameteri(GLenum target, GLenum pname, GLint param) {return trampoline<void>("glPixelTransformParameteri", "glPixelTransformParameteriEXT", nullptr, nullptr, &pglPixelTransformParameteri, target, pname, param);}
extern "C" void APIENTRY glPixelTransformParameteri(GLenum target, GLenum pname, GLint param) {return (*pglPixelTransformParameteri)(target, pname, param);}
static void wrap_glPixelTransformParameteriv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglPixelTransformParameteriv)(GLenum target, GLenum pname, const GLint *params) = wrap_glPixelTransformParameteriv;
static void wrap_glPixelTransformParameteriv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glPixelTransformParameteriv", "glPixelTransformParameterivEXT", nullptr, nullptr, &pglPixelTransformParameteriv, target, pname, params);}
extern "C" void APIENTRY glPixelTransformParameteriv(GLenum target, GLenum pname, const GLint *params) {return (*pglPixelTransformParameteriv)(target, pname, params);}
static void wrap_glPixelZoom(GLfloat xfactor, GLfloat yfactor);
static void (APIENTRYP pglPixelZoom)(GLfloat xfactor, GLfloat yfactor) = wrap_glPixelZoom;
static void wrap_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {return trampoline<void>("glPixelZoom", nullptr, nullptr, nullptr, &pglPixelZoom, xfactor, yfactor);}
extern "C" void APIENTRY glPixelZoom(GLfloat xfactor, GLfloat yfactor) {return (*pglPixelZoom)(xfactor, yfactor);}
static void wrap_glPixelZoomx(GLfixed xfactor, GLfixed yfactor);
static void (APIENTRYP pglPixelZoomx)(GLfixed xfactor, GLfixed yfactor) = wrap_glPixelZoomx;
static void wrap_glPixelZoomx(GLfixed xfactor, GLfixed yfactor) {return trampoline<void>("glPixelZoomx", "glPixelZoomxOES", nullptr, nullptr, &pglPixelZoomx, xfactor, yfactor);}
extern "C" void APIENTRY glPixelZoomx(GLfixed xfactor, GLfixed yfactor) {return (*pglPixelZoomx)(xfactor, yfactor);}
static GLboolean wrap_glPointAlongPath(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
static GLboolean (APIENTRYP pglPointAlongPath)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) = wrap_glPointAlongPath;
static GLboolean wrap_glPointAlongPath(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {return trampoline<GLboolean>("glPointAlongPath", "glPointAlongPathNV", nullptr, nullptr, &pglPointAlongPath, path, startSegment, numSegments, distance, x, y, tangentX, tangentY);}
extern "C" GLboolean APIENTRY glPointAlongPath(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {return (*pglPointAlongPath)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);}
static void wrap_glPointParameterf(GLenum pname, GLfloat param);
static void (APIENTRYP pglPointParameterf)(GLenum pname, GLfloat param) = wrap_glPointParameterf;
static void wrap_glPointParameterf(GLenum pname, GLfloat param) {return trampoline<void>("glPointParameterf", "glPointParameterfARB", "glPointParameterfEXT", "glPointParameterfSGIS", &pglPointParameterf, pname, param);}
extern "C" void APIENTRY glPointParameterf(GLenum pname, GLfloat param) {return (*pglPointParameterf)(pname, param);}
static void wrap_glPointParameterfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglPointParameterfv)(GLenum pname, const GLfloat *params) = wrap_glPointParameterfv;
static void wrap_glPointParameterfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glPointParameterfv", "glPointParameterfvARB", "glPointParameterfvEXT", "glPointParameterfvSGIS", &pglPointParameterfv, pname, params);}
extern "C" void APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params) {return (*pglPointParameterfv)(pname, params);}
static void wrap_glPointParameteri(GLenum pname, GLint param);
static void (APIENTRYP pglPointParameteri)(GLenum pname, GLint param) = wrap_glPointParameteri;
static void wrap_glPointParameteri(GLenum pname, GLint param) {return trampoline<void>("glPointParameteri", "glPointParameteriNV", nullptr, nullptr, &pglPointParameteri, pname, param);}
extern "C" void APIENTRY glPointParameteri(GLenum pname, GLint param) {return (*pglPointParameteri)(pname, param);}
static void wrap_glPointParameteriv(GLenum pname, const GLint *params);
static void (APIENTRYP pglPointParameteriv)(GLenum pname, const GLint *params) = wrap_glPointParameteriv;
static void wrap_glPointParameteriv(GLenum pname, const GLint *params) {return trampoline<void>("glPointParameteriv", "glPointParameterivNV", nullptr, nullptr, &pglPointParameteriv, pname, params);}
extern "C" void APIENTRY glPointParameteriv(GLenum pname, const GLint *params) {return (*pglPointParameteriv)(pname, params);}
static void wrap_glPointParameterxv(GLenum pname, const GLfixed *params);
static void (APIENTRYP pglPointParameterxv)(GLenum pname, const GLfixed *params) = wrap_glPointParameterxv;
static void wrap_glPointParameterxv(GLenum pname, const GLfixed *params) {return trampoline<void>("glPointParameterxv", "glPointParameterxvOES", nullptr, nullptr, &pglPointParameterxv, pname, params);}
extern "C" void APIENTRY glPointParameterxv(GLenum pname, const GLfixed *params) {return (*pglPointParameterxv)(pname, params);}
static void wrap_glPointSize(GLfloat size);
static void (APIENTRYP pglPointSize)(GLfloat size) = wrap_glPointSize;
static void wrap_glPointSize(GLfloat size) {return trampoline<void>("glPointSize", nullptr, nullptr, nullptr, &pglPointSize, size);}
extern "C" void APIENTRY glPointSize(GLfloat size) {return (*pglPointSize)(size);}
static void wrap_glPointSizex(GLfixed size);
static void (APIENTRYP pglPointSizex)(GLfixed size) = wrap_glPointSizex;
static void wrap_glPointSizex(GLfixed size) {return trampoline<void>("glPointSizex", "glPointSizexOES", nullptr, nullptr, &pglPointSizex, size);}
extern "C" void APIENTRY glPointSizex(GLfixed size) {return (*pglPointSizex)(size);}
static GLint wrap_glPollAsync(GLuint *markerp);
static GLint (APIENTRYP pglPollAsync)(GLuint *markerp) = wrap_glPollAsync;
static GLint wrap_glPollAsync(GLuint *markerp) {return trampoline<GLint>("glPollAsync", "glPollAsyncSGIX", nullptr, nullptr, &pglPollAsync, markerp);}
extern "C" GLint APIENTRY glPollAsync(GLuint *markerp) {return (*pglPollAsync)(markerp);}
static GLint wrap_glPollInstruments(GLint *marker_p);
static GLint (APIENTRYP pglPollInstruments)(GLint *marker_p) = wrap_glPollInstruments;
static GLint wrap_glPollInstruments(GLint *marker_p) {return trampoline<GLint>("glPollInstruments", "glPollInstrumentsSGIX", nullptr, nullptr, &pglPollInstruments, marker_p);}
extern "C" GLint APIENTRY glPollInstruments(GLint *marker_p) {return (*pglPollInstruments)(marker_p);}
static void wrap_glPolygonMode(GLenum face, GLenum mode);
static void (APIENTRYP pglPolygonMode)(GLenum face, GLenum mode) = wrap_glPolygonMode;
static void wrap_glPolygonMode(GLenum face, GLenum mode) {return trampoline<void>("glPolygonMode", nullptr, nullptr, nullptr, &pglPolygonMode, face, mode);}
extern "C" void APIENTRY glPolygonMode(GLenum face, GLenum mode) {return (*pglPolygonMode)(face, mode);}
static void wrap_glPolygonOffset(GLfloat factor, GLfloat units);
static void (APIENTRYP pglPolygonOffset)(GLfloat factor, GLfloat units) = wrap_glPolygonOffset;
static void wrap_glPolygonOffset(GLfloat factor, GLfloat units) {return trampoline<void>("glPolygonOffset", "glPolygonOffsetEXT", nullptr, nullptr, &pglPolygonOffset, factor, units);}
extern "C" void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units) {return (*pglPolygonOffset)(factor, units);}
static void wrap_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp);
static void (APIENTRYP pglPolygonOffsetClamp)(GLfloat factor, GLfloat units, GLfloat clamp) = wrap_glPolygonOffsetClamp;
static void wrap_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {return trampoline<void>("glPolygonOffsetClamp", "glPolygonOffsetClampEXT", nullptr, nullptr, &pglPolygonOffsetClamp, factor, units, clamp);}
extern "C" void APIENTRY glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {return (*pglPolygonOffsetClamp)(factor, units, clamp);}
static void wrap_glPolygonOffsetx(GLfixed factor, GLfixed units);
static void (APIENTRYP pglPolygonOffsetx)(GLfixed factor, GLfixed units) = wrap_glPolygonOffsetx;
static void wrap_glPolygonOffsetx(GLfixed factor, GLfixed units) {return trampoline<void>("glPolygonOffsetx", "glPolygonOffsetxOES", nullptr, nullptr, &pglPolygonOffsetx, factor, units);}
extern "C" void APIENTRY glPolygonOffsetx(GLfixed factor, GLfixed units) {return (*pglPolygonOffsetx)(factor, units);}
static void wrap_glPolygonStipple(const GLubyte *mask);
static void (APIENTRYP pglPolygonStipple)(const GLubyte *mask) = wrap_glPolygonStipple;
static void wrap_glPolygonStipple(const GLubyte *mask) {return trampoline<void>("glPolygonStipple", nullptr, nullptr, nullptr, &pglPolygonStipple, mask);}
extern "C" void APIENTRY glPolygonStipple(const GLubyte *mask) {return (*pglPolygonStipple)(mask);}
static void wrap_glPopAttrib(void);
static void (APIENTRYP pglPopAttrib)(void) = wrap_glPopAttrib;
static void wrap_glPopAttrib(void) {return trampoline<void>("glPopAttrib", nullptr, nullptr, nullptr, &pglPopAttrib);}
extern "C" void APIENTRY glPopAttrib(void) {return (*pglPopAttrib)();}
static void wrap_glPopClientAttrib(void);
static void (APIENTRYP pglPopClientAttrib)(void) = wrap_glPopClientAttrib;
static void wrap_glPopClientAttrib(void) {return trampoline<void>("glPopClientAttrib", nullptr, nullptr, nullptr, &pglPopClientAttrib);}
extern "C" void APIENTRY glPopClientAttrib(void) {return (*pglPopClientAttrib)();}
static void wrap_glPopDebugGroup(void);
static void (APIENTRYP pglPopDebugGroup)(void) = wrap_glPopDebugGroup;
static void wrap_glPopDebugGroup(void) {return trampoline<void>("glPopDebugGroup", nullptr, nullptr, nullptr, &pglPopDebugGroup);}
extern "C" void APIENTRY glPopDebugGroup(void) {return (*pglPopDebugGroup)();}
static void wrap_glPopGroupMarker(void);
static void (APIENTRYP pglPopGroupMarker)(void) = wrap_glPopGroupMarker;
static void wrap_glPopGroupMarker(void) {return trampoline<void>("glPopGroupMarker", "glPopGroupMarkerEXT", nullptr, nullptr, &pglPopGroupMarker);}
extern "C" void APIENTRY glPopGroupMarker(void) {return (*pglPopGroupMarker)();}
static void wrap_glPopMatrix(void);
static void (APIENTRYP pglPopMatrix)(void) = wrap_glPopMatrix;
static void wrap_glPopMatrix(void) {return trampoline<void>("glPopMatrix", nullptr, nullptr, nullptr, &pglPopMatrix);}
extern "C" void APIENTRY glPopMatrix(void) {return (*pglPopMatrix)();}
static void wrap_glPopName(void);
static void (APIENTRYP pglPopName)(void) = wrap_glPopName;
static void wrap_glPopName(void) {return trampoline<void>("glPopName", nullptr, nullptr, nullptr, &pglPopName);}
extern "C" void APIENTRY glPopName(void) {return (*pglPopName)();}
static void wrap_glPresentFrameDualFill(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
static void (APIENTRYP pglPresentFrameDualFill)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) = wrap_glPresentFrameDualFill;
static void wrap_glPresentFrameDualFill(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {return trampoline<void>("glPresentFrameDualFill", "glPresentFrameDualFillNV", nullptr, nullptr, &pglPresentFrameDualFill, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);}
extern "C" void APIENTRY glPresentFrameDualFill(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {return (*pglPresentFrameDualFill)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);}
static void wrap_glPresentFrameKeyed(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
static void (APIENTRYP pglPresentFrameKeyed)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) = wrap_glPresentFrameKeyed;
static void wrap_glPresentFrameKeyed(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {return trampoline<void>("glPresentFrameKeyed", "glPresentFrameKeyedNV", nullptr, nullptr, &pglPresentFrameKeyed, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);}
extern "C" void APIENTRY glPresentFrameKeyed(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {return (*pglPresentFrameKeyed)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);}
static void wrap_glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
static void (APIENTRYP pglPrimitiveBoundingBox)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) = wrap_glPrimitiveBoundingBox;
static void wrap_glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {return trampoline<void>("glPrimitiveBoundingBox", "glPrimitiveBoundingBoxARB", nullptr, nullptr, &pglPrimitiveBoundingBox, minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);}
extern "C" void APIENTRY glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {return (*pglPrimitiveBoundingBox)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);}
static void wrap_glPrimitiveRestart(void);
static void (APIENTRYP pglPrimitiveRestart)(void) = wrap_glPrimitiveRestart;
static void wrap_glPrimitiveRestart(void) {return trampoline<void>("glPrimitiveRestart", "glPrimitiveRestartNV", nullptr, nullptr, &pglPrimitiveRestart);}
extern "C" void APIENTRY glPrimitiveRestart(void) {return (*pglPrimitiveRestart)();}
static void wrap_glPrimitiveRestartIndex(GLuint index);
static void (APIENTRYP pglPrimitiveRestartIndex)(GLuint index) = wrap_glPrimitiveRestartIndex;
static void wrap_glPrimitiveRestartIndex(GLuint index) {return trampoline<void>("glPrimitiveRestartIndex", "glPrimitiveRestartIndexNV", nullptr, nullptr, &pglPrimitiveRestartIndex, index);}
extern "C" void APIENTRY glPrimitiveRestartIndex(GLuint index) {return (*pglPrimitiveRestartIndex)(index);}
static void wrap_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
static void (APIENTRYP pglPrioritizeTextures)(GLsizei n, const GLuint *textures, const GLclampf *priorities) = wrap_glPrioritizeTextures;
static void wrap_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities) {return trampoline<void>("glPrioritizeTextures", "glPrioritizeTexturesEXT", nullptr, nullptr, &pglPrioritizeTextures, n, textures, priorities);}
extern "C" void APIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities) {return (*pglPrioritizeTextures)(n, textures, priorities);}
static void wrap_glPrioritizeTexturesx(GLsizei n, const GLuint *textures, const GLfixed *priorities);
static void (APIENTRYP pglPrioritizeTexturesx)(GLsizei n, const GLuint *textures, const GLfixed *priorities) = wrap_glPrioritizeTexturesx;
static void wrap_glPrioritizeTexturesx(GLsizei n, const GLuint *textures, const GLfixed *priorities) {return trampoline<void>("glPrioritizeTexturesx", "glPrioritizeTexturesxOES", nullptr, nullptr, &pglPrioritizeTexturesx, n, textures, priorities);}
extern "C" void APIENTRY glPrioritizeTexturesx(GLsizei n, const GLuint *textures, const GLfixed *priorities) {return (*pglPrioritizeTexturesx)(n, textures, priorities);}
static void wrap_glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
static void (APIENTRYP pglProgramBinary)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) = wrap_glProgramBinary;
static void wrap_glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {return trampoline<void>("glProgramBinary", nullptr, nullptr, nullptr, &pglProgramBinary, program, binaryFormat, binary, length);}
extern "C" void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {return (*pglProgramBinary)(program, binaryFormat, binary, length);}
static void wrap_glProgramBufferParametersIiv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
static void (APIENTRYP pglProgramBufferParametersIiv)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) = wrap_glProgramBufferParametersIiv;
static void wrap_glProgramBufferParametersIiv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) {return trampoline<void>("glProgramBufferParametersIiv", "glProgramBufferParametersIivNV", nullptr, nullptr, &pglProgramBufferParametersIiv, target, bindingIndex, wordIndex, count, params);}
extern "C" void APIENTRY glProgramBufferParametersIiv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) {return (*pglProgramBufferParametersIiv)(target, bindingIndex, wordIndex, count, params);}
static void wrap_glProgramBufferParametersIuiv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
static void (APIENTRYP pglProgramBufferParametersIuiv)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) = wrap_glProgramBufferParametersIuiv;
static void wrap_glProgramBufferParametersIuiv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) {return trampoline<void>("glProgramBufferParametersIuiv", "glProgramBufferParametersIuivNV", nullptr, nullptr, &pglProgramBufferParametersIuiv, target, bindingIndex, wordIndex, count, params);}
extern "C" void APIENTRY glProgramBufferParametersIuiv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) {return (*pglProgramBufferParametersIuiv)(target, bindingIndex, wordIndex, count, params);}
static void wrap_glProgramBufferParametersfv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
static void (APIENTRYP pglProgramBufferParametersfv)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) = wrap_glProgramBufferParametersfv;
static void wrap_glProgramBufferParametersfv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) {return trampoline<void>("glProgramBufferParametersfv", "glProgramBufferParametersfvNV", nullptr, nullptr, &pglProgramBufferParametersfv, target, bindingIndex, wordIndex, count, params);}
extern "C" void APIENTRY glProgramBufferParametersfv(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) {return (*pglProgramBufferParametersfv)(target, bindingIndex, wordIndex, count, params);}
static void wrap_glProgramEnvParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglProgramEnvParameter4d)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glProgramEnvParameter4d;
static void wrap_glProgramEnvParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glProgramEnvParameter4d", "glProgramEnvParameter4dARB", nullptr, nullptr, &pglProgramEnvParameter4d, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramEnvParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglProgramEnvParameter4d)(target, index, x, y, z, w);}
static void wrap_glProgramEnvParameter4dv(GLenum target, GLuint index, const GLdouble *params);
static void (APIENTRYP pglProgramEnvParameter4dv)(GLenum target, GLuint index, const GLdouble *params) = wrap_glProgramEnvParameter4dv;
static void wrap_glProgramEnvParameter4dv(GLenum target, GLuint index, const GLdouble *params) {return trampoline<void>("glProgramEnvParameter4dv", "glProgramEnvParameter4dvARB", nullptr, nullptr, &pglProgramEnvParameter4dv, target, index, params);}
extern "C" void APIENTRY glProgramEnvParameter4dv(GLenum target, GLuint index, const GLdouble *params) {return (*pglProgramEnvParameter4dv)(target, index, params);}
static void wrap_glProgramEnvParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglProgramEnvParameter4f)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glProgramEnvParameter4f;
static void wrap_glProgramEnvParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glProgramEnvParameter4f", "glProgramEnvParameter4fARB", nullptr, nullptr, &pglProgramEnvParameter4f, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramEnvParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglProgramEnvParameter4f)(target, index, x, y, z, w);}
static void wrap_glProgramEnvParameter4fv(GLenum target, GLuint index, const GLfloat *params);
static void (APIENTRYP pglProgramEnvParameter4fv)(GLenum target, GLuint index, const GLfloat *params) = wrap_glProgramEnvParameter4fv;
static void wrap_glProgramEnvParameter4fv(GLenum target, GLuint index, const GLfloat *params) {return trampoline<void>("glProgramEnvParameter4fv", "glProgramEnvParameter4fvARB", nullptr, nullptr, &pglProgramEnvParameter4fv, target, index, params);}
extern "C" void APIENTRY glProgramEnvParameter4fv(GLenum target, GLuint index, const GLfloat *params) {return (*pglProgramEnvParameter4fv)(target, index, params);}
static void wrap_glProgramEnvParameterI4i(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglProgramEnvParameterI4i)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = wrap_glProgramEnvParameterI4i;
static void wrap_glProgramEnvParameterI4i(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glProgramEnvParameterI4i", "glProgramEnvParameterI4iNV", nullptr, nullptr, &pglProgramEnvParameterI4i, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramEnvParameterI4i(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {return (*pglProgramEnvParameterI4i)(target, index, x, y, z, w);}
static void wrap_glProgramEnvParameterI4iv(GLenum target, GLuint index, const GLint *params);
static void (APIENTRYP pglProgramEnvParameterI4iv)(GLenum target, GLuint index, const GLint *params) = wrap_glProgramEnvParameterI4iv;
static void wrap_glProgramEnvParameterI4iv(GLenum target, GLuint index, const GLint *params) {return trampoline<void>("glProgramEnvParameterI4iv", "glProgramEnvParameterI4ivNV", nullptr, nullptr, &pglProgramEnvParameterI4iv, target, index, params);}
extern "C" void APIENTRY glProgramEnvParameterI4iv(GLenum target, GLuint index, const GLint *params) {return (*pglProgramEnvParameterI4iv)(target, index, params);}
static void wrap_glProgramEnvParameterI4ui(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
static void (APIENTRYP pglProgramEnvParameterI4ui)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = wrap_glProgramEnvParameterI4ui;
static void wrap_glProgramEnvParameterI4ui(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return trampoline<void>("glProgramEnvParameterI4ui", "glProgramEnvParameterI4uiNV", nullptr, nullptr, &pglProgramEnvParameterI4ui, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramEnvParameterI4ui(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return (*pglProgramEnvParameterI4ui)(target, index, x, y, z, w);}
static void wrap_glProgramEnvParameterI4uiv(GLenum target, GLuint index, const GLuint *params);
static void (APIENTRYP pglProgramEnvParameterI4uiv)(GLenum target, GLuint index, const GLuint *params) = wrap_glProgramEnvParameterI4uiv;
static void wrap_glProgramEnvParameterI4uiv(GLenum target, GLuint index, const GLuint *params) {return trampoline<void>("glProgramEnvParameterI4uiv", "glProgramEnvParameterI4uivNV", nullptr, nullptr, &pglProgramEnvParameterI4uiv, target, index, params);}
extern "C" void APIENTRY glProgramEnvParameterI4uiv(GLenum target, GLuint index, const GLuint *params) {return (*pglProgramEnvParameterI4uiv)(target, index, params);}
static void wrap_glProgramEnvParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
static void (APIENTRYP pglProgramEnvParameters4fv)(GLenum target, GLuint index, GLsizei count, const GLfloat *params) = wrap_glProgramEnvParameters4fv;
static void wrap_glProgramEnvParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {return trampoline<void>("glProgramEnvParameters4fv", "glProgramEnvParameters4fvEXT", nullptr, nullptr, &pglProgramEnvParameters4fv, target, index, count, params);}
extern "C" void APIENTRY glProgramEnvParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {return (*pglProgramEnvParameters4fv)(target, index, count, params);}
static void wrap_glProgramEnvParametersI4iv(GLenum target, GLuint index, GLsizei count, const GLint *params);
static void (APIENTRYP pglProgramEnvParametersI4iv)(GLenum target, GLuint index, GLsizei count, const GLint *params) = wrap_glProgramEnvParametersI4iv;
static void wrap_glProgramEnvParametersI4iv(GLenum target, GLuint index, GLsizei count, const GLint *params) {return trampoline<void>("glProgramEnvParametersI4iv", "glProgramEnvParametersI4ivNV", nullptr, nullptr, &pglProgramEnvParametersI4iv, target, index, count, params);}
extern "C" void APIENTRY glProgramEnvParametersI4iv(GLenum target, GLuint index, GLsizei count, const GLint *params) {return (*pglProgramEnvParametersI4iv)(target, index, count, params);}
static void wrap_glProgramEnvParametersI4uiv(GLenum target, GLuint index, GLsizei count, const GLuint *params);
static void (APIENTRYP pglProgramEnvParametersI4uiv)(GLenum target, GLuint index, GLsizei count, const GLuint *params) = wrap_glProgramEnvParametersI4uiv;
static void wrap_glProgramEnvParametersI4uiv(GLenum target, GLuint index, GLsizei count, const GLuint *params) {return trampoline<void>("glProgramEnvParametersI4uiv", "glProgramEnvParametersI4uivNV", nullptr, nullptr, &pglProgramEnvParametersI4uiv, target, index, count, params);}
extern "C" void APIENTRY glProgramEnvParametersI4uiv(GLenum target, GLuint index, GLsizei count, const GLuint *params) {return (*pglProgramEnvParametersI4uiv)(target, index, count, params);}
static void wrap_glProgramLocalParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglProgramLocalParameter4d)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glProgramLocalParameter4d;
static void wrap_glProgramLocalParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glProgramLocalParameter4d", "glProgramLocalParameter4dARB", nullptr, nullptr, &pglProgramLocalParameter4d, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramLocalParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglProgramLocalParameter4d)(target, index, x, y, z, w);}
static void wrap_glProgramLocalParameter4dv(GLenum target, GLuint index, const GLdouble *params);
static void (APIENTRYP pglProgramLocalParameter4dv)(GLenum target, GLuint index, const GLdouble *params) = wrap_glProgramLocalParameter4dv;
static void wrap_glProgramLocalParameter4dv(GLenum target, GLuint index, const GLdouble *params) {return trampoline<void>("glProgramLocalParameter4dv", "glProgramLocalParameter4dvARB", nullptr, nullptr, &pglProgramLocalParameter4dv, target, index, params);}
extern "C" void APIENTRY glProgramLocalParameter4dv(GLenum target, GLuint index, const GLdouble *params) {return (*pglProgramLocalParameter4dv)(target, index, params);}
static void wrap_glProgramLocalParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglProgramLocalParameter4f)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glProgramLocalParameter4f;
static void wrap_glProgramLocalParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glProgramLocalParameter4f", "glProgramLocalParameter4fARB", nullptr, nullptr, &pglProgramLocalParameter4f, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramLocalParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglProgramLocalParameter4f)(target, index, x, y, z, w);}
static void wrap_glProgramLocalParameter4fv(GLenum target, GLuint index, const GLfloat *params);
static void (APIENTRYP pglProgramLocalParameter4fv)(GLenum target, GLuint index, const GLfloat *params) = wrap_glProgramLocalParameter4fv;
static void wrap_glProgramLocalParameter4fv(GLenum target, GLuint index, const GLfloat *params) {return trampoline<void>("glProgramLocalParameter4fv", "glProgramLocalParameter4fvARB", nullptr, nullptr, &pglProgramLocalParameter4fv, target, index, params);}
extern "C" void APIENTRY glProgramLocalParameter4fv(GLenum target, GLuint index, const GLfloat *params) {return (*pglProgramLocalParameter4fv)(target, index, params);}
static void wrap_glProgramLocalParameterI4i(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglProgramLocalParameterI4i)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = wrap_glProgramLocalParameterI4i;
static void wrap_glProgramLocalParameterI4i(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glProgramLocalParameterI4i", "glProgramLocalParameterI4iNV", nullptr, nullptr, &pglProgramLocalParameterI4i, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramLocalParameterI4i(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {return (*pglProgramLocalParameterI4i)(target, index, x, y, z, w);}
static void wrap_glProgramLocalParameterI4iv(GLenum target, GLuint index, const GLint *params);
static void (APIENTRYP pglProgramLocalParameterI4iv)(GLenum target, GLuint index, const GLint *params) = wrap_glProgramLocalParameterI4iv;
static void wrap_glProgramLocalParameterI4iv(GLenum target, GLuint index, const GLint *params) {return trampoline<void>("glProgramLocalParameterI4iv", "glProgramLocalParameterI4ivNV", nullptr, nullptr, &pglProgramLocalParameterI4iv, target, index, params);}
extern "C" void APIENTRY glProgramLocalParameterI4iv(GLenum target, GLuint index, const GLint *params) {return (*pglProgramLocalParameterI4iv)(target, index, params);}
static void wrap_glProgramLocalParameterI4ui(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
static void (APIENTRYP pglProgramLocalParameterI4ui)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = wrap_glProgramLocalParameterI4ui;
static void wrap_glProgramLocalParameterI4ui(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return trampoline<void>("glProgramLocalParameterI4ui", "glProgramLocalParameterI4uiNV", nullptr, nullptr, &pglProgramLocalParameterI4ui, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramLocalParameterI4ui(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return (*pglProgramLocalParameterI4ui)(target, index, x, y, z, w);}
static void wrap_glProgramLocalParameterI4uiv(GLenum target, GLuint index, const GLuint *params);
static void (APIENTRYP pglProgramLocalParameterI4uiv)(GLenum target, GLuint index, const GLuint *params) = wrap_glProgramLocalParameterI4uiv;
static void wrap_glProgramLocalParameterI4uiv(GLenum target, GLuint index, const GLuint *params) {return trampoline<void>("glProgramLocalParameterI4uiv", "glProgramLocalParameterI4uivNV", nullptr, nullptr, &pglProgramLocalParameterI4uiv, target, index, params);}
extern "C" void APIENTRY glProgramLocalParameterI4uiv(GLenum target, GLuint index, const GLuint *params) {return (*pglProgramLocalParameterI4uiv)(target, index, params);}
static void wrap_glProgramLocalParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
static void (APIENTRYP pglProgramLocalParameters4fv)(GLenum target, GLuint index, GLsizei count, const GLfloat *params) = wrap_glProgramLocalParameters4fv;
static void wrap_glProgramLocalParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {return trampoline<void>("glProgramLocalParameters4fv", "glProgramLocalParameters4fvEXT", nullptr, nullptr, &pglProgramLocalParameters4fv, target, index, count, params);}
extern "C" void APIENTRY glProgramLocalParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {return (*pglProgramLocalParameters4fv)(target, index, count, params);}
static void wrap_glProgramLocalParametersI4iv(GLenum target, GLuint index, GLsizei count, const GLint *params);
static void (APIENTRYP pglProgramLocalParametersI4iv)(GLenum target, GLuint index, GLsizei count, const GLint *params) = wrap_glProgramLocalParametersI4iv;
static void wrap_glProgramLocalParametersI4iv(GLenum target, GLuint index, GLsizei count, const GLint *params) {return trampoline<void>("glProgramLocalParametersI4iv", "glProgramLocalParametersI4ivNV", nullptr, nullptr, &pglProgramLocalParametersI4iv, target, index, count, params);}
extern "C" void APIENTRY glProgramLocalParametersI4iv(GLenum target, GLuint index, GLsizei count, const GLint *params) {return (*pglProgramLocalParametersI4iv)(target, index, count, params);}
static void wrap_glProgramLocalParametersI4uiv(GLenum target, GLuint index, GLsizei count, const GLuint *params);
static void (APIENTRYP pglProgramLocalParametersI4uiv)(GLenum target, GLuint index, GLsizei count, const GLuint *params) = wrap_glProgramLocalParametersI4uiv;
static void wrap_glProgramLocalParametersI4uiv(GLenum target, GLuint index, GLsizei count, const GLuint *params) {return trampoline<void>("glProgramLocalParametersI4uiv", "glProgramLocalParametersI4uivNV", nullptr, nullptr, &pglProgramLocalParametersI4uiv, target, index, count, params);}
extern "C" void APIENTRY glProgramLocalParametersI4uiv(GLenum target, GLuint index, GLsizei count, const GLuint *params) {return (*pglProgramLocalParametersI4uiv)(target, index, count, params);}
static void wrap_glProgramNamedParameter4d(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglProgramNamedParameter4d)(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glProgramNamedParameter4d;
static void wrap_glProgramNamedParameter4d(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glProgramNamedParameter4d", "glProgramNamedParameter4dNV", nullptr, nullptr, &pglProgramNamedParameter4d, id, len, name, x, y, z, w);}
extern "C" void APIENTRY glProgramNamedParameter4d(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglProgramNamedParameter4d)(id, len, name, x, y, z, w);}
static void wrap_glProgramNamedParameter4dv(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
static void (APIENTRYP pglProgramNamedParameter4dv)(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) = wrap_glProgramNamedParameter4dv;
static void wrap_glProgramNamedParameter4dv(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) {return trampoline<void>("glProgramNamedParameter4dv", "glProgramNamedParameter4dvNV", nullptr, nullptr, &pglProgramNamedParameter4dv, id, len, name, v);}
extern "C" void APIENTRY glProgramNamedParameter4dv(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) {return (*pglProgramNamedParameter4dv)(id, len, name, v);}
static void wrap_glProgramNamedParameter4f(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglProgramNamedParameter4f)(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glProgramNamedParameter4f;
static void wrap_glProgramNamedParameter4f(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glProgramNamedParameter4f", "glProgramNamedParameter4fNV", nullptr, nullptr, &pglProgramNamedParameter4f, id, len, name, x, y, z, w);}
extern "C" void APIENTRY glProgramNamedParameter4f(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglProgramNamedParameter4f)(id, len, name, x, y, z, w);}
static void wrap_glProgramNamedParameter4fv(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
static void (APIENTRYP pglProgramNamedParameter4fv)(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) = wrap_glProgramNamedParameter4fv;
static void wrap_glProgramNamedParameter4fv(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) {return trampoline<void>("glProgramNamedParameter4fv", "glProgramNamedParameter4fvNV", nullptr, nullptr, &pglProgramNamedParameter4fv, id, len, name, v);}
extern "C" void APIENTRY glProgramNamedParameter4fv(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) {return (*pglProgramNamedParameter4fv)(id, len, name, v);}
static void wrap_glProgramParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglProgramParameter4d)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glProgramParameter4d;
static void wrap_glProgramParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glProgramParameter4d", "glProgramParameter4dNV", nullptr, nullptr, &pglProgramParameter4d, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramParameter4d(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglProgramParameter4d)(target, index, x, y, z, w);}
static void wrap_glProgramParameter4dv(GLenum target, GLuint index, const GLdouble *v);
static void (APIENTRYP pglProgramParameter4dv)(GLenum target, GLuint index, const GLdouble *v) = wrap_glProgramParameter4dv;
static void wrap_glProgramParameter4dv(GLenum target, GLuint index, const GLdouble *v) {return trampoline<void>("glProgramParameter4dv", "glProgramParameter4dvNV", nullptr, nullptr, &pglProgramParameter4dv, target, index, v);}
extern "C" void APIENTRY glProgramParameter4dv(GLenum target, GLuint index, const GLdouble *v) {return (*pglProgramParameter4dv)(target, index, v);}
static void wrap_glProgramParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglProgramParameter4f)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glProgramParameter4f;
static void wrap_glProgramParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glProgramParameter4f", "glProgramParameter4fNV", nullptr, nullptr, &pglProgramParameter4f, target, index, x, y, z, w);}
extern "C" void APIENTRY glProgramParameter4f(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglProgramParameter4f)(target, index, x, y, z, w);}
static void wrap_glProgramParameter4fv(GLenum target, GLuint index, const GLfloat *v);
static void (APIENTRYP pglProgramParameter4fv)(GLenum target, GLuint index, const GLfloat *v) = wrap_glProgramParameter4fv;
static void wrap_glProgramParameter4fv(GLenum target, GLuint index, const GLfloat *v) {return trampoline<void>("glProgramParameter4fv", "glProgramParameter4fvNV", nullptr, nullptr, &pglProgramParameter4fv, target, index, v);}
extern "C" void APIENTRY glProgramParameter4fv(GLenum target, GLuint index, const GLfloat *v) {return (*pglProgramParameter4fv)(target, index, v);}
static void wrap_glProgramParameteri(GLuint program, GLenum pname, GLint value);
static void (APIENTRYP pglProgramParameteri)(GLuint program, GLenum pname, GLint value) = wrap_glProgramParameteri;
static void wrap_glProgramParameteri(GLuint program, GLenum pname, GLint value) {return trampoline<void>("glProgramParameteri", "glProgramParameteriARB", "glProgramParameteriEXT", nullptr, &pglProgramParameteri, program, pname, value);}
extern "C" void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value) {return (*pglProgramParameteri)(program, pname, value);}
static void wrap_glProgramParameters4dv(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
static void (APIENTRYP pglProgramParameters4dv)(GLenum target, GLuint index, GLsizei count, const GLdouble *v) = wrap_glProgramParameters4dv;
static void wrap_glProgramParameters4dv(GLenum target, GLuint index, GLsizei count, const GLdouble *v) {return trampoline<void>("glProgramParameters4dv", "glProgramParameters4dvNV", nullptr, nullptr, &pglProgramParameters4dv, target, index, count, v);}
extern "C" void APIENTRY glProgramParameters4dv(GLenum target, GLuint index, GLsizei count, const GLdouble *v) {return (*pglProgramParameters4dv)(target, index, count, v);}
static void wrap_glProgramParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglProgramParameters4fv)(GLenum target, GLuint index, GLsizei count, const GLfloat *v) = wrap_glProgramParameters4fv;
static void wrap_glProgramParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *v) {return trampoline<void>("glProgramParameters4fv", "glProgramParameters4fvNV", nullptr, nullptr, &pglProgramParameters4fv, target, index, count, v);}
extern "C" void APIENTRY glProgramParameters4fv(GLenum target, GLuint index, GLsizei count, const GLfloat *v) {return (*pglProgramParameters4fv)(target, index, count, v);}
static void wrap_glProgramPathFragmentInputGen(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
static void (APIENTRYP pglProgramPathFragmentInputGen)(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) = wrap_glProgramPathFragmentInputGen;
static void wrap_glProgramPathFragmentInputGen(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) {return trampoline<void>("glProgramPathFragmentInputGen", "glProgramPathFragmentInputGenNV", nullptr, nullptr, &pglProgramPathFragmentInputGen, program, location, genMode, components, coeffs);}
extern "C" void APIENTRY glProgramPathFragmentInputGen(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) {return (*pglProgramPathFragmentInputGen)(program, location, genMode, components, coeffs);}
static void wrap_glProgramString(GLenum target, GLenum format, GLsizei len, const void *string);
static void (APIENTRYP pglProgramString)(GLenum target, GLenum format, GLsizei len, const void *string) = wrap_glProgramString;
static void wrap_glProgramString(GLenum target, GLenum format, GLsizei len, const void *string) {return trampoline<void>("glProgramString", "glProgramStringARB", nullptr, nullptr, &pglProgramString, target, format, len, string);}
extern "C" void APIENTRY glProgramString(GLenum target, GLenum format, GLsizei len, const void *string) {return (*pglProgramString)(target, format, len, string);}
static void wrap_glProgramSubroutineParametersuiv(GLenum target, GLsizei count, const GLuint *params);
static void (APIENTRYP pglProgramSubroutineParametersuiv)(GLenum target, GLsizei count, const GLuint *params) = wrap_glProgramSubroutineParametersuiv;
static void wrap_glProgramSubroutineParametersuiv(GLenum target, GLsizei count, const GLuint *params) {return trampoline<void>("glProgramSubroutineParametersuiv", "glProgramSubroutineParametersuivNV", nullptr, nullptr, &pglProgramSubroutineParametersuiv, target, count, params);}
extern "C" void APIENTRY glProgramSubroutineParametersuiv(GLenum target, GLsizei count, const GLuint *params) {return (*pglProgramSubroutineParametersuiv)(target, count, params);}
static void wrap_glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
static void (APIENTRYP pglProgramUniform1d)(GLuint program, GLint location, GLdouble v0) = wrap_glProgramUniform1d;
static void wrap_glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {return trampoline<void>("glProgramUniform1d", "glProgramUniform1dEXT", nullptr, nullptr, &pglProgramUniform1d, program, location, v0);}
extern "C" void APIENTRY glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {return (*pglProgramUniform1d)(program, location, v0);}
static void wrap_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value) = wrap_glProgramUniform1dv;
static void wrap_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glProgramUniform1dv", "glProgramUniform1dvEXT", nullptr, nullptr, &pglProgramUniform1dv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return (*pglProgramUniform1dv)(program, location, count, value);}
static void wrap_glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
static void (APIENTRYP pglProgramUniform1f)(GLuint program, GLint location, GLfloat v0) = wrap_glProgramUniform1f;
static void wrap_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {return trampoline<void>("glProgramUniform1f", "glProgramUniform1fEXT", nullptr, nullptr, &pglProgramUniform1f, program, location, v0);}
extern "C" void APIENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {return (*pglProgramUniform1f)(program, location, v0);}
static void wrap_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) = wrap_glProgramUniform1fv;
static void wrap_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glProgramUniform1fv", "glProgramUniform1fvEXT", nullptr, nullptr, &pglProgramUniform1fv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return (*pglProgramUniform1fv)(program, location, count, value);}
static void wrap_glProgramUniform1i(GLuint program, GLint location, GLint v0);
static void (APIENTRYP pglProgramUniform1i)(GLuint program, GLint location, GLint v0) = wrap_glProgramUniform1i;
static void wrap_glProgramUniform1i(GLuint program, GLint location, GLint v0) {return trampoline<void>("glProgramUniform1i", "glProgramUniform1iEXT", nullptr, nullptr, &pglProgramUniform1i, program, location, v0);}
extern "C" void APIENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0) {return (*pglProgramUniform1i)(program, location, v0);}
static void wrap_glProgramUniform1i64(GLuint program, GLint location, GLint64 x);
static void (APIENTRYP pglProgramUniform1i64)(GLuint program, GLint location, GLint64 x) = wrap_glProgramUniform1i64;
static void wrap_glProgramUniform1i64(GLuint program, GLint location, GLint64 x) {return trampoline<void>("glProgramUniform1i64", "glProgramUniform1i64ARB", "glProgramUniform1i64NV", nullptr, &pglProgramUniform1i64, program, location, x);}
extern "C" void APIENTRY glProgramUniform1i64(GLuint program, GLint location, GLint64 x) {return (*pglProgramUniform1i64)(program, location, x);}
static void wrap_glProgramUniform1i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglProgramUniform1i64v)(GLuint program, GLint location, GLsizei count, const GLint64 *value) = wrap_glProgramUniform1i64v;
static void wrap_glProgramUniform1i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glProgramUniform1i64v", "glProgramUniform1i64vARB", "glProgramUniform1i64vNV", nullptr, &pglProgramUniform1i64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform1i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return (*pglProgramUniform1i64v)(program, location, count, value);}
static void wrap_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value) = wrap_glProgramUniform1iv;
static void wrap_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glProgramUniform1iv", "glProgramUniform1ivEXT", nullptr, nullptr, &pglProgramUniform1iv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return (*pglProgramUniform1iv)(program, location, count, value);}
static void wrap_glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
static void (APIENTRYP pglProgramUniform1ui)(GLuint program, GLint location, GLuint v0) = wrap_glProgramUniform1ui;
static void wrap_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {return trampoline<void>("glProgramUniform1ui", "glProgramUniform1uiEXT", nullptr, nullptr, &pglProgramUniform1ui, program, location, v0);}
extern "C" void APIENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {return (*pglProgramUniform1ui)(program, location, v0);}
static void wrap_glProgramUniform1ui64(GLuint program, GLint location, GLuint64 x);
static void (APIENTRYP pglProgramUniform1ui64)(GLuint program, GLint location, GLuint64 x) = wrap_glProgramUniform1ui64;
static void wrap_glProgramUniform1ui64(GLuint program, GLint location, GLuint64 x) {return trampoline<void>("glProgramUniform1ui64", "glProgramUniform1ui64ARB", "glProgramUniform1ui64NV", nullptr, &pglProgramUniform1ui64, program, location, x);}
extern "C" void APIENTRY glProgramUniform1ui64(GLuint program, GLint location, GLuint64 x) {return (*pglProgramUniform1ui64)(program, location, x);}
static void wrap_glProgramUniform1ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglProgramUniform1ui64v)(GLuint program, GLint location, GLsizei count, const GLuint64 *value) = wrap_glProgramUniform1ui64v;
static void wrap_glProgramUniform1ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glProgramUniform1ui64v", "glProgramUniform1ui64vARB", "glProgramUniform1ui64vNV", nullptr, &pglProgramUniform1ui64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform1ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return (*pglProgramUniform1ui64v)(program, location, count, value);}
static void wrap_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) = wrap_glProgramUniform1uiv;
static void wrap_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glProgramUniform1uiv", "glProgramUniform1uivEXT", nullptr, nullptr, &pglProgramUniform1uiv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return (*pglProgramUniform1uiv)(program, location, count, value);}
static void wrap_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
static void (APIENTRYP pglProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1) = wrap_glProgramUniform2d;
static void wrap_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {return trampoline<void>("glProgramUniform2d", "glProgramUniform2dEXT", nullptr, nullptr, &pglProgramUniform2d, program, location, v0, v1);}
extern "C" void APIENTRY glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {return (*pglProgramUniform2d)(program, location, v0, v1);}
static void wrap_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value) = wrap_glProgramUniform2dv;
static void wrap_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glProgramUniform2dv", "glProgramUniform2dvEXT", nullptr, nullptr, &pglProgramUniform2dv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return (*pglProgramUniform2dv)(program, location, count, value);}
static void wrap_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
static void (APIENTRYP pglProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1) = wrap_glProgramUniform2f;
static void wrap_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {return trampoline<void>("glProgramUniform2f", "glProgramUniform2fEXT", nullptr, nullptr, &pglProgramUniform2f, program, location, v0, v1);}
extern "C" void APIENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {return (*pglProgramUniform2f)(program, location, v0, v1);}
static void wrap_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) = wrap_glProgramUniform2fv;
static void wrap_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glProgramUniform2fv", "glProgramUniform2fvEXT", nullptr, nullptr, &pglProgramUniform2fv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return (*pglProgramUniform2fv)(program, location, count, value);}
static void wrap_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
static void (APIENTRYP pglProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1) = wrap_glProgramUniform2i;
static void wrap_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {return trampoline<void>("glProgramUniform2i", "glProgramUniform2iEXT", nullptr, nullptr, &pglProgramUniform2i, program, location, v0, v1);}
extern "C" void APIENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {return (*pglProgramUniform2i)(program, location, v0, v1);}
static void wrap_glProgramUniform2i64(GLuint program, GLint location, GLint64 x, GLint64 y);
static void (APIENTRYP pglProgramUniform2i64)(GLuint program, GLint location, GLint64 x, GLint64 y) = wrap_glProgramUniform2i64;
static void wrap_glProgramUniform2i64(GLuint program, GLint location, GLint64 x, GLint64 y) {return trampoline<void>("glProgramUniform2i64", "glProgramUniform2i64ARB", "glProgramUniform2i64NV", nullptr, &pglProgramUniform2i64, program, location, x, y);}
extern "C" void APIENTRY glProgramUniform2i64(GLuint program, GLint location, GLint64 x, GLint64 y) {return (*pglProgramUniform2i64)(program, location, x, y);}
static void wrap_glProgramUniform2i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglProgramUniform2i64v)(GLuint program, GLint location, GLsizei count, const GLint64 *value) = wrap_glProgramUniform2i64v;
static void wrap_glProgramUniform2i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glProgramUniform2i64v", "glProgramUniform2i64vARB", "glProgramUniform2i64vNV", nullptr, &pglProgramUniform2i64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform2i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return (*pglProgramUniform2i64v)(program, location, count, value);}
static void wrap_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value) = wrap_glProgramUniform2iv;
static void wrap_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glProgramUniform2iv", "glProgramUniform2ivEXT", nullptr, nullptr, &pglProgramUniform2iv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return (*pglProgramUniform2iv)(program, location, count, value);}
static void wrap_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
static void (APIENTRYP pglProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1) = wrap_glProgramUniform2ui;
static void wrap_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {return trampoline<void>("glProgramUniform2ui", "glProgramUniform2uiEXT", nullptr, nullptr, &pglProgramUniform2ui, program, location, v0, v1);}
extern "C" void APIENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {return (*pglProgramUniform2ui)(program, location, v0, v1);}
static void wrap_glProgramUniform2ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y);
static void (APIENTRYP pglProgramUniform2ui64)(GLuint program, GLint location, GLuint64 x, GLuint64 y) = wrap_glProgramUniform2ui64;
static void wrap_glProgramUniform2ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y) {return trampoline<void>("glProgramUniform2ui64", "glProgramUniform2ui64ARB", "glProgramUniform2ui64NV", nullptr, &pglProgramUniform2ui64, program, location, x, y);}
extern "C" void APIENTRY glProgramUniform2ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y) {return (*pglProgramUniform2ui64)(program, location, x, y);}
static void wrap_glProgramUniform2ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglProgramUniform2ui64v)(GLuint program, GLint location, GLsizei count, const GLuint64 *value) = wrap_glProgramUniform2ui64v;
static void wrap_glProgramUniform2ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glProgramUniform2ui64v", "glProgramUniform2ui64vARB", "glProgramUniform2ui64vNV", nullptr, &pglProgramUniform2ui64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform2ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return (*pglProgramUniform2ui64v)(program, location, count, value);}
static void wrap_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) = wrap_glProgramUniform2uiv;
static void wrap_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glProgramUniform2uiv", "glProgramUniform2uivEXT", nullptr, nullptr, &pglProgramUniform2uiv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return (*pglProgramUniform2uiv)(program, location, count, value);}
static void wrap_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
static void (APIENTRYP pglProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) = wrap_glProgramUniform3d;
static void wrap_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {return trampoline<void>("glProgramUniform3d", "glProgramUniform3dEXT", nullptr, nullptr, &pglProgramUniform3d, program, location, v0, v1, v2);}
extern "C" void APIENTRY glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {return (*pglProgramUniform3d)(program, location, v0, v1, v2);}
static void wrap_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value) = wrap_glProgramUniform3dv;
static void wrap_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glProgramUniform3dv", "glProgramUniform3dvEXT", nullptr, nullptr, &pglProgramUniform3dv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return (*pglProgramUniform3dv)(program, location, count, value);}
static void wrap_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
static void (APIENTRYP pglProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = wrap_glProgramUniform3f;
static void wrap_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {return trampoline<void>("glProgramUniform3f", "glProgramUniform3fEXT", nullptr, nullptr, &pglProgramUniform3f, program, location, v0, v1, v2);}
extern "C" void APIENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {return (*pglProgramUniform3f)(program, location, v0, v1, v2);}
static void wrap_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) = wrap_glProgramUniform3fv;
static void wrap_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glProgramUniform3fv", "glProgramUniform3fvEXT", nullptr, nullptr, &pglProgramUniform3fv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return (*pglProgramUniform3fv)(program, location, count, value);}
static void wrap_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
static void (APIENTRYP pglProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) = wrap_glProgramUniform3i;
static void wrap_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {return trampoline<void>("glProgramUniform3i", "glProgramUniform3iEXT", nullptr, nullptr, &pglProgramUniform3i, program, location, v0, v1, v2);}
extern "C" void APIENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {return (*pglProgramUniform3i)(program, location, v0, v1, v2);}
static void wrap_glProgramUniform3i64(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
static void (APIENTRYP pglProgramUniform3i64)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) = wrap_glProgramUniform3i64;
static void wrap_glProgramUniform3i64(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {return trampoline<void>("glProgramUniform3i64", "glProgramUniform3i64ARB", "glProgramUniform3i64NV", nullptr, &pglProgramUniform3i64, program, location, x, y, z);}
extern "C" void APIENTRY glProgramUniform3i64(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {return (*pglProgramUniform3i64)(program, location, x, y, z);}
static void wrap_glProgramUniform3i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglProgramUniform3i64v)(GLuint program, GLint location, GLsizei count, const GLint64 *value) = wrap_glProgramUniform3i64v;
static void wrap_glProgramUniform3i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glProgramUniform3i64v", "glProgramUniform3i64vARB", "glProgramUniform3i64vNV", nullptr, &pglProgramUniform3i64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform3i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return (*pglProgramUniform3i64v)(program, location, count, value);}
static void wrap_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value) = wrap_glProgramUniform3iv;
static void wrap_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glProgramUniform3iv", "glProgramUniform3ivEXT", nullptr, nullptr, &pglProgramUniform3iv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return (*pglProgramUniform3iv)(program, location, count, value);}
static void wrap_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
static void (APIENTRYP pglProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) = wrap_glProgramUniform3ui;
static void wrap_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {return trampoline<void>("glProgramUniform3ui", "glProgramUniform3uiEXT", nullptr, nullptr, &pglProgramUniform3ui, program, location, v0, v1, v2);}
extern "C" void APIENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {return (*pglProgramUniform3ui)(program, location, v0, v1, v2);}
static void wrap_glProgramUniform3ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
static void (APIENTRYP pglProgramUniform3ui64)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) = wrap_glProgramUniform3ui64;
static void wrap_glProgramUniform3ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {return trampoline<void>("glProgramUniform3ui64", "glProgramUniform3ui64ARB", "glProgramUniform3ui64NV", nullptr, &pglProgramUniform3ui64, program, location, x, y, z);}
extern "C" void APIENTRY glProgramUniform3ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {return (*pglProgramUniform3ui64)(program, location, x, y, z);}
static void wrap_glProgramUniform3ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglProgramUniform3ui64v)(GLuint program, GLint location, GLsizei count, const GLuint64 *value) = wrap_glProgramUniform3ui64v;
static void wrap_glProgramUniform3ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glProgramUniform3ui64v", "glProgramUniform3ui64vARB", "glProgramUniform3ui64vNV", nullptr, &pglProgramUniform3ui64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform3ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return (*pglProgramUniform3ui64v)(program, location, count, value);}
static void wrap_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) = wrap_glProgramUniform3uiv;
static void wrap_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glProgramUniform3uiv", "glProgramUniform3uivEXT", nullptr, nullptr, &pglProgramUniform3uiv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return (*pglProgramUniform3uiv)(program, location, count, value);}
static void wrap_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
static void (APIENTRYP pglProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) = wrap_glProgramUniform4d;
static void wrap_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {return trampoline<void>("glProgramUniform4d", "glProgramUniform4dEXT", nullptr, nullptr, &pglProgramUniform4d, program, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {return (*pglProgramUniform4d)(program, location, v0, v1, v2, v3);}
static void wrap_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value) = wrap_glProgramUniform4dv;
static void wrap_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glProgramUniform4dv", "glProgramUniform4dvEXT", nullptr, nullptr, &pglProgramUniform4dv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {return (*pglProgramUniform4dv)(program, location, count, value);}
static void wrap_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
static void (APIENTRYP pglProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = wrap_glProgramUniform4f;
static void wrap_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {return trampoline<void>("glProgramUniform4f", "glProgramUniform4fEXT", nullptr, nullptr, &pglProgramUniform4f, program, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {return (*pglProgramUniform4f)(program, location, v0, v1, v2, v3);}
static void wrap_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) = wrap_glProgramUniform4fv;
static void wrap_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glProgramUniform4fv", "glProgramUniform4fvEXT", nullptr, nullptr, &pglProgramUniform4fv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {return (*pglProgramUniform4fv)(program, location, count, value);}
static void wrap_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
static void (APIENTRYP pglProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = wrap_glProgramUniform4i;
static void wrap_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {return trampoline<void>("glProgramUniform4i", "glProgramUniform4iEXT", nullptr, nullptr, &pglProgramUniform4i, program, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {return (*pglProgramUniform4i)(program, location, v0, v1, v2, v3);}
static void wrap_glProgramUniform4i64(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
static void (APIENTRYP pglProgramUniform4i64)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) = wrap_glProgramUniform4i64;
static void wrap_glProgramUniform4i64(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {return trampoline<void>("glProgramUniform4i64", "glProgramUniform4i64ARB", "glProgramUniform4i64NV", nullptr, &pglProgramUniform4i64, program, location, x, y, z, w);}
extern "C" void APIENTRY glProgramUniform4i64(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {return (*pglProgramUniform4i64)(program, location, x, y, z, w);}
static void wrap_glProgramUniform4i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglProgramUniform4i64v)(GLuint program, GLint location, GLsizei count, const GLint64 *value) = wrap_glProgramUniform4i64v;
static void wrap_glProgramUniform4i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glProgramUniform4i64v", "glProgramUniform4i64vARB", "glProgramUniform4i64vNV", nullptr, &pglProgramUniform4i64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform4i64v(GLuint program, GLint location, GLsizei count, const GLint64 *value) {return (*pglProgramUniform4i64v)(program, location, count, value);}
static void wrap_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value) = wrap_glProgramUniform4iv;
static void wrap_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glProgramUniform4iv", "glProgramUniform4ivEXT", nullptr, nullptr, &pglProgramUniform4iv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {return (*pglProgramUniform4iv)(program, location, count, value);}
static void wrap_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
static void (APIENTRYP pglProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = wrap_glProgramUniform4ui;
static void wrap_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {return trampoline<void>("glProgramUniform4ui", "glProgramUniform4uiEXT", nullptr, nullptr, &pglProgramUniform4ui, program, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {return (*pglProgramUniform4ui)(program, location, v0, v1, v2, v3);}
static void wrap_glProgramUniform4ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
static void (APIENTRYP pglProgramUniform4ui64)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) = wrap_glProgramUniform4ui64;
static void wrap_glProgramUniform4ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {return trampoline<void>("glProgramUniform4ui64", "glProgramUniform4ui64ARB", "glProgramUniform4ui64NV", nullptr, &pglProgramUniform4ui64, program, location, x, y, z, w);}
extern "C" void APIENTRY glProgramUniform4ui64(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {return (*pglProgramUniform4ui64)(program, location, x, y, z, w);}
static void wrap_glProgramUniform4ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglProgramUniform4ui64v)(GLuint program, GLint location, GLsizei count, const GLuint64 *value) = wrap_glProgramUniform4ui64v;
static void wrap_glProgramUniform4ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glProgramUniform4ui64v", "glProgramUniform4ui64vARB", "glProgramUniform4ui64vNV", nullptr, &pglProgramUniform4ui64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform4ui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {return (*pglProgramUniform4ui64v)(program, location, count, value);}
static void wrap_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) = wrap_glProgramUniform4uiv;
static void wrap_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glProgramUniform4uiv", "glProgramUniform4uivEXT", nullptr, nullptr, &pglProgramUniform4uiv, program, location, count, value);}
extern "C" void APIENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {return (*pglProgramUniform4uiv)(program, location, count, value);}
static void wrap_glProgramUniformHandleui64(GLuint program, GLint location, GLuint64 value);
static void (APIENTRYP pglProgramUniformHandleui64)(GLuint program, GLint location, GLuint64 value) = wrap_glProgramUniformHandleui64;
static void wrap_glProgramUniformHandleui64(GLuint program, GLint location, GLuint64 value) {return trampoline<void>("glProgramUniformHandleui64", "glProgramUniformHandleui64ARB", "glProgramUniformHandleui64NV", nullptr, &pglProgramUniformHandleui64, program, location, value);}
extern "C" void APIENTRY glProgramUniformHandleui64(GLuint program, GLint location, GLuint64 value) {return (*pglProgramUniformHandleui64)(program, location, value);}
static void wrap_glProgramUniformHandleui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
static void (APIENTRYP pglProgramUniformHandleui64v)(GLuint program, GLint location, GLsizei count, const GLuint64 *values) = wrap_glProgramUniformHandleui64v;
static void wrap_glProgramUniformHandleui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {return trampoline<void>("glProgramUniformHandleui64v", "glProgramUniformHandleui64vARB", "glProgramUniformHandleui64vNV", nullptr, &pglProgramUniformHandleui64v, program, location, count, values);}
extern "C" void APIENTRY glProgramUniformHandleui64v(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {return (*pglProgramUniformHandleui64v)(program, location, count, values);}
static void wrap_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix2dv;
static void wrap_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix2dv", "glProgramUniformMatrix2dvEXT", nullptr, nullptr, &pglProgramUniformMatrix2dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix2dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix2fv;
static void wrap_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix2fv", "glProgramUniformMatrix2fvEXT", nullptr, nullptr, &pglProgramUniformMatrix2fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix2fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix2x3dv;
static void wrap_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix2x3dv", "glProgramUniformMatrix2x3dvEXT", nullptr, nullptr, &pglProgramUniformMatrix2x3dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix2x3dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix2x3fv;
static void wrap_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix2x3fv", "glProgramUniformMatrix2x3fvEXT", nullptr, nullptr, &pglProgramUniformMatrix2x3fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix2x3fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix2x4dv;
static void wrap_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix2x4dv", "glProgramUniformMatrix2x4dvEXT", nullptr, nullptr, &pglProgramUniformMatrix2x4dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix2x4dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix2x4fv;
static void wrap_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix2x4fv", "glProgramUniformMatrix2x4fvEXT", nullptr, nullptr, &pglProgramUniformMatrix2x4fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix2x4fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix3dv;
static void wrap_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix3dv", "glProgramUniformMatrix3dvEXT", nullptr, nullptr, &pglProgramUniformMatrix3dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix3dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix3fv;
static void wrap_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix3fv", "glProgramUniformMatrix3fvEXT", nullptr, nullptr, &pglProgramUniformMatrix3fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix3fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix3x2dv;
static void wrap_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix3x2dv", "glProgramUniformMatrix3x2dvEXT", nullptr, nullptr, &pglProgramUniformMatrix3x2dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix3x2dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix3x2fv;
static void wrap_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix3x2fv", "glProgramUniformMatrix3x2fvEXT", nullptr, nullptr, &pglProgramUniformMatrix3x2fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix3x2fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix3x4dv;
static void wrap_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix3x4dv", "glProgramUniformMatrix3x4dvEXT", nullptr, nullptr, &pglProgramUniformMatrix3x4dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix3x4dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix3x4fv;
static void wrap_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix3x4fv", "glProgramUniformMatrix3x4fvEXT", nullptr, nullptr, &pglProgramUniformMatrix3x4fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix3x4fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix4dv;
static void wrap_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix4dv", "glProgramUniformMatrix4dvEXT", nullptr, nullptr, &pglProgramUniformMatrix4dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix4dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix4fv;
static void wrap_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix4fv", "glProgramUniformMatrix4fvEXT", nullptr, nullptr, &pglProgramUniformMatrix4fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix4fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix4x2dv;
static void wrap_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix4x2dv", "glProgramUniformMatrix4x2dvEXT", nullptr, nullptr, &pglProgramUniformMatrix4x2dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix4x2dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix4x2fv;
static void wrap_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix4x2fv", "glProgramUniformMatrix4x2fvEXT", nullptr, nullptr, &pglProgramUniformMatrix4x2fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix4x2fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glProgramUniformMatrix4x3dv;
static void wrap_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glProgramUniformMatrix4x3dv", "glProgramUniformMatrix4x3dvEXT", nullptr, nullptr, &pglProgramUniformMatrix4x3dv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglProgramUniformMatrix4x3dv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glProgramUniformMatrix4x3fv;
static void wrap_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glProgramUniformMatrix4x3fv", "glProgramUniformMatrix4x3fvEXT", nullptr, nullptr, &pglProgramUniformMatrix4x3fv, program, location, count, transpose, value);}
extern "C" void APIENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglProgramUniformMatrix4x3fv)(program, location, count, transpose, value);}
static void wrap_glProgramUniformui64(GLuint program, GLint location, GLuint64EXT value);
static void (APIENTRYP pglProgramUniformui64)(GLuint program, GLint location, GLuint64EXT value) = wrap_glProgramUniformui64;
static void wrap_glProgramUniformui64(GLuint program, GLint location, GLuint64EXT value) {return trampoline<void>("glProgramUniformui64", "glProgramUniformui64NV", nullptr, nullptr, &pglProgramUniformui64, program, location, value);}
extern "C" void APIENTRY glProgramUniformui64(GLuint program, GLint location, GLuint64EXT value) {return (*pglProgramUniformui64)(program, location, value);}
static void wrap_glProgramUniformui64v(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
static void (APIENTRYP pglProgramUniformui64v)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) = wrap_glProgramUniformui64v;
static void wrap_glProgramUniformui64v(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {return trampoline<void>("glProgramUniformui64v", "glProgramUniformui64vNV", nullptr, nullptr, &pglProgramUniformui64v, program, location, count, value);}
extern "C" void APIENTRY glProgramUniformui64v(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {return (*pglProgramUniformui64v)(program, location, count, value);}
static void wrap_glProgramVertexLimit(GLenum target, GLint limit);
static void (APIENTRYP pglProgramVertexLimit)(GLenum target, GLint limit) = wrap_glProgramVertexLimit;
static void wrap_glProgramVertexLimit(GLenum target, GLint limit) {return trampoline<void>("glProgramVertexLimit", "glProgramVertexLimitNV", nullptr, nullptr, &pglProgramVertexLimit, target, limit);}
extern "C" void APIENTRY glProgramVertexLimit(GLenum target, GLint limit) {return (*pglProgramVertexLimit)(target, limit);}
static void wrap_glProvokingVertex(GLenum mode);
static void (APIENTRYP pglProvokingVertex)(GLenum mode) = wrap_glProvokingVertex;
static void wrap_glProvokingVertex(GLenum mode) {return trampoline<void>("glProvokingVertex", "glProvokingVertexEXT", nullptr, nullptr, &pglProvokingVertex, mode);}
extern "C" void APIENTRY glProvokingVertex(GLenum mode) {return (*pglProvokingVertex)(mode);}
static void wrap_glPushAttrib(GLbitfield mask);
static void (APIENTRYP pglPushAttrib)(GLbitfield mask) = wrap_glPushAttrib;
static void wrap_glPushAttrib(GLbitfield mask) {return trampoline<void>("glPushAttrib", nullptr, nullptr, nullptr, &pglPushAttrib, mask);}
extern "C" void APIENTRY glPushAttrib(GLbitfield mask) {return (*pglPushAttrib)(mask);}
static void wrap_glPushClientAttrib(GLbitfield mask);
static void (APIENTRYP pglPushClientAttrib)(GLbitfield mask) = wrap_glPushClientAttrib;
static void wrap_glPushClientAttrib(GLbitfield mask) {return trampoline<void>("glPushClientAttrib", nullptr, nullptr, nullptr, &pglPushClientAttrib, mask);}
extern "C" void APIENTRY glPushClientAttrib(GLbitfield mask) {return (*pglPushClientAttrib)(mask);}
static void wrap_glPushClientAttribDefault(GLbitfield mask);
static void (APIENTRYP pglPushClientAttribDefault)(GLbitfield mask) = wrap_glPushClientAttribDefault;
static void wrap_glPushClientAttribDefault(GLbitfield mask) {return trampoline<void>("glPushClientAttribDefault", "glPushClientAttribDefaultEXT", nullptr, nullptr, &pglPushClientAttribDefault, mask);}
extern "C" void APIENTRY glPushClientAttribDefault(GLbitfield mask) {return (*pglPushClientAttribDefault)(mask);}
static void wrap_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
static void (APIENTRYP pglPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar *message) = wrap_glPushDebugGroup;
static void wrap_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {return trampoline<void>("glPushDebugGroup", nullptr, nullptr, nullptr, &pglPushDebugGroup, source, id, length, message);}
extern "C" void APIENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {return (*pglPushDebugGroup)(source, id, length, message);}
static void wrap_glPushGroupMarker(GLsizei length, const GLchar *marker);
static void (APIENTRYP pglPushGroupMarker)(GLsizei length, const GLchar *marker) = wrap_glPushGroupMarker;
static void wrap_glPushGroupMarker(GLsizei length, const GLchar *marker) {return trampoline<void>("glPushGroupMarker", "glPushGroupMarkerEXT", nullptr, nullptr, &pglPushGroupMarker, length, marker);}
extern "C" void APIENTRY glPushGroupMarker(GLsizei length, const GLchar *marker) {return (*pglPushGroupMarker)(length, marker);}
static void wrap_glPushMatrix(void);
static void (APIENTRYP pglPushMatrix)(void) = wrap_glPushMatrix;
static void wrap_glPushMatrix(void) {return trampoline<void>("glPushMatrix", nullptr, nullptr, nullptr, &pglPushMatrix);}
extern "C" void APIENTRY glPushMatrix(void) {return (*pglPushMatrix)();}
static void wrap_glPushName(GLuint name);
static void (APIENTRYP pglPushName)(GLuint name) = wrap_glPushName;
static void wrap_glPushName(GLuint name) {return trampoline<void>("glPushName", nullptr, nullptr, nullptr, &pglPushName, name);}
extern "C" void APIENTRY glPushName(GLuint name) {return (*pglPushName)(name);}
static void wrap_glQueryCounter(GLuint id, GLenum target);
static void (APIENTRYP pglQueryCounter)(GLuint id, GLenum target) = wrap_glQueryCounter;
static void wrap_glQueryCounter(GLuint id, GLenum target) {return trampoline<void>("glQueryCounter", nullptr, nullptr, nullptr, &pglQueryCounter, id, target);}
extern "C" void APIENTRY glQueryCounter(GLuint id, GLenum target) {return (*pglQueryCounter)(id, target);}
static GLbitfield wrap_glQueryMatrixx(GLfixed *mantissa, GLint *exponent);
static GLbitfield (APIENTRYP pglQueryMatrixx)(GLfixed *mantissa, GLint *exponent) = wrap_glQueryMatrixx;
static GLbitfield wrap_glQueryMatrixx(GLfixed *mantissa, GLint *exponent) {return trampoline<GLbitfield>("glQueryMatrixx", "glQueryMatrixxOES", nullptr, nullptr, &pglQueryMatrixx, mantissa, exponent);}
extern "C" GLbitfield APIENTRY glQueryMatrixx(GLfixed *mantissa, GLint *exponent) {return (*pglQueryMatrixx)(mantissa, exponent);}
static void wrap_glQueryObjectParameterui(GLenum target, GLuint id, GLenum pname, GLuint param);
static void (APIENTRYP pglQueryObjectParameterui)(GLenum target, GLuint id, GLenum pname, GLuint param) = wrap_glQueryObjectParameterui;
static void wrap_glQueryObjectParameterui(GLenum target, GLuint id, GLenum pname, GLuint param) {return trampoline<void>("glQueryObjectParameterui", "glQueryObjectParameteruiAMD", nullptr, nullptr, &pglQueryObjectParameterui, target, id, pname, param);}
extern "C" void APIENTRY glQueryObjectParameterui(GLenum target, GLuint id, GLenum pname, GLuint param) {return (*pglQueryObjectParameterui)(target, id, pname, param);}
static void wrap_glRasterPos2d(GLdouble x, GLdouble y);
static void (APIENTRYP pglRasterPos2d)(GLdouble x, GLdouble y) = wrap_glRasterPos2d;
static void wrap_glRasterPos2d(GLdouble x, GLdouble y) {return trampoline<void>("glRasterPos2d", nullptr, nullptr, nullptr, &pglRasterPos2d, x, y);}
extern "C" void APIENTRY glRasterPos2d(GLdouble x, GLdouble y) {return (*pglRasterPos2d)(x, y);}
static void wrap_glRasterPos2dv(const GLdouble *v);
static void (APIENTRYP pglRasterPos2dv)(const GLdouble *v) = wrap_glRasterPos2dv;
static void wrap_glRasterPos2dv(const GLdouble *v) {return trampoline<void>("glRasterPos2dv", nullptr, nullptr, nullptr, &pglRasterPos2dv, v);}
extern "C" void APIENTRY glRasterPos2dv(const GLdouble *v) {return (*pglRasterPos2dv)(v);}
static void wrap_glRasterPos2f(GLfloat x, GLfloat y);
static void (APIENTRYP pglRasterPos2f)(GLfloat x, GLfloat y) = wrap_glRasterPos2f;
static void wrap_glRasterPos2f(GLfloat x, GLfloat y) {return trampoline<void>("glRasterPos2f", nullptr, nullptr, nullptr, &pglRasterPos2f, x, y);}
extern "C" void APIENTRY glRasterPos2f(GLfloat x, GLfloat y) {return (*pglRasterPos2f)(x, y);}
static void wrap_glRasterPos2fv(const GLfloat *v);
static void (APIENTRYP pglRasterPos2fv)(const GLfloat *v) = wrap_glRasterPos2fv;
static void wrap_glRasterPos2fv(const GLfloat *v) {return trampoline<void>("glRasterPos2fv", nullptr, nullptr, nullptr, &pglRasterPos2fv, v);}
extern "C" void APIENTRY glRasterPos2fv(const GLfloat *v) {return (*pglRasterPos2fv)(v);}
static void wrap_glRasterPos2i(GLint x, GLint y);
static void (APIENTRYP pglRasterPos2i)(GLint x, GLint y) = wrap_glRasterPos2i;
static void wrap_glRasterPos2i(GLint x, GLint y) {return trampoline<void>("glRasterPos2i", nullptr, nullptr, nullptr, &pglRasterPos2i, x, y);}
extern "C" void APIENTRY glRasterPos2i(GLint x, GLint y) {return (*pglRasterPos2i)(x, y);}
static void wrap_glRasterPos2iv(const GLint *v);
static void (APIENTRYP pglRasterPos2iv)(const GLint *v) = wrap_glRasterPos2iv;
static void wrap_glRasterPos2iv(const GLint *v) {return trampoline<void>("glRasterPos2iv", nullptr, nullptr, nullptr, &pglRasterPos2iv, v);}
extern "C" void APIENTRY glRasterPos2iv(const GLint *v) {return (*pglRasterPos2iv)(v);}
static void wrap_glRasterPos2s(GLshort x, GLshort y);
static void (APIENTRYP pglRasterPos2s)(GLshort x, GLshort y) = wrap_glRasterPos2s;
static void wrap_glRasterPos2s(GLshort x, GLshort y) {return trampoline<void>("glRasterPos2s", nullptr, nullptr, nullptr, &pglRasterPos2s, x, y);}
extern "C" void APIENTRY glRasterPos2s(GLshort x, GLshort y) {return (*pglRasterPos2s)(x, y);}
static void wrap_glRasterPos2sv(const GLshort *v);
static void (APIENTRYP pglRasterPos2sv)(const GLshort *v) = wrap_glRasterPos2sv;
static void wrap_glRasterPos2sv(const GLshort *v) {return trampoline<void>("glRasterPos2sv", nullptr, nullptr, nullptr, &pglRasterPos2sv, v);}
extern "C" void APIENTRY glRasterPos2sv(const GLshort *v) {return (*pglRasterPos2sv)(v);}
static void wrap_glRasterPos2x(GLfixed x, GLfixed y);
static void (APIENTRYP pglRasterPos2x)(GLfixed x, GLfixed y) = wrap_glRasterPos2x;
static void wrap_glRasterPos2x(GLfixed x, GLfixed y) {return trampoline<void>("glRasterPos2x", "glRasterPos2xOES", nullptr, nullptr, &pglRasterPos2x, x, y);}
extern "C" void APIENTRY glRasterPos2x(GLfixed x, GLfixed y) {return (*pglRasterPos2x)(x, y);}
static void wrap_glRasterPos2xv(const GLfixed *coords);
static void (APIENTRYP pglRasterPos2xv)(const GLfixed *coords) = wrap_glRasterPos2xv;
static void wrap_glRasterPos2xv(const GLfixed *coords) {return trampoline<void>("glRasterPos2xv", "glRasterPos2xvOES", nullptr, nullptr, &pglRasterPos2xv, coords);}
extern "C" void APIENTRY glRasterPos2xv(const GLfixed *coords) {return (*pglRasterPos2xv)(coords);}
static void wrap_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglRasterPos3d)(GLdouble x, GLdouble y, GLdouble z) = wrap_glRasterPos3d;
static void wrap_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glRasterPos3d", nullptr, nullptr, nullptr, &pglRasterPos3d, x, y, z);}
extern "C" void APIENTRY glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {return (*pglRasterPos3d)(x, y, z);}
static void wrap_glRasterPos3dv(const GLdouble *v);
static void (APIENTRYP pglRasterPos3dv)(const GLdouble *v) = wrap_glRasterPos3dv;
static void wrap_glRasterPos3dv(const GLdouble *v) {return trampoline<void>("glRasterPos3dv", nullptr, nullptr, nullptr, &pglRasterPos3dv, v);}
extern "C" void APIENTRY glRasterPos3dv(const GLdouble *v) {return (*pglRasterPos3dv)(v);}
static void wrap_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglRasterPos3f)(GLfloat x, GLfloat y, GLfloat z) = wrap_glRasterPos3f;
static void wrap_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glRasterPos3f", nullptr, nullptr, nullptr, &pglRasterPos3f, x, y, z);}
extern "C" void APIENTRY glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {return (*pglRasterPos3f)(x, y, z);}
static void wrap_glRasterPos3fv(const GLfloat *v);
static void (APIENTRYP pglRasterPos3fv)(const GLfloat *v) = wrap_glRasterPos3fv;
static void wrap_glRasterPos3fv(const GLfloat *v) {return trampoline<void>("glRasterPos3fv", nullptr, nullptr, nullptr, &pglRasterPos3fv, v);}
extern "C" void APIENTRY glRasterPos3fv(const GLfloat *v) {return (*pglRasterPos3fv)(v);}
static void wrap_glRasterPos3i(GLint x, GLint y, GLint z);
static void (APIENTRYP pglRasterPos3i)(GLint x, GLint y, GLint z) = wrap_glRasterPos3i;
static void wrap_glRasterPos3i(GLint x, GLint y, GLint z) {return trampoline<void>("glRasterPos3i", nullptr, nullptr, nullptr, &pglRasterPos3i, x, y, z);}
extern "C" void APIENTRY glRasterPos3i(GLint x, GLint y, GLint z) {return (*pglRasterPos3i)(x, y, z);}
static void wrap_glRasterPos3iv(const GLint *v);
static void (APIENTRYP pglRasterPos3iv)(const GLint *v) = wrap_glRasterPos3iv;
static void wrap_glRasterPos3iv(const GLint *v) {return trampoline<void>("glRasterPos3iv", nullptr, nullptr, nullptr, &pglRasterPos3iv, v);}
extern "C" void APIENTRY glRasterPos3iv(const GLint *v) {return (*pglRasterPos3iv)(v);}
static void wrap_glRasterPos3s(GLshort x, GLshort y, GLshort z);
static void (APIENTRYP pglRasterPos3s)(GLshort x, GLshort y, GLshort z) = wrap_glRasterPos3s;
static void wrap_glRasterPos3s(GLshort x, GLshort y, GLshort z) {return trampoline<void>("glRasterPos3s", nullptr, nullptr, nullptr, &pglRasterPos3s, x, y, z);}
extern "C" void APIENTRY glRasterPos3s(GLshort x, GLshort y, GLshort z) {return (*pglRasterPos3s)(x, y, z);}
static void wrap_glRasterPos3sv(const GLshort *v);
static void (APIENTRYP pglRasterPos3sv)(const GLshort *v) = wrap_glRasterPos3sv;
static void wrap_glRasterPos3sv(const GLshort *v) {return trampoline<void>("glRasterPos3sv", nullptr, nullptr, nullptr, &pglRasterPos3sv, v);}
extern "C" void APIENTRY glRasterPos3sv(const GLshort *v) {return (*pglRasterPos3sv)(v);}
static void wrap_glRasterPos3x(GLfixed x, GLfixed y, GLfixed z);
static void (APIENTRYP pglRasterPos3x)(GLfixed x, GLfixed y, GLfixed z) = wrap_glRasterPos3x;
static void wrap_glRasterPos3x(GLfixed x, GLfixed y, GLfixed z) {return trampoline<void>("glRasterPos3x", "glRasterPos3xOES", nullptr, nullptr, &pglRasterPos3x, x, y, z);}
extern "C" void APIENTRY glRasterPos3x(GLfixed x, GLfixed y, GLfixed z) {return (*pglRasterPos3x)(x, y, z);}
static void wrap_glRasterPos3xv(const GLfixed *coords);
static void (APIENTRYP pglRasterPos3xv)(const GLfixed *coords) = wrap_glRasterPos3xv;
static void wrap_glRasterPos3xv(const GLfixed *coords) {return trampoline<void>("glRasterPos3xv", "glRasterPos3xvOES", nullptr, nullptr, &pglRasterPos3xv, coords);}
extern "C" void APIENTRY glRasterPos3xv(const GLfixed *coords) {return (*pglRasterPos3xv)(coords);}
static void wrap_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glRasterPos4d;
static void wrap_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glRasterPos4d", nullptr, nullptr, nullptr, &pglRasterPos4d, x, y, z, w);}
extern "C" void APIENTRY glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglRasterPos4d)(x, y, z, w);}
static void wrap_glRasterPos4dv(const GLdouble *v);
static void (APIENTRYP pglRasterPos4dv)(const GLdouble *v) = wrap_glRasterPos4dv;
static void wrap_glRasterPos4dv(const GLdouble *v) {return trampoline<void>("glRasterPos4dv", nullptr, nullptr, nullptr, &pglRasterPos4dv, v);}
extern "C" void APIENTRY glRasterPos4dv(const GLdouble *v) {return (*pglRasterPos4dv)(v);}
static void wrap_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glRasterPos4f;
static void wrap_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glRasterPos4f", nullptr, nullptr, nullptr, &pglRasterPos4f, x, y, z, w);}
extern "C" void APIENTRY glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglRasterPos4f)(x, y, z, w);}
static void wrap_glRasterPos4fv(const GLfloat *v);
static void (APIENTRYP pglRasterPos4fv)(const GLfloat *v) = wrap_glRasterPos4fv;
static void wrap_glRasterPos4fv(const GLfloat *v) {return trampoline<void>("glRasterPos4fv", nullptr, nullptr, nullptr, &pglRasterPos4fv, v);}
extern "C" void APIENTRY glRasterPos4fv(const GLfloat *v) {return (*pglRasterPos4fv)(v);}
static void wrap_glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglRasterPos4i)(GLint x, GLint y, GLint z, GLint w) = wrap_glRasterPos4i;
static void wrap_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glRasterPos4i", nullptr, nullptr, nullptr, &pglRasterPos4i, x, y, z, w);}
extern "C" void APIENTRY glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {return (*pglRasterPos4i)(x, y, z, w);}
static void wrap_glRasterPos4iv(const GLint *v);
static void (APIENTRYP pglRasterPos4iv)(const GLint *v) = wrap_glRasterPos4iv;
static void wrap_glRasterPos4iv(const GLint *v) {return trampoline<void>("glRasterPos4iv", nullptr, nullptr, nullptr, &pglRasterPos4iv, v);}
extern "C" void APIENTRY glRasterPos4iv(const GLint *v) {return (*pglRasterPos4iv)(v);}
static void wrap_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
static void (APIENTRYP pglRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w) = wrap_glRasterPos4s;
static void wrap_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {return trampoline<void>("glRasterPos4s", nullptr, nullptr, nullptr, &pglRasterPos4s, x, y, z, w);}
extern "C" void APIENTRY glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {return (*pglRasterPos4s)(x, y, z, w);}
static void wrap_glRasterPos4sv(const GLshort *v);
static void (APIENTRYP pglRasterPos4sv)(const GLshort *v) = wrap_glRasterPos4sv;
static void wrap_glRasterPos4sv(const GLshort *v) {return trampoline<void>("glRasterPos4sv", nullptr, nullptr, nullptr, &pglRasterPos4sv, v);}
extern "C" void APIENTRY glRasterPos4sv(const GLshort *v) {return (*pglRasterPos4sv)(v);}
static void wrap_glRasterPos4x(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
static void (APIENTRYP pglRasterPos4x)(GLfixed x, GLfixed y, GLfixed z, GLfixed w) = wrap_glRasterPos4x;
static void wrap_glRasterPos4x(GLfixed x, GLfixed y, GLfixed z, GLfixed w) {return trampoline<void>("glRasterPos4x", "glRasterPos4xOES", nullptr, nullptr, &pglRasterPos4x, x, y, z, w);}
extern "C" void APIENTRY glRasterPos4x(GLfixed x, GLfixed y, GLfixed z, GLfixed w) {return (*pglRasterPos4x)(x, y, z, w);}
static void wrap_glRasterPos4xv(const GLfixed *coords);
static void (APIENTRYP pglRasterPos4xv)(const GLfixed *coords) = wrap_glRasterPos4xv;
static void wrap_glRasterPos4xv(const GLfixed *coords) {return trampoline<void>("glRasterPos4xv", "glRasterPos4xvOES", nullptr, nullptr, &pglRasterPos4xv, coords);}
extern "C" void APIENTRY glRasterPos4xv(const GLfixed *coords) {return (*pglRasterPos4xv)(coords);}
static void wrap_glRasterSamples(GLuint samples, GLboolean fixedsamplelocations);
static void (APIENTRYP pglRasterSamples)(GLuint samples, GLboolean fixedsamplelocations) = wrap_glRasterSamples;
static void wrap_glRasterSamples(GLuint samples, GLboolean fixedsamplelocations) {return trampoline<void>("glRasterSamples", "glRasterSamplesEXT", nullptr, nullptr, &pglRasterSamples, samples, fixedsamplelocations);}
extern "C" void APIENTRY glRasterSamples(GLuint samples, GLboolean fixedsamplelocations) {return (*pglRasterSamples)(samples, fixedsamplelocations);}
static void wrap_glReadBuffer(GLenum mode);
static void (APIENTRYP pglReadBuffer)(GLenum mode) = wrap_glReadBuffer;
static void wrap_glReadBuffer(GLenum mode) {return trampoline<void>("glReadBuffer", nullptr, nullptr, nullptr, &pglReadBuffer, mode);}
extern "C" void APIENTRY glReadBuffer(GLenum mode) {return (*pglReadBuffer)(mode);}
static void wrap_glReadInstruments(GLint marker);
static void (APIENTRYP pglReadInstruments)(GLint marker) = wrap_glReadInstruments;
static void wrap_glReadInstruments(GLint marker) {return trampoline<void>("glReadInstruments", "glReadInstrumentsSGIX", nullptr, nullptr, &pglReadInstruments, marker);}
extern "C" void APIENTRY glReadInstruments(GLint marker) {return (*pglReadInstruments)(marker);}
static void wrap_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
static void (APIENTRYP pglReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) = wrap_glReadPixels;
static void wrap_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) {return trampoline<void>("glReadPixels", nullptr, nullptr, nullptr, &pglReadPixels, x, y, width, height, format, type, pixels);}
extern "C" void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) {return (*pglReadPixels)(x, y, width, height, format, type, pixels);}
static void wrap_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
static void (APIENTRYP pglReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) = wrap_glReadnPixels;
static void wrap_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {return trampoline<void>("glReadnPixels", "glReadnPixelsARB", nullptr, nullptr, &pglReadnPixels, x, y, width, height, format, type, bufSize, data);}
extern "C" void APIENTRY glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {return (*pglReadnPixels)(x, y, width, height, format, type, bufSize, data);}
static void wrap_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
static void (APIENTRYP pglRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) = wrap_glRectd;
static void wrap_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {return trampoline<void>("glRectd", nullptr, nullptr, nullptr, &pglRectd, x1, y1, x2, y2);}
extern "C" void APIENTRY glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {return (*pglRectd)(x1, y1, x2, y2);}
static void wrap_glRectdv(const GLdouble *v1, const GLdouble *v2);
static void (APIENTRYP pglRectdv)(const GLdouble *v1, const GLdouble *v2) = wrap_glRectdv;
static void wrap_glRectdv(const GLdouble *v1, const GLdouble *v2) {return trampoline<void>("glRectdv", nullptr, nullptr, nullptr, &pglRectdv, v1, v2);}
extern "C" void APIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2) {return (*pglRectdv)(v1, v2);}
static void wrap_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
static void (APIENTRYP pglRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) = wrap_glRectf;
static void wrap_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {return trampoline<void>("glRectf", nullptr, nullptr, nullptr, &pglRectf, x1, y1, x2, y2);}
extern "C" void APIENTRY glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {return (*pglRectf)(x1, y1, x2, y2);}
static void wrap_glRectfv(const GLfloat *v1, const GLfloat *v2);
static void (APIENTRYP pglRectfv)(const GLfloat *v1, const GLfloat *v2) = wrap_glRectfv;
static void wrap_glRectfv(const GLfloat *v1, const GLfloat *v2) {return trampoline<void>("glRectfv", nullptr, nullptr, nullptr, &pglRectfv, v1, v2);}
extern "C" void APIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2) {return (*pglRectfv)(v1, v2);}
static void wrap_glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
static void (APIENTRYP pglRecti)(GLint x1, GLint y1, GLint x2, GLint y2) = wrap_glRecti;
static void wrap_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {return trampoline<void>("glRecti", nullptr, nullptr, nullptr, &pglRecti, x1, y1, x2, y2);}
extern "C" void APIENTRY glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {return (*pglRecti)(x1, y1, x2, y2);}
static void wrap_glRectiv(const GLint *v1, const GLint *v2);
static void (APIENTRYP pglRectiv)(const GLint *v1, const GLint *v2) = wrap_glRectiv;
static void wrap_glRectiv(const GLint *v1, const GLint *v2) {return trampoline<void>("glRectiv", nullptr, nullptr, nullptr, &pglRectiv, v1, v2);}
extern "C" void APIENTRY glRectiv(const GLint *v1, const GLint *v2) {return (*pglRectiv)(v1, v2);}
static void wrap_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
static void (APIENTRYP pglRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2) = wrap_glRects;
static void wrap_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {return trampoline<void>("glRects", nullptr, nullptr, nullptr, &pglRects, x1, y1, x2, y2);}
extern "C" void APIENTRY glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {return (*pglRects)(x1, y1, x2, y2);}
static void wrap_glRectsv(const GLshort *v1, const GLshort *v2);
static void (APIENTRYP pglRectsv)(const GLshort *v1, const GLshort *v2) = wrap_glRectsv;
static void wrap_glRectsv(const GLshort *v1, const GLshort *v2) {return trampoline<void>("glRectsv", nullptr, nullptr, nullptr, &pglRectsv, v1, v2);}
extern "C" void APIENTRY glRectsv(const GLshort *v1, const GLshort *v2) {return (*pglRectsv)(v1, v2);}
static void wrap_glRectx(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
static void (APIENTRYP pglRectx)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) = wrap_glRectx;
static void wrap_glRectx(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) {return trampoline<void>("glRectx", "glRectxOES", nullptr, nullptr, &pglRectx, x1, y1, x2, y2);}
extern "C" void APIENTRY glRectx(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) {return (*pglRectx)(x1, y1, x2, y2);}
static void wrap_glRectxv(const GLfixed *v1, const GLfixed *v2);
static void (APIENTRYP pglRectxv)(const GLfixed *v1, const GLfixed *v2) = wrap_glRectxv;
static void wrap_glRectxv(const GLfixed *v1, const GLfixed *v2) {return trampoline<void>("glRectxv", "glRectxvOES", nullptr, nullptr, &pglRectxv, v1, v2);}
extern "C" void APIENTRY glRectxv(const GLfixed *v1, const GLfixed *v2) {return (*pglRectxv)(v1, v2);}
static void wrap_glReferencePlane(const GLdouble *equation);
static void (APIENTRYP pglReferencePlane)(const GLdouble *equation) = wrap_glReferencePlane;
static void wrap_glReferencePlane(const GLdouble *equation) {return trampoline<void>("glReferencePlane", "glReferencePlaneSGIX", nullptr, nullptr, &pglReferencePlane, equation);}
extern "C" void APIENTRY glReferencePlane(const GLdouble *equation) {return (*pglReferencePlane)(equation);}
static void wrap_glReleaseShaderCompiler(void);
static void (APIENTRYP pglReleaseShaderCompiler)(void) = wrap_glReleaseShaderCompiler;
static void wrap_glReleaseShaderCompiler(void) {return trampoline<void>("glReleaseShaderCompiler", nullptr, nullptr, nullptr, &pglReleaseShaderCompiler);}
extern "C" void APIENTRY glReleaseShaderCompiler(void) {return (*pglReleaseShaderCompiler)();}
static GLint wrap_glRenderMode(GLenum mode);
static GLint (APIENTRYP pglRenderMode)(GLenum mode) = wrap_glRenderMode;
static GLint wrap_glRenderMode(GLenum mode) {return trampoline<GLint>("glRenderMode", nullptr, nullptr, nullptr, &pglRenderMode, mode);}
extern "C" GLint APIENTRY glRenderMode(GLenum mode) {return (*pglRenderMode)(mode);}
static void wrap_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glRenderbufferStorage;
static void wrap_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glRenderbufferStorage", "glRenderbufferStorageEXT", nullptr, nullptr, &pglRenderbufferStorage, target, internalformat, width, height);}
extern "C" void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglRenderbufferStorage)(target, internalformat, width, height);}
static void wrap_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glRenderbufferStorageMultisample;
static void wrap_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glRenderbufferStorageMultisample", "glRenderbufferStorageMultisampleEXT", nullptr, nullptr, &pglRenderbufferStorageMultisample, target, samples, internalformat, width, height);}
extern "C" void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglRenderbufferStorageMultisample)(target, samples, internalformat, width, height);}
static void wrap_glRenderbufferStorageMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglRenderbufferStorageMultisampleCoverage)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glRenderbufferStorageMultisampleCoverage;
static void wrap_glRenderbufferStorageMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glRenderbufferStorageMultisampleCoverage", "glRenderbufferStorageMultisampleCoverageNV", nullptr, nullptr, &pglRenderbufferStorageMultisampleCoverage, target, coverageSamples, colorSamples, internalformat, width, height);}
extern "C" void APIENTRY glRenderbufferStorageMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglRenderbufferStorageMultisampleCoverage)(target, coverageSamples, colorSamples, internalformat, width, height);}
static void wrap_glReplacementCodePointer(GLenum type, GLsizei stride, const void **pointer);
static void (APIENTRYP pglReplacementCodePointer)(GLenum type, GLsizei stride, const void **pointer) = wrap_glReplacementCodePointer;
static void wrap_glReplacementCodePointer(GLenum type, GLsizei stride, const void **pointer) {return trampoline<void>("glReplacementCodePointer", "glReplacementCodePointerSUN", nullptr, nullptr, &pglReplacementCodePointer, type, stride, pointer);}
extern "C" void APIENTRY glReplacementCodePointer(GLenum type, GLsizei stride, const void **pointer) {return (*pglReplacementCodePointer)(type, stride, pointer);}
static void wrap_glReplacementCodeub(GLubyte code);
static void (APIENTRYP pglReplacementCodeub)(GLubyte code) = wrap_glReplacementCodeub;
static void wrap_glReplacementCodeub(GLubyte code) {return trampoline<void>("glReplacementCodeub", "glReplacementCodeubSUN", nullptr, nullptr, &pglReplacementCodeub, code);}
extern "C" void APIENTRY glReplacementCodeub(GLubyte code) {return (*pglReplacementCodeub)(code);}
static void wrap_glReplacementCodeubv(const GLubyte *code);
static void (APIENTRYP pglReplacementCodeubv)(const GLubyte *code) = wrap_glReplacementCodeubv;
static void wrap_glReplacementCodeubv(const GLubyte *code) {return trampoline<void>("glReplacementCodeubv", "glReplacementCodeubvSUN", nullptr, nullptr, &pglReplacementCodeubv, code);}
extern "C" void APIENTRY glReplacementCodeubv(const GLubyte *code) {return (*pglReplacementCodeubv)(code);}
static void wrap_glReplacementCodeui(GLuint code);
static void (APIENTRYP pglReplacementCodeui)(GLuint code) = wrap_glReplacementCodeui;
static void wrap_glReplacementCodeui(GLuint code) {return trampoline<void>("glReplacementCodeui", "glReplacementCodeuiSUN", nullptr, nullptr, &pglReplacementCodeui, code);}
extern "C" void APIENTRY glReplacementCodeui(GLuint code) {return (*pglReplacementCodeui)(code);}
static void wrap_glReplacementCodeuiColor3fVertex3f(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiColor3fVertex3f)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiColor3fVertex3f;
static void wrap_glReplacementCodeuiColor3fVertex3f(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiColor3fVertex3f", "glReplacementCodeuiColor3fVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiColor3fVertex3f, rc, r, g, b, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiColor3fVertex3f(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiColor3fVertex3f)(rc, r, g, b, x, y, z);}
static void wrap_glReplacementCodeuiColor3fVertex3fv(const GLuint *rc, const GLfloat *c, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiColor3fVertex3fv)(const GLuint *rc, const GLfloat *c, const GLfloat *v) = wrap_glReplacementCodeuiColor3fVertex3fv;
static void wrap_glReplacementCodeuiColor3fVertex3fv(const GLuint *rc, const GLfloat *c, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiColor3fVertex3fv", "glReplacementCodeuiColor3fVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiColor3fVertex3fv, rc, c, v);}
extern "C" void APIENTRY glReplacementCodeuiColor3fVertex3fv(const GLuint *rc, const GLfloat *c, const GLfloat *v) {return (*pglReplacementCodeuiColor3fVertex3fv)(rc, c, v);}
static void wrap_glReplacementCodeuiColor4fNormal3fVertex3f(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiColor4fNormal3fVertex3f)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiColor4fNormal3fVertex3f;
static void wrap_glReplacementCodeuiColor4fNormal3fVertex3f(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiColor4fNormal3fVertex3f", "glReplacementCodeuiColor4fNormal3fVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiColor4fNormal3fVertex3f, rc, r, g, b, a, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3f(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiColor4fNormal3fVertex3f)(rc, r, g, b, a, nx, ny, nz, x, y, z);}
static void wrap_glReplacementCodeuiColor4fNormal3fVertex3fv(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiColor4fNormal3fVertex3fv)(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) = wrap_glReplacementCodeuiColor4fNormal3fVertex3fv;
static void wrap_glReplacementCodeuiColor4fNormal3fVertex3fv(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiColor4fNormal3fVertex3fv", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiColor4fNormal3fVertex3fv, rc, c, n, v);}
extern "C" void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fv(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return (*pglReplacementCodeuiColor4fNormal3fVertex3fv)(rc, c, n, v);}
static void wrap_glReplacementCodeuiColor4ubVertex3f(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiColor4ubVertex3f)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiColor4ubVertex3f;
static void wrap_glReplacementCodeuiColor4ubVertex3f(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiColor4ubVertex3f", "glReplacementCodeuiColor4ubVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiColor4ubVertex3f, rc, r, g, b, a, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiColor4ubVertex3f(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiColor4ubVertex3f)(rc, r, g, b, a, x, y, z);}
static void wrap_glReplacementCodeuiColor4ubVertex3fv(const GLuint *rc, const GLubyte *c, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiColor4ubVertex3fv)(const GLuint *rc, const GLubyte *c, const GLfloat *v) = wrap_glReplacementCodeuiColor4ubVertex3fv;
static void wrap_glReplacementCodeuiColor4ubVertex3fv(const GLuint *rc, const GLubyte *c, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiColor4ubVertex3fv", "glReplacementCodeuiColor4ubVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiColor4ubVertex3fv, rc, c, v);}
extern "C" void APIENTRY glReplacementCodeuiColor4ubVertex3fv(const GLuint *rc, const GLubyte *c, const GLfloat *v) {return (*pglReplacementCodeuiColor4ubVertex3fv)(rc, c, v);}
static void wrap_glReplacementCodeuiNormal3fVertex3f(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiNormal3fVertex3f)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiNormal3fVertex3f;
static void wrap_glReplacementCodeuiNormal3fVertex3f(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiNormal3fVertex3f", "glReplacementCodeuiNormal3fVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiNormal3fVertex3f, rc, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiNormal3fVertex3f(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiNormal3fVertex3f)(rc, nx, ny, nz, x, y, z);}
static void wrap_glReplacementCodeuiNormal3fVertex3fv(const GLuint *rc, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiNormal3fVertex3fv)(const GLuint *rc, const GLfloat *n, const GLfloat *v) = wrap_glReplacementCodeuiNormal3fVertex3fv;
static void wrap_glReplacementCodeuiNormal3fVertex3fv(const GLuint *rc, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiNormal3fVertex3fv", "glReplacementCodeuiNormal3fVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiNormal3fVertex3fv, rc, n, v);}
extern "C" void APIENTRY glReplacementCodeuiNormal3fVertex3fv(const GLuint *rc, const GLfloat *n, const GLfloat *v) {return (*pglReplacementCodeuiNormal3fVertex3fv)(rc, n, v);}
static void wrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f;
static void wrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f, rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);}
static void wrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv)(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) = wrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv;
static void wrap_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv, rc, tc, c, n, v);}
extern "C" void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return (*pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv)(rc, tc, c, n, v);}
static void wrap_glReplacementCodeuiTexCoord2fNormal3fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiTexCoord2fNormal3fVertex3f)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiTexCoord2fNormal3fVertex3f;
static void wrap_glReplacementCodeuiTexCoord2fNormal3fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiTexCoord2fNormal3fVertex3f", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiTexCoord2fNormal3fVertex3f, rc, s, t, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiTexCoord2fNormal3fVertex3f)(rc, s, t, nx, ny, nz, x, y, z);}
static void wrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiTexCoord2fNormal3fVertex3fv)(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) = wrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fv;
static void wrap_glReplacementCodeuiTexCoord2fNormal3fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiTexCoord2fNormal3fVertex3fv", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiTexCoord2fNormal3fVertex3fv, rc, tc, n, v);}
extern "C" void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) {return (*pglReplacementCodeuiTexCoord2fNormal3fVertex3fv)(rc, tc, n, v);}
static void wrap_glReplacementCodeuiTexCoord2fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiTexCoord2fVertex3f)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiTexCoord2fVertex3f;
static void wrap_glReplacementCodeuiTexCoord2fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiTexCoord2fVertex3f", "glReplacementCodeuiTexCoord2fVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiTexCoord2fVertex3f, rc, s, t, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiTexCoord2fVertex3f(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiTexCoord2fVertex3f)(rc, s, t, x, y, z);}
static void wrap_glReplacementCodeuiTexCoord2fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiTexCoord2fVertex3fv)(const GLuint *rc, const GLfloat *tc, const GLfloat *v) = wrap_glReplacementCodeuiTexCoord2fVertex3fv;
static void wrap_glReplacementCodeuiTexCoord2fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiTexCoord2fVertex3fv", "glReplacementCodeuiTexCoord2fVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiTexCoord2fVertex3fv, rc, tc, v);}
extern "C" void APIENTRY glReplacementCodeuiTexCoord2fVertex3fv(const GLuint *rc, const GLfloat *tc, const GLfloat *v) {return (*pglReplacementCodeuiTexCoord2fVertex3fv)(rc, tc, v);}
static void wrap_glReplacementCodeuiVertex3f(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglReplacementCodeuiVertex3f)(GLuint rc, GLfloat x, GLfloat y, GLfloat z) = wrap_glReplacementCodeuiVertex3f;
static void wrap_glReplacementCodeuiVertex3f(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glReplacementCodeuiVertex3f", "glReplacementCodeuiVertex3fSUN", nullptr, nullptr, &pglReplacementCodeuiVertex3f, rc, x, y, z);}
extern "C" void APIENTRY glReplacementCodeuiVertex3f(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {return (*pglReplacementCodeuiVertex3f)(rc, x, y, z);}
static void wrap_glReplacementCodeuiVertex3fv(const GLuint *rc, const GLfloat *v);
static void (APIENTRYP pglReplacementCodeuiVertex3fv)(const GLuint *rc, const GLfloat *v) = wrap_glReplacementCodeuiVertex3fv;
static void wrap_glReplacementCodeuiVertex3fv(const GLuint *rc, const GLfloat *v) {return trampoline<void>("glReplacementCodeuiVertex3fv", "glReplacementCodeuiVertex3fvSUN", nullptr, nullptr, &pglReplacementCodeuiVertex3fv, rc, v);}
extern "C" void APIENTRY glReplacementCodeuiVertex3fv(const GLuint *rc, const GLfloat *v) {return (*pglReplacementCodeuiVertex3fv)(rc, v);}
static void wrap_glReplacementCodeuiv(const GLuint *code);
static void (APIENTRYP pglReplacementCodeuiv)(const GLuint *code) = wrap_glReplacementCodeuiv;
static void wrap_glReplacementCodeuiv(const GLuint *code) {return trampoline<void>("glReplacementCodeuiv", "glReplacementCodeuivSUN", nullptr, nullptr, &pglReplacementCodeuiv, code);}
extern "C" void APIENTRY glReplacementCodeuiv(const GLuint *code) {return (*pglReplacementCodeuiv)(code);}
static void wrap_glReplacementCodeus(GLushort code);
static void (APIENTRYP pglReplacementCodeus)(GLushort code) = wrap_glReplacementCodeus;
static void wrap_glReplacementCodeus(GLushort code) {return trampoline<void>("glReplacementCodeus", "glReplacementCodeusSUN", nullptr, nullptr, &pglReplacementCodeus, code);}
extern "C" void APIENTRY glReplacementCodeus(GLushort code) {return (*pglReplacementCodeus)(code);}
static void wrap_glReplacementCodeusv(const GLushort *code);
static void (APIENTRYP pglReplacementCodeusv)(const GLushort *code) = wrap_glReplacementCodeusv;
static void wrap_glReplacementCodeusv(const GLushort *code) {return trampoline<void>("glReplacementCodeusv", "glReplacementCodeusvSUN", nullptr, nullptr, &pglReplacementCodeusv, code);}
extern "C" void APIENTRY glReplacementCodeusv(const GLushort *code) {return (*pglReplacementCodeusv)(code);}
static void wrap_glRequestResidentPrograms(GLsizei n, const GLuint *programs);
static void (APIENTRYP pglRequestResidentPrograms)(GLsizei n, const GLuint *programs) = wrap_glRequestResidentPrograms;
static void wrap_glRequestResidentPrograms(GLsizei n, const GLuint *programs) {return trampoline<void>("glRequestResidentPrograms", "glRequestResidentProgramsNV", nullptr, nullptr, &pglRequestResidentPrograms, n, programs);}
extern "C" void APIENTRY glRequestResidentPrograms(GLsizei n, const GLuint *programs) {return (*pglRequestResidentPrograms)(n, programs);}
static void wrap_glResetHistogram(GLenum target);
static void (APIENTRYP pglResetHistogram)(GLenum target) = wrap_glResetHistogram;
static void wrap_glResetHistogram(GLenum target) {return trampoline<void>("glResetHistogram", "glResetHistogramEXT", nullptr, nullptr, &pglResetHistogram, target);}
extern "C" void APIENTRY glResetHistogram(GLenum target) {return (*pglResetHistogram)(target);}
static void wrap_glResetMinmax(GLenum target);
static void (APIENTRYP pglResetMinmax)(GLenum target) = wrap_glResetMinmax;
static void wrap_glResetMinmax(GLenum target) {return trampoline<void>("glResetMinmax", "glResetMinmaxEXT", nullptr, nullptr, &pglResetMinmax, target);}
extern "C" void APIENTRY glResetMinmax(GLenum target) {return (*pglResetMinmax)(target);}
static void wrap_glResizeBuffers(void);
static void (APIENTRYP pglResizeBuffers)(void) = wrap_glResizeBuffers;
static void wrap_glResizeBuffers(void) {return trampoline<void>("glResizeBuffers", "glResizeBuffersMESA", nullptr, nullptr, &pglResizeBuffers);}
extern "C" void APIENTRY glResizeBuffers(void) {return (*pglResizeBuffers)();}
static void wrap_glResolveDepthValues(void);
static void (APIENTRYP pglResolveDepthValues)(void) = wrap_glResolveDepthValues;
static void wrap_glResolveDepthValues(void) {return trampoline<void>("glResolveDepthValues", "glResolveDepthValuesNV", nullptr, nullptr, &pglResolveDepthValues);}
extern "C" void APIENTRY glResolveDepthValues(void) {return (*pglResolveDepthValues)();}
static void wrap_glResumeTransformFeedback(void);
static void (APIENTRYP pglResumeTransformFeedback)(void) = wrap_glResumeTransformFeedback;
static void wrap_glResumeTransformFeedback(void) {return trampoline<void>("glResumeTransformFeedback", "glResumeTransformFeedbackNV", nullptr, nullptr, &pglResumeTransformFeedback);}
extern "C" void APIENTRY glResumeTransformFeedback(void) {return (*pglResumeTransformFeedback)();}
static void wrap_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = wrap_glRotated;
static void wrap_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glRotated", nullptr, nullptr, nullptr, &pglRotated, angle, x, y, z);}
extern "C" void APIENTRY glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {return (*pglRotated)(angle, x, y, z);}
static void wrap_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = wrap_glRotatef;
static void wrap_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glRotatef", nullptr, nullptr, nullptr, &pglRotatef, angle, x, y, z);}
extern "C" void APIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {return (*pglRotatef)(angle, x, y, z);}
static void wrap_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
static void (APIENTRYP pglRotatex)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) = wrap_glRotatex;
static void wrap_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {return trampoline<void>("glRotatex", "glRotatexOES", nullptr, nullptr, &pglRotatex, angle, x, y, z);}
extern "C" void APIENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {return (*pglRotatex)(angle, x, y, z);}
static void wrap_glSampleCoverage(GLclampf value, GLboolean invert);
static void (APIENTRYP pglSampleCoverage)(GLclampf value, GLboolean invert) = wrap_glSampleCoverage;
static void wrap_glSampleCoverage(GLclampf value, GLboolean invert) {return trampoline<void>("glSampleCoverage", "glSampleCoverageARB", nullptr, nullptr, &pglSampleCoverage, value, invert);}
extern "C" void APIENTRY glSampleCoverage(GLclampf value, GLboolean invert) {return (*pglSampleCoverage)(value, invert);}
static void wrap_glSampleMap(GLuint dst, GLuint interp, GLenum swizzle);
static void (APIENTRYP pglSampleMap)(GLuint dst, GLuint interp, GLenum swizzle) = wrap_glSampleMap;
static void wrap_glSampleMap(GLuint dst, GLuint interp, GLenum swizzle) {return trampoline<void>("glSampleMap", "glSampleMapATI", nullptr, nullptr, &pglSampleMap, dst, interp, swizzle);}
extern "C" void APIENTRY glSampleMap(GLuint dst, GLuint interp, GLenum swizzle) {return (*pglSampleMap)(dst, interp, swizzle);}
static void wrap_glSampleMask(GLclampf value, GLboolean invert);
static void (APIENTRYP pglSampleMask)(GLclampf value, GLboolean invert) = wrap_glSampleMask;
static void wrap_glSampleMask(GLclampf value, GLboolean invert) {return trampoline<void>("glSampleMask", "glSampleMaskEXT", "glSampleMaskSGIS", nullptr, &pglSampleMask, value, invert);}
extern "C" void APIENTRY glSampleMask(GLclampf value, GLboolean invert) {return (*pglSampleMask)(value, invert);}
static void wrap_glSampleMaskIndexed(GLuint index, GLbitfield mask);
static void (APIENTRYP pglSampleMaskIndexed)(GLuint index, GLbitfield mask) = wrap_glSampleMaskIndexed;
static void wrap_glSampleMaskIndexed(GLuint index, GLbitfield mask) {return trampoline<void>("glSampleMaskIndexed", "glSampleMaskIndexedNV", nullptr, nullptr, &pglSampleMaskIndexed, index, mask);}
extern "C" void APIENTRY glSampleMaskIndexed(GLuint index, GLbitfield mask) {return (*pglSampleMaskIndexed)(index, mask);}
static void wrap_glSampleMaski(GLuint maskNumber, GLbitfield mask);
static void (APIENTRYP pglSampleMaski)(GLuint maskNumber, GLbitfield mask) = wrap_glSampleMaski;
static void wrap_glSampleMaski(GLuint maskNumber, GLbitfield mask) {return trampoline<void>("glSampleMaski", nullptr, nullptr, nullptr, &pglSampleMaski, maskNumber, mask);}
extern "C" void APIENTRY glSampleMaski(GLuint maskNumber, GLbitfield mask) {return (*pglSampleMaski)(maskNumber, mask);}
static void wrap_glSamplePattern(GLenum pattern);
static void (APIENTRYP pglSamplePattern)(GLenum pattern) = wrap_glSamplePattern;
static void wrap_glSamplePattern(GLenum pattern) {return trampoline<void>("glSamplePattern", "glSamplePatternEXT", "glSamplePatternSGIS", nullptr, &pglSamplePattern, pattern);}
extern "C" void APIENTRY glSamplePattern(GLenum pattern) {return (*pglSamplePattern)(pattern);}
static void wrap_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
static void (APIENTRYP pglSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param) = wrap_glSamplerParameterIiv;
static void wrap_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {return trampoline<void>("glSamplerParameterIiv", nullptr, nullptr, nullptr, &pglSamplerParameterIiv, sampler, pname, param);}
extern "C" void APIENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {return (*pglSamplerParameterIiv)(sampler, pname, param);}
static void wrap_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
static void (APIENTRYP pglSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param) = wrap_glSamplerParameterIuiv;
static void wrap_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {return trampoline<void>("glSamplerParameterIuiv", nullptr, nullptr, nullptr, &pglSamplerParameterIuiv, sampler, pname, param);}
extern "C" void APIENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {return (*pglSamplerParameterIuiv)(sampler, pname, param);}
static void wrap_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
static void (APIENTRYP pglSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param) = wrap_glSamplerParameterf;
static void wrap_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {return trampoline<void>("glSamplerParameterf", nullptr, nullptr, nullptr, &pglSamplerParameterf, sampler, pname, param);}
extern "C" void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {return (*pglSamplerParameterf)(sampler, pname, param);}
static void wrap_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
static void (APIENTRYP pglSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param) = wrap_glSamplerParameterfv;
static void wrap_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {return trampoline<void>("glSamplerParameterfv", nullptr, nullptr, nullptr, &pglSamplerParameterfv, sampler, pname, param);}
extern "C" void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {return (*pglSamplerParameterfv)(sampler, pname, param);}
static void wrap_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
static void (APIENTRYP pglSamplerParameteri)(GLuint sampler, GLenum pname, GLint param) = wrap_glSamplerParameteri;
static void wrap_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {return trampoline<void>("glSamplerParameteri", nullptr, nullptr, nullptr, &pglSamplerParameteri, sampler, pname, param);}
extern "C" void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {return (*pglSamplerParameteri)(sampler, pname, param);}
static void wrap_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
static void (APIENTRYP pglSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param) = wrap_glSamplerParameteriv;
static void wrap_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {return trampoline<void>("glSamplerParameteriv", nullptr, nullptr, nullptr, &pglSamplerParameteriv, sampler, pname, param);}
extern "C" void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {return (*pglSamplerParameteriv)(sampler, pname, param);}
static void wrap_glScaled(GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglScaled)(GLdouble x, GLdouble y, GLdouble z) = wrap_glScaled;
static void wrap_glScaled(GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glScaled", nullptr, nullptr, nullptr, &pglScaled, x, y, z);}
extern "C" void APIENTRY glScaled(GLdouble x, GLdouble y, GLdouble z) {return (*pglScaled)(x, y, z);}
static void wrap_glScalef(GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglScalef)(GLfloat x, GLfloat y, GLfloat z) = wrap_glScalef;
static void wrap_glScalef(GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glScalef", nullptr, nullptr, nullptr, &pglScalef, x, y, z);}
extern "C" void APIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z) {return (*pglScalef)(x, y, z);}
static void wrap_glScalex(GLfixed x, GLfixed y, GLfixed z);
static void (APIENTRYP pglScalex)(GLfixed x, GLfixed y, GLfixed z) = wrap_glScalex;
static void wrap_glScalex(GLfixed x, GLfixed y, GLfixed z) {return trampoline<void>("glScalex", "glScalexOES", nullptr, nullptr, &pglScalex, x, y, z);}
extern "C" void APIENTRY glScalex(GLfixed x, GLfixed y, GLfixed z) {return (*pglScalex)(x, y, z);}
static void wrap_glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglScissor)(GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glScissor;
static void wrap_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glScissor", nullptr, nullptr, nullptr, &pglScissor, x, y, width, height);}
extern "C" void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglScissor)(x, y, width, height);}
static void wrap_glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
static void (APIENTRYP pglScissorArrayv)(GLuint first, GLsizei count, const GLint *v) = wrap_glScissorArrayv;
static void wrap_glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {return trampoline<void>("glScissorArrayv", nullptr, nullptr, nullptr, &pglScissorArrayv, first, count, v);}
extern "C" void APIENTRY glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {return (*pglScissorArrayv)(first, count, v);}
static void wrap_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
static void (APIENTRYP pglScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) = wrap_glScissorIndexed;
static void wrap_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {return trampoline<void>("glScissorIndexed", nullptr, nullptr, nullptr, &pglScissorIndexed, index, left, bottom, width, height);}
extern "C" void APIENTRY glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {return (*pglScissorIndexed)(index, left, bottom, width, height);}
static void wrap_glScissorIndexedv(GLuint index, const GLint *v);
static void (APIENTRYP pglScissorIndexedv)(GLuint index, const GLint *v) = wrap_glScissorIndexedv;
static void wrap_glScissorIndexedv(GLuint index, const GLint *v) {return trampoline<void>("glScissorIndexedv", nullptr, nullptr, nullptr, &pglScissorIndexedv, index, v);}
extern "C" void APIENTRY glScissorIndexedv(GLuint index, const GLint *v) {return (*pglScissorIndexedv)(index, v);}
static void wrap_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
static void (APIENTRYP pglSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue) = wrap_glSecondaryColor3b;
static void wrap_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {return trampoline<void>("glSecondaryColor3b", "glSecondaryColor3bEXT", nullptr, nullptr, &pglSecondaryColor3b, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {return (*pglSecondaryColor3b)(red, green, blue);}
static void wrap_glSecondaryColor3bv(const GLbyte *v);
static void (APIENTRYP pglSecondaryColor3bv)(const GLbyte *v) = wrap_glSecondaryColor3bv;
static void wrap_glSecondaryColor3bv(const GLbyte *v) {return trampoline<void>("glSecondaryColor3bv", "glSecondaryColor3bvEXT", nullptr, nullptr, &pglSecondaryColor3bv, v);}
extern "C" void APIENTRY glSecondaryColor3bv(const GLbyte *v) {return (*pglSecondaryColor3bv)(v);}
static void wrap_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
static void (APIENTRYP pglSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue) = wrap_glSecondaryColor3d;
static void wrap_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {return trampoline<void>("glSecondaryColor3d", "glSecondaryColor3dEXT", nullptr, nullptr, &pglSecondaryColor3d, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {return (*pglSecondaryColor3d)(red, green, blue);}
static void wrap_glSecondaryColor3dv(const GLdouble *v);
static void (APIENTRYP pglSecondaryColor3dv)(const GLdouble *v) = wrap_glSecondaryColor3dv;
static void wrap_glSecondaryColor3dv(const GLdouble *v) {return trampoline<void>("glSecondaryColor3dv", "glSecondaryColor3dvEXT", nullptr, nullptr, &pglSecondaryColor3dv, v);}
extern "C" void APIENTRY glSecondaryColor3dv(const GLdouble *v) {return (*pglSecondaryColor3dv)(v);}
static void wrap_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
static void (APIENTRYP pglSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue) = wrap_glSecondaryColor3f;
static void wrap_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {return trampoline<void>("glSecondaryColor3f", "glSecondaryColor3fEXT", nullptr, nullptr, &pglSecondaryColor3f, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {return (*pglSecondaryColor3f)(red, green, blue);}
static void wrap_glSecondaryColor3fv(const GLfloat *v);
static void (APIENTRYP pglSecondaryColor3fv)(const GLfloat *v) = wrap_glSecondaryColor3fv;
static void wrap_glSecondaryColor3fv(const GLfloat *v) {return trampoline<void>("glSecondaryColor3fv", "glSecondaryColor3fvEXT", nullptr, nullptr, &pglSecondaryColor3fv, v);}
extern "C" void APIENTRY glSecondaryColor3fv(const GLfloat *v) {return (*pglSecondaryColor3fv)(v);}
static void wrap_glSecondaryColor3h(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
static void (APIENTRYP pglSecondaryColor3h)(GLhalfNV red, GLhalfNV green, GLhalfNV blue) = wrap_glSecondaryColor3h;
static void wrap_glSecondaryColor3h(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {return trampoline<void>("glSecondaryColor3h", "glSecondaryColor3hNV", nullptr, nullptr, &pglSecondaryColor3h, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3h(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {return (*pglSecondaryColor3h)(red, green, blue);}
static void wrap_glSecondaryColor3hv(const GLhalfNV *v);
static void (APIENTRYP pglSecondaryColor3hv)(const GLhalfNV *v) = wrap_glSecondaryColor3hv;
static void wrap_glSecondaryColor3hv(const GLhalfNV *v) {return trampoline<void>("glSecondaryColor3hv", "glSecondaryColor3hvNV", nullptr, nullptr, &pglSecondaryColor3hv, v);}
extern "C" void APIENTRY glSecondaryColor3hv(const GLhalfNV *v) {return (*pglSecondaryColor3hv)(v);}
static void wrap_glSecondaryColor3i(GLint red, GLint green, GLint blue);
static void (APIENTRYP pglSecondaryColor3i)(GLint red, GLint green, GLint blue) = wrap_glSecondaryColor3i;
static void wrap_glSecondaryColor3i(GLint red, GLint green, GLint blue) {return trampoline<void>("glSecondaryColor3i", "glSecondaryColor3iEXT", nullptr, nullptr, &pglSecondaryColor3i, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3i(GLint red, GLint green, GLint blue) {return (*pglSecondaryColor3i)(red, green, blue);}
static void wrap_glSecondaryColor3iv(const GLint *v);
static void (APIENTRYP pglSecondaryColor3iv)(const GLint *v) = wrap_glSecondaryColor3iv;
static void wrap_glSecondaryColor3iv(const GLint *v) {return trampoline<void>("glSecondaryColor3iv", "glSecondaryColor3ivEXT", nullptr, nullptr, &pglSecondaryColor3iv, v);}
extern "C" void APIENTRY glSecondaryColor3iv(const GLint *v) {return (*pglSecondaryColor3iv)(v);}
static void wrap_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
static void (APIENTRYP pglSecondaryColor3s)(GLshort red, GLshort green, GLshort blue) = wrap_glSecondaryColor3s;
static void wrap_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {return trampoline<void>("glSecondaryColor3s", "glSecondaryColor3sEXT", nullptr, nullptr, &pglSecondaryColor3s, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {return (*pglSecondaryColor3s)(red, green, blue);}
static void wrap_glSecondaryColor3sv(const GLshort *v);
static void (APIENTRYP pglSecondaryColor3sv)(const GLshort *v) = wrap_glSecondaryColor3sv;
static void wrap_glSecondaryColor3sv(const GLshort *v) {return trampoline<void>("glSecondaryColor3sv", "glSecondaryColor3svEXT", nullptr, nullptr, &pglSecondaryColor3sv, v);}
extern "C" void APIENTRY glSecondaryColor3sv(const GLshort *v) {return (*pglSecondaryColor3sv)(v);}
static void wrap_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
static void (APIENTRYP pglSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue) = wrap_glSecondaryColor3ub;
static void wrap_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {return trampoline<void>("glSecondaryColor3ub", "glSecondaryColor3ubEXT", nullptr, nullptr, &pglSecondaryColor3ub, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {return (*pglSecondaryColor3ub)(red, green, blue);}
static void wrap_glSecondaryColor3ubv(const GLubyte *v);
static void (APIENTRYP pglSecondaryColor3ubv)(const GLubyte *v) = wrap_glSecondaryColor3ubv;
static void wrap_glSecondaryColor3ubv(const GLubyte *v) {return trampoline<void>("glSecondaryColor3ubv", "glSecondaryColor3ubvEXT", nullptr, nullptr, &pglSecondaryColor3ubv, v);}
extern "C" void APIENTRY glSecondaryColor3ubv(const GLubyte *v) {return (*pglSecondaryColor3ubv)(v);}
static void wrap_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
static void (APIENTRYP pglSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue) = wrap_glSecondaryColor3ui;
static void wrap_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {return trampoline<void>("glSecondaryColor3ui", "glSecondaryColor3uiEXT", nullptr, nullptr, &pglSecondaryColor3ui, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {return (*pglSecondaryColor3ui)(red, green, blue);}
static void wrap_glSecondaryColor3uiv(const GLuint *v);
static void (APIENTRYP pglSecondaryColor3uiv)(const GLuint *v) = wrap_glSecondaryColor3uiv;
static void wrap_glSecondaryColor3uiv(const GLuint *v) {return trampoline<void>("glSecondaryColor3uiv", "glSecondaryColor3uivEXT", nullptr, nullptr, &pglSecondaryColor3uiv, v);}
extern "C" void APIENTRY glSecondaryColor3uiv(const GLuint *v) {return (*pglSecondaryColor3uiv)(v);}
static void wrap_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
static void (APIENTRYP pglSecondaryColor3us)(GLushort red, GLushort green, GLushort blue) = wrap_glSecondaryColor3us;
static void wrap_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {return trampoline<void>("glSecondaryColor3us", "glSecondaryColor3usEXT", nullptr, nullptr, &pglSecondaryColor3us, red, green, blue);}
extern "C" void APIENTRY glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {return (*pglSecondaryColor3us)(red, green, blue);}
static void wrap_glSecondaryColor3usv(const GLushort *v);
static void (APIENTRYP pglSecondaryColor3usv)(const GLushort *v) = wrap_glSecondaryColor3usv;
static void wrap_glSecondaryColor3usv(const GLushort *v) {return trampoline<void>("glSecondaryColor3usv", "glSecondaryColor3usvEXT", nullptr, nullptr, &pglSecondaryColor3usv, v);}
extern "C" void APIENTRY glSecondaryColor3usv(const GLushort *v) {return (*pglSecondaryColor3usv)(v);}
static void wrap_glSecondaryColorFormat(GLint size, GLenum type, GLsizei stride);
static void (APIENTRYP pglSecondaryColorFormat)(GLint size, GLenum type, GLsizei stride) = wrap_glSecondaryColorFormat;
static void wrap_glSecondaryColorFormat(GLint size, GLenum type, GLsizei stride) {return trampoline<void>("glSecondaryColorFormat", "glSecondaryColorFormatNV", nullptr, nullptr, &pglSecondaryColorFormat, size, type, stride);}
extern "C" void APIENTRY glSecondaryColorFormat(GLint size, GLenum type, GLsizei stride) {return (*pglSecondaryColorFormat)(size, type, stride);}
static void wrap_glSecondaryColorP3ui(GLenum type, GLuint color);
static void (APIENTRYP pglSecondaryColorP3ui)(GLenum type, GLuint color) = wrap_glSecondaryColorP3ui;
static void wrap_glSecondaryColorP3ui(GLenum type, GLuint color) {return trampoline<void>("glSecondaryColorP3ui", nullptr, nullptr, nullptr, &pglSecondaryColorP3ui, type, color);}
extern "C" void APIENTRY glSecondaryColorP3ui(GLenum type, GLuint color) {return (*pglSecondaryColorP3ui)(type, color);}
static void wrap_glSecondaryColorP3uiv(GLenum type, const GLuint *color);
static void (APIENTRYP pglSecondaryColorP3uiv)(GLenum type, const GLuint *color) = wrap_glSecondaryColorP3uiv;
static void wrap_glSecondaryColorP3uiv(GLenum type, const GLuint *color) {return trampoline<void>("glSecondaryColorP3uiv", nullptr, nullptr, nullptr, &pglSecondaryColorP3uiv, type, color);}
extern "C" void APIENTRY glSecondaryColorP3uiv(GLenum type, const GLuint *color) {return (*pglSecondaryColorP3uiv)(type, color);}
static void wrap_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glSecondaryColorPointer;
static void wrap_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glSecondaryColorPointer", "glSecondaryColorPointerEXT", nullptr, nullptr, &pglSecondaryColorPointer, size, type, stride, pointer);}
extern "C" void APIENTRY glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglSecondaryColorPointer)(size, type, stride, pointer);}
static void wrap_glSecondaryColorPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglSecondaryColorPointerList)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glSecondaryColorPointerList;
static void wrap_glSecondaryColorPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glSecondaryColorPointerList", "glSecondaryColorPointerListIBM", nullptr, nullptr, &pglSecondaryColorPointerList, size, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glSecondaryColorPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglSecondaryColorPointerList)(size, type, stride, pointer, ptrstride);}
static void wrap_glSelectBuffer(GLsizei size, GLuint *buffer);
static void (APIENTRYP pglSelectBuffer)(GLsizei size, GLuint *buffer) = wrap_glSelectBuffer;
static void wrap_glSelectBuffer(GLsizei size, GLuint *buffer) {return trampoline<void>("glSelectBuffer", nullptr, nullptr, nullptr, &pglSelectBuffer, size, buffer);}
extern "C" void APIENTRY glSelectBuffer(GLsizei size, GLuint *buffer) {return (*pglSelectBuffer)(size, buffer);}
static void wrap_glSelectPerfMonitorCounters(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
static void (APIENTRYP pglSelectPerfMonitorCounters)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) = wrap_glSelectPerfMonitorCounters;
static void wrap_glSelectPerfMonitorCounters(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {return trampoline<void>("glSelectPerfMonitorCounters", "glSelectPerfMonitorCountersAMD", nullptr, nullptr, &pglSelectPerfMonitorCounters, monitor, enable, group, numCounters, counterList);}
extern "C" void APIENTRY glSelectPerfMonitorCounters(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {return (*pglSelectPerfMonitorCounters)(monitor, enable, group, numCounters, counterList);}
static void wrap_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
static void (APIENTRYP pglSeparableFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column) = wrap_glSeparableFilter2D;
static void wrap_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column) {return trampoline<void>("glSeparableFilter2D", "glSeparableFilter2DEXT", nullptr, nullptr, &pglSeparableFilter2D, target, internalformat, width, height, format, type, row, column);}
extern "C" void APIENTRY glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column) {return (*pglSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);}
static void wrap_glSetFence(GLuint fence);
static void (APIENTRYP pglSetFence)(GLuint fence) = wrap_glSetFence;
static void wrap_glSetFence(GLuint fence) {return trampoline<void>("glSetFence", "glSetFenceAPPLE", "glSetFenceNV", nullptr, &pglSetFence, fence);}
extern "C" void APIENTRY glSetFence(GLuint fence) {return (*pglSetFence)(fence);}
static void wrap_glSetFragmentShaderConstant(GLuint dst, const GLfloat *value);
static void (APIENTRYP pglSetFragmentShaderConstant)(GLuint dst, const GLfloat *value) = wrap_glSetFragmentShaderConstant;
static void wrap_glSetFragmentShaderConstant(GLuint dst, const GLfloat *value) {return trampoline<void>("glSetFragmentShaderConstant", "glSetFragmentShaderConstantATI", nullptr, nullptr, &pglSetFragmentShaderConstant, dst, value);}
extern "C" void APIENTRY glSetFragmentShaderConstant(GLuint dst, const GLfloat *value) {return (*pglSetFragmentShaderConstant)(dst, value);}
static void wrap_glSetInvariant(GLuint id, GLenum type, const void *addr);
static void (APIENTRYP pglSetInvariant)(GLuint id, GLenum type, const void *addr) = wrap_glSetInvariant;
static void wrap_glSetInvariant(GLuint id, GLenum type, const void *addr) {return trampoline<void>("glSetInvariant", "glSetInvariantEXT", nullptr, nullptr, &pglSetInvariant, id, type, addr);}
extern "C" void APIENTRY glSetInvariant(GLuint id, GLenum type, const void *addr) {return (*pglSetInvariant)(id, type, addr);}
static void wrap_glSetLocalConstant(GLuint id, GLenum type, const void *addr);
static void (APIENTRYP pglSetLocalConstant)(GLuint id, GLenum type, const void *addr) = wrap_glSetLocalConstant;
static void wrap_glSetLocalConstant(GLuint id, GLenum type, const void *addr) {return trampoline<void>("glSetLocalConstant", "glSetLocalConstantEXT", nullptr, nullptr, &pglSetLocalConstant, id, type, addr);}
extern "C" void APIENTRY glSetLocalConstant(GLuint id, GLenum type, const void *addr) {return (*pglSetLocalConstant)(id, type, addr);}
static void wrap_glSetMultisamplefv(GLenum pname, GLuint index, const GLfloat *val);
static void (APIENTRYP pglSetMultisamplefv)(GLenum pname, GLuint index, const GLfloat *val) = wrap_glSetMultisamplefv;
static void wrap_glSetMultisamplefv(GLenum pname, GLuint index, const GLfloat *val) {return trampoline<void>("glSetMultisamplefv", "glSetMultisamplefvAMD", nullptr, nullptr, &pglSetMultisamplefv, pname, index, val);}
extern "C" void APIENTRY glSetMultisamplefv(GLenum pname, GLuint index, const GLfloat *val) {return (*pglSetMultisamplefv)(pname, index, val);}
static void wrap_glShadeModel(GLenum mode);
static void (APIENTRYP pglShadeModel)(GLenum mode) = wrap_glShadeModel;
static void wrap_glShadeModel(GLenum mode) {return trampoline<void>("glShadeModel", nullptr, nullptr, nullptr, &pglShadeModel, mode);}
extern "C" void APIENTRY glShadeModel(GLenum mode) {return (*pglShadeModel)(mode);}
static void wrap_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
static void (APIENTRYP pglShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) = wrap_glShaderBinary;
static void wrap_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {return trampoline<void>("glShaderBinary", nullptr, nullptr, nullptr, &pglShaderBinary, count, shaders, binaryformat, binary, length);}
extern "C" void APIENTRY glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {return (*pglShaderBinary)(count, shaders, binaryformat, binary, length);}
static void wrap_glShaderOp1(GLenum op, GLuint res, GLuint arg1);
static void (APIENTRYP pglShaderOp1)(GLenum op, GLuint res, GLuint arg1) = wrap_glShaderOp1;
static void wrap_glShaderOp1(GLenum op, GLuint res, GLuint arg1) {return trampoline<void>("glShaderOp1", "glShaderOp1EXT", nullptr, nullptr, &pglShaderOp1, op, res, arg1);}
extern "C" void APIENTRY glShaderOp1(GLenum op, GLuint res, GLuint arg1) {return (*pglShaderOp1)(op, res, arg1);}
static void wrap_glShaderOp2(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
static void (APIENTRYP pglShaderOp2)(GLenum op, GLuint res, GLuint arg1, GLuint arg2) = wrap_glShaderOp2;
static void wrap_glShaderOp2(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {return trampoline<void>("glShaderOp2", "glShaderOp2EXT", nullptr, nullptr, &pglShaderOp2, op, res, arg1, arg2);}
extern "C" void APIENTRY glShaderOp2(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {return (*pglShaderOp2)(op, res, arg1, arg2);}
static void wrap_glShaderOp3(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
static void (APIENTRYP pglShaderOp3)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) = wrap_glShaderOp3;
static void wrap_glShaderOp3(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {return trampoline<void>("glShaderOp3", "glShaderOp3EXT", nullptr, nullptr, &pglShaderOp3, op, res, arg1, arg2, arg3);}
extern "C" void APIENTRY glShaderOp3(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {return (*pglShaderOp3)(op, res, arg1, arg2, arg3);}
static void wrap_glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
static void (APIENTRYP pglShaderSource)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) = wrap_glShaderSource;
static void wrap_glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {return trampoline<void>("glShaderSource", "glShaderSourceARB", nullptr, nullptr, &pglShaderSource, shader, count, string, length);}
extern "C" void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {return (*pglShaderSource)(shader, count, string, length);}
static void wrap_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
static void (APIENTRYP pglShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) = wrap_glShaderStorageBlockBinding;
static void wrap_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {return trampoline<void>("glShaderStorageBlockBinding", nullptr, nullptr, nullptr, &pglShaderStorageBlockBinding, program, storageBlockIndex, storageBlockBinding);}
extern "C" void APIENTRY glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {return (*pglShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);}
static void wrap_glSharpenTexFunc(GLenum target, GLsizei n, const GLfloat *points);
static void (APIENTRYP pglSharpenTexFunc)(GLenum target, GLsizei n, const GLfloat *points) = wrap_glSharpenTexFunc;
static void wrap_glSharpenTexFunc(GLenum target, GLsizei n, const GLfloat *points) {return trampoline<void>("glSharpenTexFunc", "glSharpenTexFuncSGIS", nullptr, nullptr, &pglSharpenTexFunc, target, n, points);}
extern "C" void APIENTRY glSharpenTexFunc(GLenum target, GLsizei n, const GLfloat *points) {return (*pglSharpenTexFunc)(target, n, points);}
static void wrap_glSpriteParameterf(GLenum pname, GLfloat param);
static void (APIENTRYP pglSpriteParameterf)(GLenum pname, GLfloat param) = wrap_glSpriteParameterf;
static void wrap_glSpriteParameterf(GLenum pname, GLfloat param) {return trampoline<void>("glSpriteParameterf", "glSpriteParameterfSGIX", nullptr, nullptr, &pglSpriteParameterf, pname, param);}
extern "C" void APIENTRY glSpriteParameterf(GLenum pname, GLfloat param) {return (*pglSpriteParameterf)(pname, param);}
static void wrap_glSpriteParameterfv(GLenum pname, const GLfloat *params);
static void (APIENTRYP pglSpriteParameterfv)(GLenum pname, const GLfloat *params) = wrap_glSpriteParameterfv;
static void wrap_glSpriteParameterfv(GLenum pname, const GLfloat *params) {return trampoline<void>("glSpriteParameterfv", "glSpriteParameterfvSGIX", nullptr, nullptr, &pglSpriteParameterfv, pname, params);}
extern "C" void APIENTRY glSpriteParameterfv(GLenum pname, const GLfloat *params) {return (*pglSpriteParameterfv)(pname, params);}
static void wrap_glSpriteParameteri(GLenum pname, GLint param);
static void (APIENTRYP pglSpriteParameteri)(GLenum pname, GLint param) = wrap_glSpriteParameteri;
static void wrap_glSpriteParameteri(GLenum pname, GLint param) {return trampoline<void>("glSpriteParameteri", "glSpriteParameteriSGIX", nullptr, nullptr, &pglSpriteParameteri, pname, param);}
extern "C" void APIENTRY glSpriteParameteri(GLenum pname, GLint param) {return (*pglSpriteParameteri)(pname, param);}
static void wrap_glSpriteParameteriv(GLenum pname, const GLint *params);
static void (APIENTRYP pglSpriteParameteriv)(GLenum pname, const GLint *params) = wrap_glSpriteParameteriv;
static void wrap_glSpriteParameteriv(GLenum pname, const GLint *params) {return trampoline<void>("glSpriteParameteriv", "glSpriteParameterivSGIX", nullptr, nullptr, &pglSpriteParameteriv, pname, params);}
extern "C" void APIENTRY glSpriteParameteriv(GLenum pname, const GLint *params) {return (*pglSpriteParameteriv)(pname, params);}
static void wrap_glStartInstruments(void);
static void (APIENTRYP pglStartInstruments)(void) = wrap_glStartInstruments;
static void wrap_glStartInstruments(void) {return trampoline<void>("glStartInstruments", "glStartInstrumentsSGIX", nullptr, nullptr, &pglStartInstruments);}
extern "C" void APIENTRY glStartInstruments(void) {return (*pglStartInstruments)();}
static void wrap_glStateCapture(GLuint state, GLenum mode);
static void (APIENTRYP pglStateCapture)(GLuint state, GLenum mode) = wrap_glStateCapture;
static void wrap_glStateCapture(GLuint state, GLenum mode) {return trampoline<void>("glStateCapture", "glStateCaptureNV", nullptr, nullptr, &pglStateCapture, state, mode);}
extern "C" void APIENTRY glStateCapture(GLuint state, GLenum mode) {return (*pglStateCapture)(state, mode);}
static void wrap_glStencilClearTag(GLsizei stencilTagBits, GLuint stencilClearTag);
static void (APIENTRYP pglStencilClearTag)(GLsizei stencilTagBits, GLuint stencilClearTag) = wrap_glStencilClearTag;
static void wrap_glStencilClearTag(GLsizei stencilTagBits, GLuint stencilClearTag) {return trampoline<void>("glStencilClearTag", "glStencilClearTagEXT", nullptr, nullptr, &pglStencilClearTag, stencilTagBits, stencilClearTag);}
extern "C" void APIENTRY glStencilClearTag(GLsizei stencilTagBits, GLuint stencilClearTag) {return (*pglStencilClearTag)(stencilTagBits, stencilClearTag);}
static void wrap_glStencilFillPath(GLuint path, GLenum fillMode, GLuint mask);
static void (APIENTRYP pglStencilFillPath)(GLuint path, GLenum fillMode, GLuint mask) = wrap_glStencilFillPath;
static void wrap_glStencilFillPath(GLuint path, GLenum fillMode, GLuint mask) {return trampoline<void>("glStencilFillPath", "glStencilFillPathNV", nullptr, nullptr, &pglStencilFillPath, path, fillMode, mask);}
extern "C" void APIENTRY glStencilFillPath(GLuint path, GLenum fillMode, GLuint mask) {return (*pglStencilFillPath)(path, fillMode, mask);}
static void wrap_glStencilFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglStencilFillPathInstanced)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) = wrap_glStencilFillPathInstanced;
static void wrap_glStencilFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glStencilFillPathInstanced", "glStencilFillPathInstancedNV", nullptr, nullptr, &pglStencilFillPathInstanced, numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);}
extern "C" void APIENTRY glStencilFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) {return (*pglStencilFillPathInstanced)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);}
static void wrap_glStencilFunc(GLenum func, GLint ref, GLuint mask);
static void (APIENTRYP pglStencilFunc)(GLenum func, GLint ref, GLuint mask) = wrap_glStencilFunc;
static void wrap_glStencilFunc(GLenum func, GLint ref, GLuint mask) {return trampoline<void>("glStencilFunc", nullptr, nullptr, nullptr, &pglStencilFunc, func, ref, mask);}
extern "C" void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask) {return (*pglStencilFunc)(func, ref, mask);}
static void wrap_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
static void (APIENTRYP pglStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask) = wrap_glStencilFuncSeparate;
static void wrap_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {return trampoline<void>("glStencilFuncSeparate", "glStencilFuncSeparateATI", nullptr, nullptr, &pglStencilFuncSeparate, face, func, ref, mask);}
extern "C" void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {return (*pglStencilFuncSeparate)(face, func, ref, mask);}
static void wrap_glStencilMask(GLuint mask);
static void (APIENTRYP pglStencilMask)(GLuint mask) = wrap_glStencilMask;
static void wrap_glStencilMask(GLuint mask) {return trampoline<void>("glStencilMask", nullptr, nullptr, nullptr, &pglStencilMask, mask);}
extern "C" void APIENTRY glStencilMask(GLuint mask) {return (*pglStencilMask)(mask);}
static void wrap_glStencilMaskSeparate(GLenum face, GLuint mask);
static void (APIENTRYP pglStencilMaskSeparate)(GLenum face, GLuint mask) = wrap_glStencilMaskSeparate;
static void wrap_glStencilMaskSeparate(GLenum face, GLuint mask) {return trampoline<void>("glStencilMaskSeparate", nullptr, nullptr, nullptr, &pglStencilMaskSeparate, face, mask);}
extern "C" void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask) {return (*pglStencilMaskSeparate)(face, mask);}
static void wrap_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
static void (APIENTRYP pglStencilOp)(GLenum fail, GLenum zfail, GLenum zpass) = wrap_glStencilOp;
static void wrap_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {return trampoline<void>("glStencilOp", nullptr, nullptr, nullptr, &pglStencilOp, fail, zfail, zpass);}
extern "C" void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {return (*pglStencilOp)(fail, zfail, zpass);}
static void wrap_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
static void (APIENTRYP pglStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) = wrap_glStencilOpSeparate;
static void wrap_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {return trampoline<void>("glStencilOpSeparate", "glStencilOpSeparateATI", nullptr, nullptr, &pglStencilOpSeparate, face, sfail, dpfail, dppass);}
extern "C" void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {return (*pglStencilOpSeparate)(face, sfail, dpfail, dppass);}
static void wrap_glStencilOpValue(GLenum face, GLuint value);
static void (APIENTRYP pglStencilOpValue)(GLenum face, GLuint value) = wrap_glStencilOpValue;
static void wrap_glStencilOpValue(GLenum face, GLuint value) {return trampoline<void>("glStencilOpValue", "glStencilOpValueAMD", nullptr, nullptr, &pglStencilOpValue, face, value);}
extern "C" void APIENTRY glStencilOpValue(GLenum face, GLuint value) {return (*pglStencilOpValue)(face, value);}
static void wrap_glStencilStrokePath(GLuint path, GLint reference, GLuint mask);
static void (APIENTRYP pglStencilStrokePath)(GLuint path, GLint reference, GLuint mask) = wrap_glStencilStrokePath;
static void wrap_glStencilStrokePath(GLuint path, GLint reference, GLuint mask) {return trampoline<void>("glStencilStrokePath", "glStencilStrokePathNV", nullptr, nullptr, &pglStencilStrokePath, path, reference, mask);}
extern "C" void APIENTRY glStencilStrokePath(GLuint path, GLint reference, GLuint mask) {return (*pglStencilStrokePath)(path, reference, mask);}
static void wrap_glStencilStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglStencilStrokePathInstanced)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) = wrap_glStencilStrokePathInstanced;
static void wrap_glStencilStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glStencilStrokePathInstanced", "glStencilStrokePathInstancedNV", nullptr, nullptr, &pglStencilStrokePathInstanced, numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);}
extern "C" void APIENTRY glStencilStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) {return (*pglStencilStrokePathInstanced)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);}
static void wrap_glStencilThenCoverFillPath(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
static void (APIENTRYP pglStencilThenCoverFillPath)(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) = wrap_glStencilThenCoverFillPath;
static void wrap_glStencilThenCoverFillPath(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {return trampoline<void>("glStencilThenCoverFillPath", "glStencilThenCoverFillPathNV", nullptr, nullptr, &pglStencilThenCoverFillPath, path, fillMode, mask, coverMode);}
extern "C" void APIENTRY glStencilThenCoverFillPath(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {return (*pglStencilThenCoverFillPath)(path, fillMode, mask, coverMode);}
static void wrap_glStencilThenCoverFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglStencilThenCoverFillPathInstanced)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) = wrap_glStencilThenCoverFillPathInstanced;
static void wrap_glStencilThenCoverFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glStencilThenCoverFillPathInstanced", "glStencilThenCoverFillPathInstancedNV", nullptr, nullptr, &pglStencilThenCoverFillPathInstanced, numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);}
extern "C" void APIENTRY glStencilThenCoverFillPathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return (*pglStencilThenCoverFillPathInstanced)(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);}
static void wrap_glStencilThenCoverStrokePath(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
static void (APIENTRYP pglStencilThenCoverStrokePath)(GLuint path, GLint reference, GLuint mask, GLenum coverMode) = wrap_glStencilThenCoverStrokePath;
static void wrap_glStencilThenCoverStrokePath(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {return trampoline<void>("glStencilThenCoverStrokePath", "glStencilThenCoverStrokePathNV", nullptr, nullptr, &pglStencilThenCoverStrokePath, path, reference, mask, coverMode);}
extern "C" void APIENTRY glStencilThenCoverStrokePath(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {return (*pglStencilThenCoverStrokePath)(path, reference, mask, coverMode);}
static void wrap_glStencilThenCoverStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglStencilThenCoverStrokePathInstanced)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) = wrap_glStencilThenCoverStrokePathInstanced;
static void wrap_glStencilThenCoverStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glStencilThenCoverStrokePathInstanced", "glStencilThenCoverStrokePathInstancedNV", nullptr, nullptr, &pglStencilThenCoverStrokePathInstanced, numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);}
extern "C" void APIENTRY glStencilThenCoverStrokePathInstanced(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {return (*pglStencilThenCoverStrokePathInstanced)(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);}
static void wrap_glStopInstruments(GLint marker);
static void (APIENTRYP pglStopInstruments)(GLint marker) = wrap_glStopInstruments;
static void wrap_glStopInstruments(GLint marker) {return trampoline<void>("glStopInstruments", "glStopInstrumentsSGIX", nullptr, nullptr, &pglStopInstruments, marker);}
extern "C" void APIENTRY glStopInstruments(GLint marker) {return (*pglStopInstruments)(marker);}
static void wrap_glStringMarker(GLsizei len, const void *string);
static void (APIENTRYP pglStringMarker)(GLsizei len, const void *string) = wrap_glStringMarker;
static void wrap_glStringMarker(GLsizei len, const void *string) {return trampoline<void>("glStringMarker", "glStringMarkerGREMEDY", nullptr, nullptr, &pglStringMarker, len, string);}
extern "C" void APIENTRY glStringMarker(GLsizei len, const void *string) {return (*pglStringMarker)(len, string);}
static void wrap_glSubpixelPrecisionBias(GLuint xbits, GLuint ybits);
static void (APIENTRYP pglSubpixelPrecisionBias)(GLuint xbits, GLuint ybits) = wrap_glSubpixelPrecisionBias;
static void wrap_glSubpixelPrecisionBias(GLuint xbits, GLuint ybits) {return trampoline<void>("glSubpixelPrecisionBias", "glSubpixelPrecisionBiasNV", nullptr, nullptr, &pglSubpixelPrecisionBias, xbits, ybits);}
extern "C" void APIENTRY glSubpixelPrecisionBias(GLuint xbits, GLuint ybits) {return (*pglSubpixelPrecisionBias)(xbits, ybits);}
static void wrap_glSwizzle(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
static void (APIENTRYP pglSwizzle)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) = wrap_glSwizzle;
static void wrap_glSwizzle(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {return trampoline<void>("glSwizzle", "glSwizzleEXT", nullptr, nullptr, &pglSwizzle, res, in, outX, outY, outZ, outW);}
extern "C" void APIENTRY glSwizzle(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {return (*pglSwizzle)(res, in, outX, outY, outZ, outW);}
static void wrap_glSyncTexture(GLuint texture);
static void (APIENTRYP pglSyncTexture)(GLuint texture) = wrap_glSyncTexture;
static void wrap_glSyncTexture(GLuint texture) {return trampoline<void>("glSyncTexture", "glSyncTextureINTEL", nullptr, nullptr, &pglSyncTexture, texture);}
extern "C" void APIENTRY glSyncTexture(GLuint texture) {return (*pglSyncTexture)(texture);}
static void wrap_glTagSampleBuffer(void);
static void (APIENTRYP pglTagSampleBuffer)(void) = wrap_glTagSampleBuffer;
static void wrap_glTagSampleBuffer(void) {return trampoline<void>("glTagSampleBuffer", "glTagSampleBufferSGIX", nullptr, nullptr, &pglTagSampleBuffer);}
extern "C" void APIENTRY glTagSampleBuffer(void) {return (*pglTagSampleBuffer)();}
static void wrap_glTangent3b(GLbyte tx, GLbyte ty, GLbyte tz);
static void (APIENTRYP pglTangent3b)(GLbyte tx, GLbyte ty, GLbyte tz) = wrap_glTangent3b;
static void wrap_glTangent3b(GLbyte tx, GLbyte ty, GLbyte tz) {return trampoline<void>("glTangent3b", "glTangent3bEXT", nullptr, nullptr, &pglTangent3b, tx, ty, tz);}
extern "C" void APIENTRY glTangent3b(GLbyte tx, GLbyte ty, GLbyte tz) {return (*pglTangent3b)(tx, ty, tz);}
static void wrap_glTangent3bv(const GLbyte *v);
static void (APIENTRYP pglTangent3bv)(const GLbyte *v) = wrap_glTangent3bv;
static void wrap_glTangent3bv(const GLbyte *v) {return trampoline<void>("glTangent3bv", "glTangent3bvEXT", nullptr, nullptr, &pglTangent3bv, v);}
extern "C" void APIENTRY glTangent3bv(const GLbyte *v) {return (*pglTangent3bv)(v);}
static void wrap_glTangent3d(GLdouble tx, GLdouble ty, GLdouble tz);
static void (APIENTRYP pglTangent3d)(GLdouble tx, GLdouble ty, GLdouble tz) = wrap_glTangent3d;
static void wrap_glTangent3d(GLdouble tx, GLdouble ty, GLdouble tz) {return trampoline<void>("glTangent3d", "glTangent3dEXT", nullptr, nullptr, &pglTangent3d, tx, ty, tz);}
extern "C" void APIENTRY glTangent3d(GLdouble tx, GLdouble ty, GLdouble tz) {return (*pglTangent3d)(tx, ty, tz);}
static void wrap_glTangent3dv(const GLdouble *v);
static void (APIENTRYP pglTangent3dv)(const GLdouble *v) = wrap_glTangent3dv;
static void wrap_glTangent3dv(const GLdouble *v) {return trampoline<void>("glTangent3dv", "glTangent3dvEXT", nullptr, nullptr, &pglTangent3dv, v);}
extern "C" void APIENTRY glTangent3dv(const GLdouble *v) {return (*pglTangent3dv)(v);}
static void wrap_glTangent3f(GLfloat tx, GLfloat ty, GLfloat tz);
static void (APIENTRYP pglTangent3f)(GLfloat tx, GLfloat ty, GLfloat tz) = wrap_glTangent3f;
static void wrap_glTangent3f(GLfloat tx, GLfloat ty, GLfloat tz) {return trampoline<void>("glTangent3f", "glTangent3fEXT", nullptr, nullptr, &pglTangent3f, tx, ty, tz);}
extern "C" void APIENTRY glTangent3f(GLfloat tx, GLfloat ty, GLfloat tz) {return (*pglTangent3f)(tx, ty, tz);}
static void wrap_glTangent3fv(const GLfloat *v);
static void (APIENTRYP pglTangent3fv)(const GLfloat *v) = wrap_glTangent3fv;
static void wrap_glTangent3fv(const GLfloat *v) {return trampoline<void>("glTangent3fv", "glTangent3fvEXT", nullptr, nullptr, &pglTangent3fv, v);}
extern "C" void APIENTRY glTangent3fv(const GLfloat *v) {return (*pglTangent3fv)(v);}
static void wrap_glTangent3i(GLint tx, GLint ty, GLint tz);
static void (APIENTRYP pglTangent3i)(GLint tx, GLint ty, GLint tz) = wrap_glTangent3i;
static void wrap_glTangent3i(GLint tx, GLint ty, GLint tz) {return trampoline<void>("glTangent3i", "glTangent3iEXT", nullptr, nullptr, &pglTangent3i, tx, ty, tz);}
extern "C" void APIENTRY glTangent3i(GLint tx, GLint ty, GLint tz) {return (*pglTangent3i)(tx, ty, tz);}
static void wrap_glTangent3iv(const GLint *v);
static void (APIENTRYP pglTangent3iv)(const GLint *v) = wrap_glTangent3iv;
static void wrap_glTangent3iv(const GLint *v) {return trampoline<void>("glTangent3iv", "glTangent3ivEXT", nullptr, nullptr, &pglTangent3iv, v);}
extern "C" void APIENTRY glTangent3iv(const GLint *v) {return (*pglTangent3iv)(v);}
static void wrap_glTangent3s(GLshort tx, GLshort ty, GLshort tz);
static void (APIENTRYP pglTangent3s)(GLshort tx, GLshort ty, GLshort tz) = wrap_glTangent3s;
static void wrap_glTangent3s(GLshort tx, GLshort ty, GLshort tz) {return trampoline<void>("glTangent3s", "glTangent3sEXT", nullptr, nullptr, &pglTangent3s, tx, ty, tz);}
extern "C" void APIENTRY glTangent3s(GLshort tx, GLshort ty, GLshort tz) {return (*pglTangent3s)(tx, ty, tz);}
static void wrap_glTangent3sv(const GLshort *v);
static void (APIENTRYP pglTangent3sv)(const GLshort *v) = wrap_glTangent3sv;
static void wrap_glTangent3sv(const GLshort *v) {return trampoline<void>("glTangent3sv", "glTangent3svEXT", nullptr, nullptr, &pglTangent3sv, v);}
extern "C" void APIENTRY glTangent3sv(const GLshort *v) {return (*pglTangent3sv)(v);}
static void wrap_glTangentPointer(GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglTangentPointer)(GLenum type, GLsizei stride, const void *pointer) = wrap_glTangentPointer;
static void wrap_glTangentPointer(GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glTangentPointer", "glTangentPointerEXT", nullptr, nullptr, &pglTangentPointer, type, stride, pointer);}
extern "C" void APIENTRY glTangentPointer(GLenum type, GLsizei stride, const void *pointer) {return (*pglTangentPointer)(type, stride, pointer);}
static void wrap_glTbufferMask(GLuint mask);
static void (APIENTRYP pglTbufferMask)(GLuint mask) = wrap_glTbufferMask;
static void wrap_glTbufferMask(GLuint mask) {return trampoline<void>("glTbufferMask", "glTbufferMask3DFX", nullptr, nullptr, &pglTbufferMask, mask);}
extern "C" void APIENTRY glTbufferMask(GLuint mask) {return (*pglTbufferMask)(mask);}
static void wrap_glTessellationFactor(GLfloat factor);
static void (APIENTRYP pglTessellationFactor)(GLfloat factor) = wrap_glTessellationFactor;
static void wrap_glTessellationFactor(GLfloat factor) {return trampoline<void>("glTessellationFactor", "glTessellationFactorAMD", nullptr, nullptr, &pglTessellationFactor, factor);}
extern "C" void APIENTRY glTessellationFactor(GLfloat factor) {return (*pglTessellationFactor)(factor);}
static void wrap_glTessellationMode(GLenum mode);
static void (APIENTRYP pglTessellationMode)(GLenum mode) = wrap_glTessellationMode;
static void wrap_glTessellationMode(GLenum mode) {return trampoline<void>("glTessellationMode", "glTessellationModeAMD", nullptr, nullptr, &pglTessellationMode, mode);}
extern "C" void APIENTRY glTessellationMode(GLenum mode) {return (*pglTessellationMode)(mode);}
static GLboolean wrap_glTestFence(GLuint fence);
static GLboolean (APIENTRYP pglTestFence)(GLuint fence) = wrap_glTestFence;
static GLboolean wrap_glTestFence(GLuint fence) {return trampoline<GLboolean>("glTestFence", "glTestFenceAPPLE", "glTestFenceNV", nullptr, &pglTestFence, fence);}
extern "C" GLboolean APIENTRY glTestFence(GLuint fence) {return (*pglTestFence)(fence);}
static GLboolean wrap_glTestObject(GLenum object, GLuint name);
static GLboolean (APIENTRYP pglTestObject)(GLenum object, GLuint name) = wrap_glTestObject;
static GLboolean wrap_glTestObject(GLenum object, GLuint name) {return trampoline<GLboolean>("glTestObject", "glTestObjectAPPLE", nullptr, nullptr, &pglTestObject, object, name);}
extern "C" GLboolean APIENTRY glTestObject(GLenum object, GLuint name) {return (*pglTestObject)(object, name);}
static void wrap_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
static void (APIENTRYP pglTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer) = wrap_glTexBuffer;
static void wrap_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {return trampoline<void>("glTexBuffer", "glTexBufferARB", "glTexBufferEXT", nullptr, &pglTexBuffer, target, internalformat, buffer);}
extern "C" void APIENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {return (*pglTexBuffer)(target, internalformat, buffer);}
static void wrap_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
static void (APIENTRYP pglTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = wrap_glTexBufferRange;
static void wrap_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {return trampoline<void>("glTexBufferRange", nullptr, nullptr, nullptr, &pglTexBufferRange, target, internalformat, buffer, offset, size);}
extern "C" void APIENTRY glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {return (*pglTexBufferRange)(target, internalformat, buffer, offset, size);}
static void wrap_glTexBumpParameterfv(GLenum pname, const GLfloat *param);
static void (APIENTRYP pglTexBumpParameterfv)(GLenum pname, const GLfloat *param) = wrap_glTexBumpParameterfv;
static void wrap_glTexBumpParameterfv(GLenum pname, const GLfloat *param) {return trampoline<void>("glTexBumpParameterfv", "glTexBumpParameterfvATI", nullptr, nullptr, &pglTexBumpParameterfv, pname, param);}
extern "C" void APIENTRY glTexBumpParameterfv(GLenum pname, const GLfloat *param) {return (*pglTexBumpParameterfv)(pname, param);}
static void wrap_glTexBumpParameteriv(GLenum pname, const GLint *param);
static void (APIENTRYP pglTexBumpParameteriv)(GLenum pname, const GLint *param) = wrap_glTexBumpParameteriv;
static void wrap_glTexBumpParameteriv(GLenum pname, const GLint *param) {return trampoline<void>("glTexBumpParameteriv", "glTexBumpParameterivATI", nullptr, nullptr, &pglTexBumpParameteriv, pname, param);}
extern "C" void APIENTRY glTexBumpParameteriv(GLenum pname, const GLint *param) {return (*pglTexBumpParameteriv)(pname, param);}
static void wrap_glTexCoord1b(GLbyte s);
static void (APIENTRYP pglTexCoord1b)(GLbyte s) = wrap_glTexCoord1b;
static void wrap_glTexCoord1b(GLbyte s) {return trampoline<void>("glTexCoord1b", "glTexCoord1bOES", nullptr, nullptr, &pglTexCoord1b, s);}
extern "C" void APIENTRY glTexCoord1b(GLbyte s) {return (*pglTexCoord1b)(s);}
static void wrap_glTexCoord1bv(const GLbyte *coords);
static void (APIENTRYP pglTexCoord1bv)(const GLbyte *coords) = wrap_glTexCoord1bv;
static void wrap_glTexCoord1bv(const GLbyte *coords) {return trampoline<void>("glTexCoord1bv", "glTexCoord1bvOES", nullptr, nullptr, &pglTexCoord1bv, coords);}
extern "C" void APIENTRY glTexCoord1bv(const GLbyte *coords) {return (*pglTexCoord1bv)(coords);}
static void wrap_glTexCoord1d(GLdouble s);
static void (APIENTRYP pglTexCoord1d)(GLdouble s) = wrap_glTexCoord1d;
static void wrap_glTexCoord1d(GLdouble s) {return trampoline<void>("glTexCoord1d", nullptr, nullptr, nullptr, &pglTexCoord1d, s);}
extern "C" void APIENTRY glTexCoord1d(GLdouble s) {return (*pglTexCoord1d)(s);}
static void wrap_glTexCoord1dv(const GLdouble *v);
static void (APIENTRYP pglTexCoord1dv)(const GLdouble *v) = wrap_glTexCoord1dv;
static void wrap_glTexCoord1dv(const GLdouble *v) {return trampoline<void>("glTexCoord1dv", nullptr, nullptr, nullptr, &pglTexCoord1dv, v);}
extern "C" void APIENTRY glTexCoord1dv(const GLdouble *v) {return (*pglTexCoord1dv)(v);}
static void wrap_glTexCoord1f(GLfloat s);
static void (APIENTRYP pglTexCoord1f)(GLfloat s) = wrap_glTexCoord1f;
static void wrap_glTexCoord1f(GLfloat s) {return trampoline<void>("glTexCoord1f", nullptr, nullptr, nullptr, &pglTexCoord1f, s);}
extern "C" void APIENTRY glTexCoord1f(GLfloat s) {return (*pglTexCoord1f)(s);}
static void wrap_glTexCoord1fv(const GLfloat *v);
static void (APIENTRYP pglTexCoord1fv)(const GLfloat *v) = wrap_glTexCoord1fv;
static void wrap_glTexCoord1fv(const GLfloat *v) {return trampoline<void>("glTexCoord1fv", nullptr, nullptr, nullptr, &pglTexCoord1fv, v);}
extern "C" void APIENTRY glTexCoord1fv(const GLfloat *v) {return (*pglTexCoord1fv)(v);}
static void wrap_glTexCoord1h(GLhalfNV s);
static void (APIENTRYP pglTexCoord1h)(GLhalfNV s) = wrap_glTexCoord1h;
static void wrap_glTexCoord1h(GLhalfNV s) {return trampoline<void>("glTexCoord1h", "glTexCoord1hNV", nullptr, nullptr, &pglTexCoord1h, s);}
extern "C" void APIENTRY glTexCoord1h(GLhalfNV s) {return (*pglTexCoord1h)(s);}
static void wrap_glTexCoord1hv(const GLhalfNV *v);
static void (APIENTRYP pglTexCoord1hv)(const GLhalfNV *v) = wrap_glTexCoord1hv;
static void wrap_glTexCoord1hv(const GLhalfNV *v) {return trampoline<void>("glTexCoord1hv", "glTexCoord1hvNV", nullptr, nullptr, &pglTexCoord1hv, v);}
extern "C" void APIENTRY glTexCoord1hv(const GLhalfNV *v) {return (*pglTexCoord1hv)(v);}
static void wrap_glTexCoord1i(GLint s);
static void (APIENTRYP pglTexCoord1i)(GLint s) = wrap_glTexCoord1i;
static void wrap_glTexCoord1i(GLint s) {return trampoline<void>("glTexCoord1i", nullptr, nullptr, nullptr, &pglTexCoord1i, s);}
extern "C" void APIENTRY glTexCoord1i(GLint s) {return (*pglTexCoord1i)(s);}
static void wrap_glTexCoord1iv(const GLint *v);
static void (APIENTRYP pglTexCoord1iv)(const GLint *v) = wrap_glTexCoord1iv;
static void wrap_glTexCoord1iv(const GLint *v) {return trampoline<void>("glTexCoord1iv", nullptr, nullptr, nullptr, &pglTexCoord1iv, v);}
extern "C" void APIENTRY glTexCoord1iv(const GLint *v) {return (*pglTexCoord1iv)(v);}
static void wrap_glTexCoord1s(GLshort s);
static void (APIENTRYP pglTexCoord1s)(GLshort s) = wrap_glTexCoord1s;
static void wrap_glTexCoord1s(GLshort s) {return trampoline<void>("glTexCoord1s", nullptr, nullptr, nullptr, &pglTexCoord1s, s);}
extern "C" void APIENTRY glTexCoord1s(GLshort s) {return (*pglTexCoord1s)(s);}
static void wrap_glTexCoord1sv(const GLshort *v);
static void (APIENTRYP pglTexCoord1sv)(const GLshort *v) = wrap_glTexCoord1sv;
static void wrap_glTexCoord1sv(const GLshort *v) {return trampoline<void>("glTexCoord1sv", nullptr, nullptr, nullptr, &pglTexCoord1sv, v);}
extern "C" void APIENTRY glTexCoord1sv(const GLshort *v) {return (*pglTexCoord1sv)(v);}
static void wrap_glTexCoord1x(GLfixed s);
static void (APIENTRYP pglTexCoord1x)(GLfixed s) = wrap_glTexCoord1x;
static void wrap_glTexCoord1x(GLfixed s) {return trampoline<void>("glTexCoord1x", "glTexCoord1xOES", nullptr, nullptr, &pglTexCoord1x, s);}
extern "C" void APIENTRY glTexCoord1x(GLfixed s) {return (*pglTexCoord1x)(s);}
static void wrap_glTexCoord1xv(const GLfixed *coords);
static void (APIENTRYP pglTexCoord1xv)(const GLfixed *coords) = wrap_glTexCoord1xv;
static void wrap_glTexCoord1xv(const GLfixed *coords) {return trampoline<void>("glTexCoord1xv", "glTexCoord1xvOES", nullptr, nullptr, &pglTexCoord1xv, coords);}
extern "C" void APIENTRY glTexCoord1xv(const GLfixed *coords) {return (*pglTexCoord1xv)(coords);}
static void wrap_glTexCoord2b(GLbyte s, GLbyte t);
static void (APIENTRYP pglTexCoord2b)(GLbyte s, GLbyte t) = wrap_glTexCoord2b;
static void wrap_glTexCoord2b(GLbyte s, GLbyte t) {return trampoline<void>("glTexCoord2b", "glTexCoord2bOES", nullptr, nullptr, &pglTexCoord2b, s, t);}
extern "C" void APIENTRY glTexCoord2b(GLbyte s, GLbyte t) {return (*pglTexCoord2b)(s, t);}
static void wrap_glTexCoord2bv(const GLbyte *coords);
static void (APIENTRYP pglTexCoord2bv)(const GLbyte *coords) = wrap_glTexCoord2bv;
static void wrap_glTexCoord2bv(const GLbyte *coords) {return trampoline<void>("glTexCoord2bv", "glTexCoord2bvOES", nullptr, nullptr, &pglTexCoord2bv, coords);}
extern "C" void APIENTRY glTexCoord2bv(const GLbyte *coords) {return (*pglTexCoord2bv)(coords);}
static void wrap_glTexCoord2d(GLdouble s, GLdouble t);
static void (APIENTRYP pglTexCoord2d)(GLdouble s, GLdouble t) = wrap_glTexCoord2d;
static void wrap_glTexCoord2d(GLdouble s, GLdouble t) {return trampoline<void>("glTexCoord2d", nullptr, nullptr, nullptr, &pglTexCoord2d, s, t);}
extern "C" void APIENTRY glTexCoord2d(GLdouble s, GLdouble t) {return (*pglTexCoord2d)(s, t);}
static void wrap_glTexCoord2dv(const GLdouble *v);
static void (APIENTRYP pglTexCoord2dv)(const GLdouble *v) = wrap_glTexCoord2dv;
static void wrap_glTexCoord2dv(const GLdouble *v) {return trampoline<void>("glTexCoord2dv", nullptr, nullptr, nullptr, &pglTexCoord2dv, v);}
extern "C" void APIENTRY glTexCoord2dv(const GLdouble *v) {return (*pglTexCoord2dv)(v);}
static void wrap_glTexCoord2f(GLfloat s, GLfloat t);
static void (APIENTRYP pglTexCoord2f)(GLfloat s, GLfloat t) = wrap_glTexCoord2f;
static void wrap_glTexCoord2f(GLfloat s, GLfloat t) {return trampoline<void>("glTexCoord2f", nullptr, nullptr, nullptr, &pglTexCoord2f, s, t);}
extern "C" void APIENTRY glTexCoord2f(GLfloat s, GLfloat t) {return (*pglTexCoord2f)(s, t);}
static void wrap_glTexCoord2fColor3fVertex3f(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglTexCoord2fColor3fVertex3f)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) = wrap_glTexCoord2fColor3fVertex3f;
static void wrap_glTexCoord2fColor3fVertex3f(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glTexCoord2fColor3fVertex3f", "glTexCoord2fColor3fVertex3fSUN", nullptr, nullptr, &pglTexCoord2fColor3fVertex3f, s, t, r, g, b, x, y, z);}
extern "C" void APIENTRY glTexCoord2fColor3fVertex3f(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {return (*pglTexCoord2fColor3fVertex3f)(s, t, r, g, b, x, y, z);}
static void wrap_glTexCoord2fColor3fVertex3fv(const GLfloat *tc, const GLfloat *c, const GLfloat *v);
static void (APIENTRYP pglTexCoord2fColor3fVertex3fv)(const GLfloat *tc, const GLfloat *c, const GLfloat *v) = wrap_glTexCoord2fColor3fVertex3fv;
static void wrap_glTexCoord2fColor3fVertex3fv(const GLfloat *tc, const GLfloat *c, const GLfloat *v) {return trampoline<void>("glTexCoord2fColor3fVertex3fv", "glTexCoord2fColor3fVertex3fvSUN", nullptr, nullptr, &pglTexCoord2fColor3fVertex3fv, tc, c, v);}
extern "C" void APIENTRY glTexCoord2fColor3fVertex3fv(const GLfloat *tc, const GLfloat *c, const GLfloat *v) {return (*pglTexCoord2fColor3fVertex3fv)(tc, c, v);}
static void wrap_glTexCoord2fColor4fNormal3fVertex3f(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglTexCoord2fColor4fNormal3fVertex3f)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glTexCoord2fColor4fNormal3fVertex3f;
static void wrap_glTexCoord2fColor4fNormal3fVertex3f(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glTexCoord2fColor4fNormal3fVertex3f", "glTexCoord2fColor4fNormal3fVertex3fSUN", nullptr, nullptr, &pglTexCoord2fColor4fNormal3fVertex3f, s, t, r, g, b, a, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glTexCoord2fColor4fNormal3fVertex3f(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglTexCoord2fColor4fNormal3fVertex3f)(s, t, r, g, b, a, nx, ny, nz, x, y, z);}
static void wrap_glTexCoord2fColor4fNormal3fVertex3fv(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglTexCoord2fColor4fNormal3fVertex3fv)(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) = wrap_glTexCoord2fColor4fNormal3fVertex3fv;
static void wrap_glTexCoord2fColor4fNormal3fVertex3fv(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glTexCoord2fColor4fNormal3fVertex3fv", "glTexCoord2fColor4fNormal3fVertex3fvSUN", nullptr, nullptr, &pglTexCoord2fColor4fNormal3fVertex3fv, tc, c, n, v);}
extern "C" void APIENTRY glTexCoord2fColor4fNormal3fVertex3fv(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return (*pglTexCoord2fColor4fNormal3fVertex3fv)(tc, c, n, v);}
static void wrap_glTexCoord2fColor4ubVertex3f(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglTexCoord2fColor4ubVertex3f)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) = wrap_glTexCoord2fColor4ubVertex3f;
static void wrap_glTexCoord2fColor4ubVertex3f(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glTexCoord2fColor4ubVertex3f", "glTexCoord2fColor4ubVertex3fSUN", nullptr, nullptr, &pglTexCoord2fColor4ubVertex3f, s, t, r, g, b, a, x, y, z);}
extern "C" void APIENTRY glTexCoord2fColor4ubVertex3f(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {return (*pglTexCoord2fColor4ubVertex3f)(s, t, r, g, b, a, x, y, z);}
static void wrap_glTexCoord2fColor4ubVertex3fv(const GLfloat *tc, const GLubyte *c, const GLfloat *v);
static void (APIENTRYP pglTexCoord2fColor4ubVertex3fv)(const GLfloat *tc, const GLubyte *c, const GLfloat *v) = wrap_glTexCoord2fColor4ubVertex3fv;
static void wrap_glTexCoord2fColor4ubVertex3fv(const GLfloat *tc, const GLubyte *c, const GLfloat *v) {return trampoline<void>("glTexCoord2fColor4ubVertex3fv", "glTexCoord2fColor4ubVertex3fvSUN", nullptr, nullptr, &pglTexCoord2fColor4ubVertex3fv, tc, c, v);}
extern "C" void APIENTRY glTexCoord2fColor4ubVertex3fv(const GLfloat *tc, const GLubyte *c, const GLfloat *v) {return (*pglTexCoord2fColor4ubVertex3fv)(tc, c, v);}
static void wrap_glTexCoord2fNormal3fVertex3f(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglTexCoord2fNormal3fVertex3f)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = wrap_glTexCoord2fNormal3fVertex3f;
static void wrap_glTexCoord2fNormal3fVertex3f(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glTexCoord2fNormal3fVertex3f", "glTexCoord2fNormal3fVertex3fSUN", nullptr, nullptr, &pglTexCoord2fNormal3fVertex3f, s, t, nx, ny, nz, x, y, z);}
extern "C" void APIENTRY glTexCoord2fNormal3fVertex3f(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {return (*pglTexCoord2fNormal3fVertex3f)(s, t, nx, ny, nz, x, y, z);}
static void wrap_glTexCoord2fNormal3fVertex3fv(const GLfloat *tc, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglTexCoord2fNormal3fVertex3fv)(const GLfloat *tc, const GLfloat *n, const GLfloat *v) = wrap_glTexCoord2fNormal3fVertex3fv;
static void wrap_glTexCoord2fNormal3fVertex3fv(const GLfloat *tc, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glTexCoord2fNormal3fVertex3fv", "glTexCoord2fNormal3fVertex3fvSUN", nullptr, nullptr, &pglTexCoord2fNormal3fVertex3fv, tc, n, v);}
extern "C" void APIENTRY glTexCoord2fNormal3fVertex3fv(const GLfloat *tc, const GLfloat *n, const GLfloat *v) {return (*pglTexCoord2fNormal3fVertex3fv)(tc, n, v);}
static void wrap_glTexCoord2fVertex3f(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglTexCoord2fVertex3f)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) = wrap_glTexCoord2fVertex3f;
static void wrap_glTexCoord2fVertex3f(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glTexCoord2fVertex3f", "glTexCoord2fVertex3fSUN", nullptr, nullptr, &pglTexCoord2fVertex3f, s, t, x, y, z);}
extern "C" void APIENTRY glTexCoord2fVertex3f(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {return (*pglTexCoord2fVertex3f)(s, t, x, y, z);}
static void wrap_glTexCoord2fVertex3fv(const GLfloat *tc, const GLfloat *v);
static void (APIENTRYP pglTexCoord2fVertex3fv)(const GLfloat *tc, const GLfloat *v) = wrap_glTexCoord2fVertex3fv;
static void wrap_glTexCoord2fVertex3fv(const GLfloat *tc, const GLfloat *v) {return trampoline<void>("glTexCoord2fVertex3fv", "glTexCoord2fVertex3fvSUN", nullptr, nullptr, &pglTexCoord2fVertex3fv, tc, v);}
extern "C" void APIENTRY glTexCoord2fVertex3fv(const GLfloat *tc, const GLfloat *v) {return (*pglTexCoord2fVertex3fv)(tc, v);}
static void wrap_glTexCoord2fv(const GLfloat *v);
static void (APIENTRYP pglTexCoord2fv)(const GLfloat *v) = wrap_glTexCoord2fv;
static void wrap_glTexCoord2fv(const GLfloat *v) {return trampoline<void>("glTexCoord2fv", nullptr, nullptr, nullptr, &pglTexCoord2fv, v);}
extern "C" void APIENTRY glTexCoord2fv(const GLfloat *v) {return (*pglTexCoord2fv)(v);}
static void wrap_glTexCoord2h(GLhalfNV s, GLhalfNV t);
static void (APIENTRYP pglTexCoord2h)(GLhalfNV s, GLhalfNV t) = wrap_glTexCoord2h;
static void wrap_glTexCoord2h(GLhalfNV s, GLhalfNV t) {return trampoline<void>("glTexCoord2h", "glTexCoord2hNV", nullptr, nullptr, &pglTexCoord2h, s, t);}
extern "C" void APIENTRY glTexCoord2h(GLhalfNV s, GLhalfNV t) {return (*pglTexCoord2h)(s, t);}
static void wrap_glTexCoord2hv(const GLhalfNV *v);
static void (APIENTRYP pglTexCoord2hv)(const GLhalfNV *v) = wrap_glTexCoord2hv;
static void wrap_glTexCoord2hv(const GLhalfNV *v) {return trampoline<void>("glTexCoord2hv", "glTexCoord2hvNV", nullptr, nullptr, &pglTexCoord2hv, v);}
extern "C" void APIENTRY glTexCoord2hv(const GLhalfNV *v) {return (*pglTexCoord2hv)(v);}
static void wrap_glTexCoord2i(GLint s, GLint t);
static void (APIENTRYP pglTexCoord2i)(GLint s, GLint t) = wrap_glTexCoord2i;
static void wrap_glTexCoord2i(GLint s, GLint t) {return trampoline<void>("glTexCoord2i", nullptr, nullptr, nullptr, &pglTexCoord2i, s, t);}
extern "C" void APIENTRY glTexCoord2i(GLint s, GLint t) {return (*pglTexCoord2i)(s, t);}
static void wrap_glTexCoord2iv(const GLint *v);
static void (APIENTRYP pglTexCoord2iv)(const GLint *v) = wrap_glTexCoord2iv;
static void wrap_glTexCoord2iv(const GLint *v) {return trampoline<void>("glTexCoord2iv", nullptr, nullptr, nullptr, &pglTexCoord2iv, v);}
extern "C" void APIENTRY glTexCoord2iv(const GLint *v) {return (*pglTexCoord2iv)(v);}
static void wrap_glTexCoord2s(GLshort s, GLshort t);
static void (APIENTRYP pglTexCoord2s)(GLshort s, GLshort t) = wrap_glTexCoord2s;
static void wrap_glTexCoord2s(GLshort s, GLshort t) {return trampoline<void>("glTexCoord2s", nullptr, nullptr, nullptr, &pglTexCoord2s, s, t);}
extern "C" void APIENTRY glTexCoord2s(GLshort s, GLshort t) {return (*pglTexCoord2s)(s, t);}
static void wrap_glTexCoord2sv(const GLshort *v);
static void (APIENTRYP pglTexCoord2sv)(const GLshort *v) = wrap_glTexCoord2sv;
static void wrap_glTexCoord2sv(const GLshort *v) {return trampoline<void>("glTexCoord2sv", nullptr, nullptr, nullptr, &pglTexCoord2sv, v);}
extern "C" void APIENTRY glTexCoord2sv(const GLshort *v) {return (*pglTexCoord2sv)(v);}
static void wrap_glTexCoord2x(GLfixed s, GLfixed t);
static void (APIENTRYP pglTexCoord2x)(GLfixed s, GLfixed t) = wrap_glTexCoord2x;
static void wrap_glTexCoord2x(GLfixed s, GLfixed t) {return trampoline<void>("glTexCoord2x", "glTexCoord2xOES", nullptr, nullptr, &pglTexCoord2x, s, t);}
extern "C" void APIENTRY glTexCoord2x(GLfixed s, GLfixed t) {return (*pglTexCoord2x)(s, t);}
static void wrap_glTexCoord2xv(const GLfixed *coords);
static void (APIENTRYP pglTexCoord2xv)(const GLfixed *coords) = wrap_glTexCoord2xv;
static void wrap_glTexCoord2xv(const GLfixed *coords) {return trampoline<void>("glTexCoord2xv", "glTexCoord2xvOES", nullptr, nullptr, &pglTexCoord2xv, coords);}
extern "C" void APIENTRY glTexCoord2xv(const GLfixed *coords) {return (*pglTexCoord2xv)(coords);}
static void wrap_glTexCoord3b(GLbyte s, GLbyte t, GLbyte r);
static void (APIENTRYP pglTexCoord3b)(GLbyte s, GLbyte t, GLbyte r) = wrap_glTexCoord3b;
static void wrap_glTexCoord3b(GLbyte s, GLbyte t, GLbyte r) {return trampoline<void>("glTexCoord3b", "glTexCoord3bOES", nullptr, nullptr, &pglTexCoord3b, s, t, r);}
extern "C" void APIENTRY glTexCoord3b(GLbyte s, GLbyte t, GLbyte r) {return (*pglTexCoord3b)(s, t, r);}
static void wrap_glTexCoord3bv(const GLbyte *coords);
static void (APIENTRYP pglTexCoord3bv)(const GLbyte *coords) = wrap_glTexCoord3bv;
static void wrap_glTexCoord3bv(const GLbyte *coords) {return trampoline<void>("glTexCoord3bv", "glTexCoord3bvOES", nullptr, nullptr, &pglTexCoord3bv, coords);}
extern "C" void APIENTRY glTexCoord3bv(const GLbyte *coords) {return (*pglTexCoord3bv)(coords);}
static void wrap_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
static void (APIENTRYP pglTexCoord3d)(GLdouble s, GLdouble t, GLdouble r) = wrap_glTexCoord3d;
static void wrap_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {return trampoline<void>("glTexCoord3d", nullptr, nullptr, nullptr, &pglTexCoord3d, s, t, r);}
extern "C" void APIENTRY glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {return (*pglTexCoord3d)(s, t, r);}
static void wrap_glTexCoord3dv(const GLdouble *v);
static void (APIENTRYP pglTexCoord3dv)(const GLdouble *v) = wrap_glTexCoord3dv;
static void wrap_glTexCoord3dv(const GLdouble *v) {return trampoline<void>("glTexCoord3dv", nullptr, nullptr, nullptr, &pglTexCoord3dv, v);}
extern "C" void APIENTRY glTexCoord3dv(const GLdouble *v) {return (*pglTexCoord3dv)(v);}
static void wrap_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
static void (APIENTRYP pglTexCoord3f)(GLfloat s, GLfloat t, GLfloat r) = wrap_glTexCoord3f;
static void wrap_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {return trampoline<void>("glTexCoord3f", nullptr, nullptr, nullptr, &pglTexCoord3f, s, t, r);}
extern "C" void APIENTRY glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {return (*pglTexCoord3f)(s, t, r);}
static void wrap_glTexCoord3fv(const GLfloat *v);
static void (APIENTRYP pglTexCoord3fv)(const GLfloat *v) = wrap_glTexCoord3fv;
static void wrap_glTexCoord3fv(const GLfloat *v) {return trampoline<void>("glTexCoord3fv", nullptr, nullptr, nullptr, &pglTexCoord3fv, v);}
extern "C" void APIENTRY glTexCoord3fv(const GLfloat *v) {return (*pglTexCoord3fv)(v);}
static void wrap_glTexCoord3h(GLhalfNV s, GLhalfNV t, GLhalfNV r);
static void (APIENTRYP pglTexCoord3h)(GLhalfNV s, GLhalfNV t, GLhalfNV r) = wrap_glTexCoord3h;
static void wrap_glTexCoord3h(GLhalfNV s, GLhalfNV t, GLhalfNV r) {return trampoline<void>("glTexCoord3h", "glTexCoord3hNV", nullptr, nullptr, &pglTexCoord3h, s, t, r);}
extern "C" void APIENTRY glTexCoord3h(GLhalfNV s, GLhalfNV t, GLhalfNV r) {return (*pglTexCoord3h)(s, t, r);}
static void wrap_glTexCoord3hv(const GLhalfNV *v);
static void (APIENTRYP pglTexCoord3hv)(const GLhalfNV *v) = wrap_glTexCoord3hv;
static void wrap_glTexCoord3hv(const GLhalfNV *v) {return trampoline<void>("glTexCoord3hv", "glTexCoord3hvNV", nullptr, nullptr, &pglTexCoord3hv, v);}
extern "C" void APIENTRY glTexCoord3hv(const GLhalfNV *v) {return (*pglTexCoord3hv)(v);}
static void wrap_glTexCoord3i(GLint s, GLint t, GLint r);
static void (APIENTRYP pglTexCoord3i)(GLint s, GLint t, GLint r) = wrap_glTexCoord3i;
static void wrap_glTexCoord3i(GLint s, GLint t, GLint r) {return trampoline<void>("glTexCoord3i", nullptr, nullptr, nullptr, &pglTexCoord3i, s, t, r);}
extern "C" void APIENTRY glTexCoord3i(GLint s, GLint t, GLint r) {return (*pglTexCoord3i)(s, t, r);}
static void wrap_glTexCoord3iv(const GLint *v);
static void (APIENTRYP pglTexCoord3iv)(const GLint *v) = wrap_glTexCoord3iv;
static void wrap_glTexCoord3iv(const GLint *v) {return trampoline<void>("glTexCoord3iv", nullptr, nullptr, nullptr, &pglTexCoord3iv, v);}
extern "C" void APIENTRY glTexCoord3iv(const GLint *v) {return (*pglTexCoord3iv)(v);}
static void wrap_glTexCoord3s(GLshort s, GLshort t, GLshort r);
static void (APIENTRYP pglTexCoord3s)(GLshort s, GLshort t, GLshort r) = wrap_glTexCoord3s;
static void wrap_glTexCoord3s(GLshort s, GLshort t, GLshort r) {return trampoline<void>("glTexCoord3s", nullptr, nullptr, nullptr, &pglTexCoord3s, s, t, r);}
extern "C" void APIENTRY glTexCoord3s(GLshort s, GLshort t, GLshort r) {return (*pglTexCoord3s)(s, t, r);}
static void wrap_glTexCoord3sv(const GLshort *v);
static void (APIENTRYP pglTexCoord3sv)(const GLshort *v) = wrap_glTexCoord3sv;
static void wrap_glTexCoord3sv(const GLshort *v) {return trampoline<void>("glTexCoord3sv", nullptr, nullptr, nullptr, &pglTexCoord3sv, v);}
extern "C" void APIENTRY glTexCoord3sv(const GLshort *v) {return (*pglTexCoord3sv)(v);}
static void wrap_glTexCoord3x(GLfixed s, GLfixed t, GLfixed r);
static void (APIENTRYP pglTexCoord3x)(GLfixed s, GLfixed t, GLfixed r) = wrap_glTexCoord3x;
static void wrap_glTexCoord3x(GLfixed s, GLfixed t, GLfixed r) {return trampoline<void>("glTexCoord3x", "glTexCoord3xOES", nullptr, nullptr, &pglTexCoord3x, s, t, r);}
extern "C" void APIENTRY glTexCoord3x(GLfixed s, GLfixed t, GLfixed r) {return (*pglTexCoord3x)(s, t, r);}
static void wrap_glTexCoord3xv(const GLfixed *coords);
static void (APIENTRYP pglTexCoord3xv)(const GLfixed *coords) = wrap_glTexCoord3xv;
static void wrap_glTexCoord3xv(const GLfixed *coords) {return trampoline<void>("glTexCoord3xv", "glTexCoord3xvOES", nullptr, nullptr, &pglTexCoord3xv, coords);}
extern "C" void APIENTRY glTexCoord3xv(const GLfixed *coords) {return (*pglTexCoord3xv)(coords);}
static void wrap_glTexCoord4b(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
static void (APIENTRYP pglTexCoord4b)(GLbyte s, GLbyte t, GLbyte r, GLbyte q) = wrap_glTexCoord4b;
static void wrap_glTexCoord4b(GLbyte s, GLbyte t, GLbyte r, GLbyte q) {return trampoline<void>("glTexCoord4b", "glTexCoord4bOES", nullptr, nullptr, &pglTexCoord4b, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4b(GLbyte s, GLbyte t, GLbyte r, GLbyte q) {return (*pglTexCoord4b)(s, t, r, q);}
static void wrap_glTexCoord4bv(const GLbyte *coords);
static void (APIENTRYP pglTexCoord4bv)(const GLbyte *coords) = wrap_glTexCoord4bv;
static void wrap_glTexCoord4bv(const GLbyte *coords) {return trampoline<void>("glTexCoord4bv", "glTexCoord4bvOES", nullptr, nullptr, &pglTexCoord4bv, coords);}
extern "C" void APIENTRY glTexCoord4bv(const GLbyte *coords) {return (*pglTexCoord4bv)(coords);}
static void wrap_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
static void (APIENTRYP pglTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q) = wrap_glTexCoord4d;
static void wrap_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {return trampoline<void>("glTexCoord4d", nullptr, nullptr, nullptr, &pglTexCoord4d, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {return (*pglTexCoord4d)(s, t, r, q);}
static void wrap_glTexCoord4dv(const GLdouble *v);
static void (APIENTRYP pglTexCoord4dv)(const GLdouble *v) = wrap_glTexCoord4dv;
static void wrap_glTexCoord4dv(const GLdouble *v) {return trampoline<void>("glTexCoord4dv", nullptr, nullptr, nullptr, &pglTexCoord4dv, v);}
extern "C" void APIENTRY glTexCoord4dv(const GLdouble *v) {return (*pglTexCoord4dv)(v);}
static void wrap_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
static void (APIENTRYP pglTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q) = wrap_glTexCoord4f;
static void wrap_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {return trampoline<void>("glTexCoord4f", nullptr, nullptr, nullptr, &pglTexCoord4f, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {return (*pglTexCoord4f)(s, t, r, q);}
static void wrap_glTexCoord4fColor4fNormal3fVertex4f(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglTexCoord4fColor4fNormal3fVertex4f)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glTexCoord4fColor4fNormal3fVertex4f;
static void wrap_glTexCoord4fColor4fNormal3fVertex4f(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glTexCoord4fColor4fNormal3fVertex4f", "glTexCoord4fColor4fNormal3fVertex4fSUN", nullptr, nullptr, &pglTexCoord4fColor4fNormal3fVertex4f, s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);}
extern "C" void APIENTRY glTexCoord4fColor4fNormal3fVertex4f(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglTexCoord4fColor4fNormal3fVertex4f)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);}
static void wrap_glTexCoord4fColor4fNormal3fVertex4fv(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
static void (APIENTRYP pglTexCoord4fColor4fNormal3fVertex4fv)(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) = wrap_glTexCoord4fColor4fNormal3fVertex4fv;
static void wrap_glTexCoord4fColor4fNormal3fVertex4fv(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return trampoline<void>("glTexCoord4fColor4fNormal3fVertex4fv", "glTexCoord4fColor4fNormal3fVertex4fvSUN", nullptr, nullptr, &pglTexCoord4fColor4fNormal3fVertex4fv, tc, c, n, v);}
extern "C" void APIENTRY glTexCoord4fColor4fNormal3fVertex4fv(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {return (*pglTexCoord4fColor4fNormal3fVertex4fv)(tc, c, n, v);}
static void wrap_glTexCoord4fVertex4f(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglTexCoord4fVertex4f)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glTexCoord4fVertex4f;
static void wrap_glTexCoord4fVertex4f(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glTexCoord4fVertex4f", "glTexCoord4fVertex4fSUN", nullptr, nullptr, &pglTexCoord4fVertex4f, s, t, p, q, x, y, z, w);}
extern "C" void APIENTRY glTexCoord4fVertex4f(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglTexCoord4fVertex4f)(s, t, p, q, x, y, z, w);}
static void wrap_glTexCoord4fVertex4fv(const GLfloat *tc, const GLfloat *v);
static void (APIENTRYP pglTexCoord4fVertex4fv)(const GLfloat *tc, const GLfloat *v) = wrap_glTexCoord4fVertex4fv;
static void wrap_glTexCoord4fVertex4fv(const GLfloat *tc, const GLfloat *v) {return trampoline<void>("glTexCoord4fVertex4fv", "glTexCoord4fVertex4fvSUN", nullptr, nullptr, &pglTexCoord4fVertex4fv, tc, v);}
extern "C" void APIENTRY glTexCoord4fVertex4fv(const GLfloat *tc, const GLfloat *v) {return (*pglTexCoord4fVertex4fv)(tc, v);}
static void wrap_glTexCoord4fv(const GLfloat *v);
static void (APIENTRYP pglTexCoord4fv)(const GLfloat *v) = wrap_glTexCoord4fv;
static void wrap_glTexCoord4fv(const GLfloat *v) {return trampoline<void>("glTexCoord4fv", nullptr, nullptr, nullptr, &pglTexCoord4fv, v);}
extern "C" void APIENTRY glTexCoord4fv(const GLfloat *v) {return (*pglTexCoord4fv)(v);}
static void wrap_glTexCoord4h(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
static void (APIENTRYP pglTexCoord4h)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) = wrap_glTexCoord4h;
static void wrap_glTexCoord4h(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {return trampoline<void>("glTexCoord4h", "glTexCoord4hNV", nullptr, nullptr, &pglTexCoord4h, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4h(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {return (*pglTexCoord4h)(s, t, r, q);}
static void wrap_glTexCoord4hv(const GLhalfNV *v);
static void (APIENTRYP pglTexCoord4hv)(const GLhalfNV *v) = wrap_glTexCoord4hv;
static void wrap_glTexCoord4hv(const GLhalfNV *v) {return trampoline<void>("glTexCoord4hv", "glTexCoord4hvNV", nullptr, nullptr, &pglTexCoord4hv, v);}
extern "C" void APIENTRY glTexCoord4hv(const GLhalfNV *v) {return (*pglTexCoord4hv)(v);}
static void wrap_glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
static void (APIENTRYP pglTexCoord4i)(GLint s, GLint t, GLint r, GLint q) = wrap_glTexCoord4i;
static void wrap_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {return trampoline<void>("glTexCoord4i", nullptr, nullptr, nullptr, &pglTexCoord4i, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {return (*pglTexCoord4i)(s, t, r, q);}
static void wrap_glTexCoord4iv(const GLint *v);
static void (APIENTRYP pglTexCoord4iv)(const GLint *v) = wrap_glTexCoord4iv;
static void wrap_glTexCoord4iv(const GLint *v) {return trampoline<void>("glTexCoord4iv", nullptr, nullptr, nullptr, &pglTexCoord4iv, v);}
extern "C" void APIENTRY glTexCoord4iv(const GLint *v) {return (*pglTexCoord4iv)(v);}
static void wrap_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
static void (APIENTRYP pglTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q) = wrap_glTexCoord4s;
static void wrap_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {return trampoline<void>("glTexCoord4s", nullptr, nullptr, nullptr, &pglTexCoord4s, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {return (*pglTexCoord4s)(s, t, r, q);}
static void wrap_glTexCoord4sv(const GLshort *v);
static void (APIENTRYP pglTexCoord4sv)(const GLshort *v) = wrap_glTexCoord4sv;
static void wrap_glTexCoord4sv(const GLshort *v) {return trampoline<void>("glTexCoord4sv", nullptr, nullptr, nullptr, &pglTexCoord4sv, v);}
extern "C" void APIENTRY glTexCoord4sv(const GLshort *v) {return (*pglTexCoord4sv)(v);}
static void wrap_glTexCoord4x(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
static void (APIENTRYP pglTexCoord4x)(GLfixed s, GLfixed t, GLfixed r, GLfixed q) = wrap_glTexCoord4x;
static void wrap_glTexCoord4x(GLfixed s, GLfixed t, GLfixed r, GLfixed q) {return trampoline<void>("glTexCoord4x", "glTexCoord4xOES", nullptr, nullptr, &pglTexCoord4x, s, t, r, q);}
extern "C" void APIENTRY glTexCoord4x(GLfixed s, GLfixed t, GLfixed r, GLfixed q) {return (*pglTexCoord4x)(s, t, r, q);}
static void wrap_glTexCoord4xv(const GLfixed *coords);
static void (APIENTRYP pglTexCoord4xv)(const GLfixed *coords) = wrap_glTexCoord4xv;
static void wrap_glTexCoord4xv(const GLfixed *coords) {return trampoline<void>("glTexCoord4xv", "glTexCoord4xvOES", nullptr, nullptr, &pglTexCoord4xv, coords);}
extern "C" void APIENTRY glTexCoord4xv(const GLfixed *coords) {return (*pglTexCoord4xv)(coords);}
static void wrap_glTexCoordFormat(GLint size, GLenum type, GLsizei stride);
static void (APIENTRYP pglTexCoordFormat)(GLint size, GLenum type, GLsizei stride) = wrap_glTexCoordFormat;
static void wrap_glTexCoordFormat(GLint size, GLenum type, GLsizei stride) {return trampoline<void>("glTexCoordFormat", "glTexCoordFormatNV", nullptr, nullptr, &pglTexCoordFormat, size, type, stride);}
extern "C" void APIENTRY glTexCoordFormat(GLint size, GLenum type, GLsizei stride) {return (*pglTexCoordFormat)(size, type, stride);}
static void wrap_glTexCoordP1ui(GLenum type, GLuint coords);
static void (APIENTRYP pglTexCoordP1ui)(GLenum type, GLuint coords) = wrap_glTexCoordP1ui;
static void wrap_glTexCoordP1ui(GLenum type, GLuint coords) {return trampoline<void>("glTexCoordP1ui", nullptr, nullptr, nullptr, &pglTexCoordP1ui, type, coords);}
extern "C" void APIENTRY glTexCoordP1ui(GLenum type, GLuint coords) {return (*pglTexCoordP1ui)(type, coords);}
static void wrap_glTexCoordP1uiv(GLenum type, const GLuint *coords);
static void (APIENTRYP pglTexCoordP1uiv)(GLenum type, const GLuint *coords) = wrap_glTexCoordP1uiv;
static void wrap_glTexCoordP1uiv(GLenum type, const GLuint *coords) {return trampoline<void>("glTexCoordP1uiv", nullptr, nullptr, nullptr, &pglTexCoordP1uiv, type, coords);}
extern "C" void APIENTRY glTexCoordP1uiv(GLenum type, const GLuint *coords) {return (*pglTexCoordP1uiv)(type, coords);}
static void wrap_glTexCoordP2ui(GLenum type, GLuint coords);
static void (APIENTRYP pglTexCoordP2ui)(GLenum type, GLuint coords) = wrap_glTexCoordP2ui;
static void wrap_glTexCoordP2ui(GLenum type, GLuint coords) {return trampoline<void>("glTexCoordP2ui", nullptr, nullptr, nullptr, &pglTexCoordP2ui, type, coords);}
extern "C" void APIENTRY glTexCoordP2ui(GLenum type, GLuint coords) {return (*pglTexCoordP2ui)(type, coords);}
static void wrap_glTexCoordP2uiv(GLenum type, const GLuint *coords);
static void (APIENTRYP pglTexCoordP2uiv)(GLenum type, const GLuint *coords) = wrap_glTexCoordP2uiv;
static void wrap_glTexCoordP2uiv(GLenum type, const GLuint *coords) {return trampoline<void>("glTexCoordP2uiv", nullptr, nullptr, nullptr, &pglTexCoordP2uiv, type, coords);}
extern "C" void APIENTRY glTexCoordP2uiv(GLenum type, const GLuint *coords) {return (*pglTexCoordP2uiv)(type, coords);}
static void wrap_glTexCoordP3ui(GLenum type, GLuint coords);
static void (APIENTRYP pglTexCoordP3ui)(GLenum type, GLuint coords) = wrap_glTexCoordP3ui;
static void wrap_glTexCoordP3ui(GLenum type, GLuint coords) {return trampoline<void>("glTexCoordP3ui", nullptr, nullptr, nullptr, &pglTexCoordP3ui, type, coords);}
extern "C" void APIENTRY glTexCoordP3ui(GLenum type, GLuint coords) {return (*pglTexCoordP3ui)(type, coords);}
static void wrap_glTexCoordP3uiv(GLenum type, const GLuint *coords);
static void (APIENTRYP pglTexCoordP3uiv)(GLenum type, const GLuint *coords) = wrap_glTexCoordP3uiv;
static void wrap_glTexCoordP3uiv(GLenum type, const GLuint *coords) {return trampoline<void>("glTexCoordP3uiv", nullptr, nullptr, nullptr, &pglTexCoordP3uiv, type, coords);}
extern "C" void APIENTRY glTexCoordP3uiv(GLenum type, const GLuint *coords) {return (*pglTexCoordP3uiv)(type, coords);}
static void wrap_glTexCoordP4ui(GLenum type, GLuint coords);
static void (APIENTRYP pglTexCoordP4ui)(GLenum type, GLuint coords) = wrap_glTexCoordP4ui;
static void wrap_glTexCoordP4ui(GLenum type, GLuint coords) {return trampoline<void>("glTexCoordP4ui", nullptr, nullptr, nullptr, &pglTexCoordP4ui, type, coords);}
extern "C" void APIENTRY glTexCoordP4ui(GLenum type, GLuint coords) {return (*pglTexCoordP4ui)(type, coords);}
static void wrap_glTexCoordP4uiv(GLenum type, const GLuint *coords);
static void (APIENTRYP pglTexCoordP4uiv)(GLenum type, const GLuint *coords) = wrap_glTexCoordP4uiv;
static void wrap_glTexCoordP4uiv(GLenum type, const GLuint *coords) {return trampoline<void>("glTexCoordP4uiv", nullptr, nullptr, nullptr, &pglTexCoordP4uiv, type, coords);}
extern "C" void APIENTRY glTexCoordP4uiv(GLenum type, const GLuint *coords) {return (*pglTexCoordP4uiv)(type, coords);}
static void wrap_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
static void (APIENTRYP pglTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) = wrap_glTexCoordPointer;
static void wrap_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) {return trampoline<void>("glTexCoordPointer", "glTexCoordPointerEXT", nullptr, nullptr, &pglTexCoordPointer, size, type, stride, ptr);}
extern "C" void APIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) {return (*pglTexCoordPointer)(size, type, stride, ptr);}
static void wrap_glTexCoordPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglTexCoordPointerList)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glTexCoordPointerList;
static void wrap_glTexCoordPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glTexCoordPointerList", "glTexCoordPointerListIBM", nullptr, nullptr, &pglTexCoordPointerList, size, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glTexCoordPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglTexCoordPointerList)(size, type, stride, pointer, ptrstride);}
static void wrap_glTexCoordPointerv(GLint size, GLenum type, const void **pointer);
static void (APIENTRYP pglTexCoordPointerv)(GLint size, GLenum type, const void **pointer) = wrap_glTexCoordPointerv;
static void wrap_glTexCoordPointerv(GLint size, GLenum type, const void **pointer) {return trampoline<void>("glTexCoordPointerv", "glTexCoordPointervINTEL", nullptr, nullptr, &pglTexCoordPointerv, size, type, pointer);}
extern "C" void APIENTRY glTexCoordPointerv(GLint size, GLenum type, const void **pointer) {return (*pglTexCoordPointerv)(size, type, pointer);}
static void wrap_glTexEnvf(GLenum target, GLenum pname, GLfloat param);
static void (APIENTRYP pglTexEnvf)(GLenum target, GLenum pname, GLfloat param) = wrap_glTexEnvf;
static void wrap_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {return trampoline<void>("glTexEnvf", nullptr, nullptr, nullptr, &pglTexEnvf, target, pname, param);}
extern "C" void APIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param) {return (*pglTexEnvf)(target, pname, param);}
static void wrap_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglTexEnvfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glTexEnvfv;
static void wrap_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glTexEnvfv", nullptr, nullptr, nullptr, &pglTexEnvfv, target, pname, params);}
extern "C" void APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglTexEnvfv)(target, pname, params);}
static void wrap_glTexEnvi(GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglTexEnvi)(GLenum target, GLenum pname, GLint param) = wrap_glTexEnvi;
static void wrap_glTexEnvi(GLenum target, GLenum pname, GLint param) {return trampoline<void>("glTexEnvi", nullptr, nullptr, nullptr, &pglTexEnvi, target, pname, param);}
extern "C" void APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param) {return (*pglTexEnvi)(target, pname, param);}
static void wrap_glTexEnviv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglTexEnviv)(GLenum target, GLenum pname, const GLint *params) = wrap_glTexEnviv;
static void wrap_glTexEnviv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glTexEnviv", nullptr, nullptr, nullptr, &pglTexEnviv, target, pname, params);}
extern "C" void APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params) {return (*pglTexEnviv)(target, pname, params);}
static void wrap_glTexEnvx(GLenum target, GLenum pname, GLfixed param);
static void (APIENTRYP pglTexEnvx)(GLenum target, GLenum pname, GLfixed param) = wrap_glTexEnvx;
static void wrap_glTexEnvx(GLenum target, GLenum pname, GLfixed param) {return trampoline<void>("glTexEnvx", "glTexEnvxOES", nullptr, nullptr, &pglTexEnvx, target, pname, param);}
extern "C" void APIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param) {return (*pglTexEnvx)(target, pname, param);}
static void wrap_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params);
static void (APIENTRYP pglTexEnvxv)(GLenum target, GLenum pname, const GLfixed *params) = wrap_glTexEnvxv;
static void wrap_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params) {return trampoline<void>("glTexEnvxv", "glTexEnvxvOES", nullptr, nullptr, &pglTexEnvxv, target, pname, params);}
extern "C" void APIENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params) {return (*pglTexEnvxv)(target, pname, params);}
static void wrap_glTexFilterFunc(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
static void (APIENTRYP pglTexFilterFunc)(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) = wrap_glTexFilterFunc;
static void wrap_glTexFilterFunc(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) {return trampoline<void>("glTexFilterFunc", "glTexFilterFuncSGIS", nullptr, nullptr, &pglTexFilterFunc, target, filter, n, weights);}
extern "C" void APIENTRY glTexFilterFunc(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) {return (*pglTexFilterFunc)(target, filter, n, weights);}
static void wrap_glTexGend(GLenum coord, GLenum pname, GLdouble param);
static void (APIENTRYP pglTexGend)(GLenum coord, GLenum pname, GLdouble param) = wrap_glTexGend;
static void wrap_glTexGend(GLenum coord, GLenum pname, GLdouble param) {return trampoline<void>("glTexGend", nullptr, nullptr, nullptr, &pglTexGend, coord, pname, param);}
extern "C" void APIENTRY glTexGend(GLenum coord, GLenum pname, GLdouble param) {return (*pglTexGend)(coord, pname, param);}
static void wrap_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params);
static void (APIENTRYP pglTexGendv)(GLenum coord, GLenum pname, const GLdouble *params) = wrap_glTexGendv;
static void wrap_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {return trampoline<void>("glTexGendv", nullptr, nullptr, nullptr, &pglTexGendv, coord, pname, params);}
extern "C" void APIENTRY glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {return (*pglTexGendv)(coord, pname, params);}
static void wrap_glTexGenf(GLenum coord, GLenum pname, GLfloat param);
static void (APIENTRYP pglTexGenf)(GLenum coord, GLenum pname, GLfloat param) = wrap_glTexGenf;
static void wrap_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {return trampoline<void>("glTexGenf", nullptr, nullptr, nullptr, &pglTexGenf, coord, pname, param);}
extern "C" void APIENTRY glTexGenf(GLenum coord, GLenum pname, GLfloat param) {return (*pglTexGenf)(coord, pname, param);}
static void wrap_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglTexGenfv)(GLenum coord, GLenum pname, const GLfloat *params) = wrap_glTexGenfv;
static void wrap_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {return trampoline<void>("glTexGenfv", nullptr, nullptr, nullptr, &pglTexGenfv, coord, pname, params);}
extern "C" void APIENTRY glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {return (*pglTexGenfv)(coord, pname, params);}
static void wrap_glTexGeni(GLenum coord, GLenum pname, GLint param);
static void (APIENTRYP pglTexGeni)(GLenum coord, GLenum pname, GLint param) = wrap_glTexGeni;
static void wrap_glTexGeni(GLenum coord, GLenum pname, GLint param) {return trampoline<void>("glTexGeni", nullptr, nullptr, nullptr, &pglTexGeni, coord, pname, param);}
extern "C" void APIENTRY glTexGeni(GLenum coord, GLenum pname, GLint param) {return (*pglTexGeni)(coord, pname, param);}
static void wrap_glTexGeniv(GLenum coord, GLenum pname, const GLint *params);
static void (APIENTRYP pglTexGeniv)(GLenum coord, GLenum pname, const GLint *params) = wrap_glTexGeniv;
static void wrap_glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {return trampoline<void>("glTexGeniv", nullptr, nullptr, nullptr, &pglTexGeniv, coord, pname, params);}
extern "C" void APIENTRY glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {return (*pglTexGeniv)(coord, pname, params);}
static void wrap_glTexGenx(GLenum coord, GLenum pname, GLfixed param);
static void (APIENTRYP pglTexGenx)(GLenum coord, GLenum pname, GLfixed param) = wrap_glTexGenx;
static void wrap_glTexGenx(GLenum coord, GLenum pname, GLfixed param) {return trampoline<void>("glTexGenx", "glTexGenxOES", nullptr, nullptr, &pglTexGenx, coord, pname, param);}
extern "C" void APIENTRY glTexGenx(GLenum coord, GLenum pname, GLfixed param) {return (*pglTexGenx)(coord, pname, param);}
static void wrap_glTexGenxv(GLenum coord, GLenum pname, const GLfixed *params);
static void (APIENTRYP pglTexGenxv)(GLenum coord, GLenum pname, const GLfixed *params) = wrap_glTexGenxv;
static void wrap_glTexGenxv(GLenum coord, GLenum pname, const GLfixed *params) {return trampoline<void>("glTexGenxv", "glTexGenxvOES", nullptr, nullptr, &pglTexGenxv, coord, pname, params);}
extern "C" void APIENTRY glTexGenxv(GLenum coord, GLenum pname, const GLfixed *params) {return (*pglTexGenxv)(coord, pname, params);}
static void wrap_glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglTexImage1D)(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glTexImage1D;
static void wrap_glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glTexImage1D", nullptr, nullptr, nullptr, &pglTexImage1D, target, level, internalFormat, width, border, format, type, pixels);}
extern "C" void APIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglTexImage1D)(target, level, internalFormat, width, border, format, type, pixels);}
static void wrap_glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglTexImage2D)(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glTexImage2D;
static void wrap_glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glTexImage2D", nullptr, nullptr, nullptr, &pglTexImage2D, target, level, internalFormat, width, height, border, format, type, pixels);}
extern "C" void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglTexImage2D)(target, level, internalFormat, width, height, border, format, type, pixels);}
static void wrap_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
static void (APIENTRYP pglTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = wrap_glTexImage2DMultisample;
static void wrap_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {return trampoline<void>("glTexImage2DMultisample", nullptr, nullptr, nullptr, &pglTexImage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);}
extern "C" void APIENTRY glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {return (*pglTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);}
static void wrap_glTexImage2DMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
static void (APIENTRYP pglTexImage2DMultisampleCoverage)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) = wrap_glTexImage2DMultisampleCoverage;
static void wrap_glTexImage2DMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {return trampoline<void>("glTexImage2DMultisampleCoverage", "glTexImage2DMultisampleCoverageNV", nullptr, nullptr, &pglTexImage2DMultisampleCoverage, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);}
extern "C" void APIENTRY glTexImage2DMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {return (*pglTexImage2DMultisampleCoverage)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);}
static void wrap_glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglTexImage3D)(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glTexImage3D;
static void wrap_glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glTexImage3D", "glTexImage3DEXT", nullptr, nullptr, &pglTexImage3D, target, level, internalFormat, width, height, depth, border, format, type, pixels);}
extern "C" void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglTexImage3D)(target, level, internalFormat, width, height, depth, border, format, type, pixels);}
static void wrap_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
static void (APIENTRYP pglTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = wrap_glTexImage3DMultisample;
static void wrap_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {return trampoline<void>("glTexImage3DMultisample", nullptr, nullptr, nullptr, &pglTexImage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);}
extern "C" void APIENTRY glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {return (*pglTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);}
static void wrap_glTexImage3DMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
static void (APIENTRYP pglTexImage3DMultisampleCoverage)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) = wrap_glTexImage3DMultisampleCoverage;
static void wrap_glTexImage3DMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {return trampoline<void>("glTexImage3DMultisampleCoverage", "glTexImage3DMultisampleCoverageNV", nullptr, nullptr, &pglTexImage3DMultisampleCoverage, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);}
extern "C" void APIENTRY glTexImage3DMultisampleCoverage(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {return (*pglTexImage3DMultisampleCoverage)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);}
static void wrap_glTexImage4D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTexImage4D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glTexImage4D;
static void wrap_glTexImage4D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTexImage4D", "glTexImage4DSGIS", nullptr, nullptr, &pglTexImage4D, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);}
extern "C" void APIENTRY glTexImage4D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglTexImage4D)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);}
static void wrap_glTexPageCommitment(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
static void (APIENTRYP pglTexPageCommitment)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) = wrap_glTexPageCommitment;
static void wrap_glTexPageCommitment(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {return trampoline<void>("glTexPageCommitment", "glTexPageCommitmentARB", nullptr, nullptr, &pglTexPageCommitment, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);}
extern "C" void APIENTRY glTexPageCommitment(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {return (*pglTexPageCommitment)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);}
static void wrap_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglTexParameterIiv)(GLenum target, GLenum pname, const GLint *params) = wrap_glTexParameterIiv;
static void wrap_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glTexParameterIiv", "glTexParameterIivEXT", nullptr, nullptr, &pglTexParameterIiv, target, pname, params);}
extern "C" void APIENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {return (*pglTexParameterIiv)(target, pname, params);}
static void wrap_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
static void (APIENTRYP pglTexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params) = wrap_glTexParameterIuiv;
static void wrap_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {return trampoline<void>("glTexParameterIuiv", "glTexParameterIuivEXT", nullptr, nullptr, &pglTexParameterIuiv, target, pname, params);}
extern "C" void APIENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {return (*pglTexParameterIuiv)(target, pname, params);}
static void wrap_glTexParameterf(GLenum target, GLenum pname, GLfloat param);
static void (APIENTRYP pglTexParameterf)(GLenum target, GLenum pname, GLfloat param) = wrap_glTexParameterf;
static void wrap_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {return trampoline<void>("glTexParameterf", nullptr, nullptr, nullptr, &pglTexParameterf, target, pname, param);}
extern "C" void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param) {return (*pglTexParameterf)(target, pname, param);}
static void wrap_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglTexParameterfv)(GLenum target, GLenum pname, const GLfloat *params) = wrap_glTexParameterfv;
static void wrap_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return trampoline<void>("glTexParameterfv", nullptr, nullptr, nullptr, &pglTexParameterfv, target, pname, params);}
extern "C" void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {return (*pglTexParameterfv)(target, pname, params);}
static void wrap_glTexParameteri(GLenum target, GLenum pname, GLint param);
static void (APIENTRYP pglTexParameteri)(GLenum target, GLenum pname, GLint param) = wrap_glTexParameteri;
static void wrap_glTexParameteri(GLenum target, GLenum pname, GLint param) {return trampoline<void>("glTexParameteri", nullptr, nullptr, nullptr, &pglTexParameteri, target, pname, param);}
extern "C" void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param) {return (*pglTexParameteri)(target, pname, param);}
static void wrap_glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
static void (APIENTRYP pglTexParameteriv)(GLenum target, GLenum pname, const GLint *params) = wrap_glTexParameteriv;
static void wrap_glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {return trampoline<void>("glTexParameteriv", nullptr, nullptr, nullptr, &pglTexParameteriv, target, pname, params);}
extern "C" void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {return (*pglTexParameteriv)(target, pname, params);}
static void wrap_glTexParameterx(GLenum target, GLenum pname, GLfixed param);
static void (APIENTRYP pglTexParameterx)(GLenum target, GLenum pname, GLfixed param) = wrap_glTexParameterx;
static void wrap_glTexParameterx(GLenum target, GLenum pname, GLfixed param) {return trampoline<void>("glTexParameterx", "glTexParameterxOES", nullptr, nullptr, &pglTexParameterx, target, pname, param);}
extern "C" void APIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param) {return (*pglTexParameterx)(target, pname, param);}
static void wrap_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params);
static void (APIENTRYP pglTexParameterxv)(GLenum target, GLenum pname, const GLfixed *params) = wrap_glTexParameterxv;
static void wrap_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params) {return trampoline<void>("glTexParameterxv", "glTexParameterxvOES", nullptr, nullptr, &pglTexParameterxv, target, pname, params);}
extern "C" void APIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params) {return (*pglTexParameterxv)(target, pname, params);}
static void wrap_glTexRenderbuffer(GLenum target, GLuint renderbuffer);
static void (APIENTRYP pglTexRenderbuffer)(GLenum target, GLuint renderbuffer) = wrap_glTexRenderbuffer;
static void wrap_glTexRenderbuffer(GLenum target, GLuint renderbuffer) {return trampoline<void>("glTexRenderbuffer", "glTexRenderbufferNV", nullptr, nullptr, &pglTexRenderbuffer, target, renderbuffer);}
extern "C" void APIENTRY glTexRenderbuffer(GLenum target, GLuint renderbuffer) {return (*pglTexRenderbuffer)(target, renderbuffer);}
static void wrap_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
static void (APIENTRYP pglTexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) = wrap_glTexStorage1D;
static void wrap_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {return trampoline<void>("glTexStorage1D", nullptr, nullptr, nullptr, &pglTexStorage1D, target, levels, internalformat, width);}
extern "C" void APIENTRY glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {return (*pglTexStorage1D)(target, levels, internalformat, width);}
static void wrap_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glTexStorage2D;
static void wrap_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glTexStorage2D", nullptr, nullptr, nullptr, &pglTexStorage2D, target, levels, internalformat, width, height);}
extern "C" void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglTexStorage2D)(target, levels, internalformat, width, height);}
static void wrap_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
static void (APIENTRYP pglTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = wrap_glTexStorage2DMultisample;
static void wrap_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {return trampoline<void>("glTexStorage2DMultisample", nullptr, nullptr, nullptr, &pglTexStorage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);}
extern "C" void APIENTRY glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {return (*pglTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);}
static void wrap_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
static void (APIENTRYP pglTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = wrap_glTexStorage3D;
static void wrap_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {return trampoline<void>("glTexStorage3D", nullptr, nullptr, nullptr, &pglTexStorage3D, target, levels, internalformat, width, height, depth);}
extern "C" void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {return (*pglTexStorage3D)(target, levels, internalformat, width, height, depth);}
static void wrap_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
static void (APIENTRYP pglTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = wrap_glTexStorage3DMultisample;
static void wrap_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {return trampoline<void>("glTexStorage3DMultisample", nullptr, nullptr, nullptr, &pglTexStorage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);}
extern "C" void APIENTRY glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {return (*pglTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);}
static void wrap_glTexStorageSparse(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
static void (APIENTRYP pglTexStorageSparse)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) = wrap_glTexStorageSparse;
static void wrap_glTexStorageSparse(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {return trampoline<void>("glTexStorageSparse", "glTexStorageSparseAMD", nullptr, nullptr, &pglTexStorageSparse, target, internalFormat, width, height, depth, layers, flags);}
extern "C" void APIENTRY glTexStorageSparse(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {return (*pglTexStorageSparse)(target, internalFormat, width, height, depth, layers, flags);}
static void wrap_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glTexSubImage1D;
static void wrap_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glTexSubImage1D", "glTexSubImage1DEXT", nullptr, nullptr, &pglTexSubImage1D, target, level, xoffset, width, format, type, pixels);}
extern "C" void APIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglTexSubImage1D)(target, level, xoffset, width, format, type, pixels);}
static void wrap_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glTexSubImage2D;
static void wrap_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glTexSubImage2D", "glTexSubImage2DEXT", nullptr, nullptr, &pglTexSubImage2D, target, level, xoffset, yoffset, width, height, format, type, pixels);}
extern "C" void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels);}
static void wrap_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
static void (APIENTRYP pglTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) = wrap_glTexSubImage3D;
static void wrap_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {return trampoline<void>("glTexSubImage3D", "glTexSubImage3DEXT", nullptr, nullptr, &pglTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
extern "C" void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {return (*pglTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
static void wrap_glTexSubImage4D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTexSubImage4D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) = wrap_glTexSubImage4D;
static void wrap_glTexSubImage4D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTexSubImage4D", "glTexSubImage4DSGIS", nullptr, nullptr, &pglTexSubImage4D, target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);}
extern "C" void APIENTRY glTexSubImage4D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) {return (*pglTexSubImage4D)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);}
static void wrap_glTextureBarrier(void);
static void (APIENTRYP pglTextureBarrier)(void) = wrap_glTextureBarrier;
static void wrap_glTextureBarrier(void) {return trampoline<void>("glTextureBarrier", "glTextureBarrierNV", nullptr, nullptr, &pglTextureBarrier);}
extern "C" void APIENTRY glTextureBarrier(void) {return (*pglTextureBarrier)();}
static void wrap_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
static void (APIENTRYP pglTextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer) = wrap_glTextureBuffer;
static void wrap_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {return trampoline<void>("glTextureBuffer", "glTextureBufferEXT", nullptr, nullptr, &pglTextureBuffer, texture, internalformat, buffer);}
extern "C" void APIENTRY glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {return (*pglTextureBuffer)(texture, internalformat, buffer);}
static void wrap_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
static void (APIENTRYP pglTextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = wrap_glTextureBufferRange;
static void wrap_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {return trampoline<void>("glTextureBufferRange", "glTextureBufferRangeEXT", nullptr, nullptr, &pglTextureBufferRange, texture, internalformat, buffer, offset, size);}
extern "C" void APIENTRY glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {return (*pglTextureBufferRange)(texture, internalformat, buffer, offset, size);}
static void wrap_glTextureColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
static void (APIENTRYP pglTextureColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = wrap_glTextureColorMask;
static void wrap_glTextureColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {return trampoline<void>("glTextureColorMask", "glTextureColorMaskSGIS", nullptr, nullptr, &pglTextureColorMask, red, green, blue, alpha);}
extern "C" void APIENTRY glTextureColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {return (*pglTextureColorMask)(red, green, blue, alpha);}
static void wrap_glTextureImage1D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTextureImage1D)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glTextureImage1D;
static void wrap_glTextureImage1D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTextureImage1D", "glTextureImage1DEXT", nullptr, nullptr, &pglTextureImage1D, texture, target, level, internalformat, width, border, format, type, pixels);}
extern "C" void APIENTRY glTextureImage1D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglTextureImage1D)(texture, target, level, internalformat, width, border, format, type, pixels);}
static void wrap_glTextureImage2D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTextureImage2D)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glTextureImage2D;
static void wrap_glTextureImage2D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTextureImage2D", "glTextureImage2DEXT", nullptr, nullptr, &pglTextureImage2D, texture, target, level, internalformat, width, height, border, format, type, pixels);}
extern "C" void APIENTRY glTextureImage2D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglTextureImage2D)(texture, target, level, internalformat, width, height, border, format, type, pixels);}
static void wrap_glTextureImage2DMultisample(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
static void (APIENTRYP pglTextureImage2DMultisample)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) = wrap_glTextureImage2DMultisample;
static void wrap_glTextureImage2DMultisample(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {return trampoline<void>("glTextureImage2DMultisample", "glTextureImage2DMultisampleNV", nullptr, nullptr, &pglTextureImage2DMultisample, texture, target, samples, internalFormat, width, height, fixedSampleLocations);}
extern "C" void APIENTRY glTextureImage2DMultisample(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {return (*pglTextureImage2DMultisample)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);}
static void wrap_glTextureImage2DMultisampleCoverage(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
static void (APIENTRYP pglTextureImage2DMultisampleCoverage)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) = wrap_glTextureImage2DMultisampleCoverage;
static void wrap_glTextureImage2DMultisampleCoverage(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {return trampoline<void>("glTextureImage2DMultisampleCoverage", "glTextureImage2DMultisampleCoverageNV", nullptr, nullptr, &pglTextureImage2DMultisampleCoverage, texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);}
extern "C" void APIENTRY glTextureImage2DMultisampleCoverage(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {return (*pglTextureImage2DMultisampleCoverage)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);}
static void wrap_glTextureImage3D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTextureImage3D)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) = wrap_glTextureImage3D;
static void wrap_glTextureImage3D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTextureImage3D", "glTextureImage3DEXT", nullptr, nullptr, &pglTextureImage3D, texture, target, level, internalformat, width, height, depth, border, format, type, pixels);}
extern "C" void APIENTRY glTextureImage3D(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {return (*pglTextureImage3D)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);}
static void wrap_glTextureImage3DMultisample(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
static void (APIENTRYP pglTextureImage3DMultisample)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) = wrap_glTextureImage3DMultisample;
static void wrap_glTextureImage3DMultisample(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {return trampoline<void>("glTextureImage3DMultisample", "glTextureImage3DMultisampleNV", nullptr, nullptr, &pglTextureImage3DMultisample, texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);}
extern "C" void APIENTRY glTextureImage3DMultisample(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {return (*pglTextureImage3DMultisample)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);}
static void wrap_glTextureImage3DMultisampleCoverage(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
static void (APIENTRYP pglTextureImage3DMultisampleCoverage)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) = wrap_glTextureImage3DMultisampleCoverage;
static void wrap_glTextureImage3DMultisampleCoverage(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {return trampoline<void>("glTextureImage3DMultisampleCoverage", "glTextureImage3DMultisampleCoverageNV", nullptr, nullptr, &pglTextureImage3DMultisampleCoverage, texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);}
extern "C" void APIENTRY glTextureImage3DMultisampleCoverage(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {return (*pglTextureImage3DMultisampleCoverage)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);}
static void wrap_glTextureLight(GLenum pname);
static void (APIENTRYP pglTextureLight)(GLenum pname) = wrap_glTextureLight;
static void wrap_glTextureLight(GLenum pname) {return trampoline<void>("glTextureLight", "glTextureLightEXT", nullptr, nullptr, &pglTextureLight, pname);}
extern "C" void APIENTRY glTextureLight(GLenum pname) {return (*pglTextureLight)(pname);}
static void wrap_glTextureMaterial(GLenum face, GLenum mode);
static void (APIENTRYP pglTextureMaterial)(GLenum face, GLenum mode) = wrap_glTextureMaterial;
static void wrap_glTextureMaterial(GLenum face, GLenum mode) {return trampoline<void>("glTextureMaterial", "glTextureMaterialEXT", nullptr, nullptr, &pglTextureMaterial, face, mode);}
extern "C" void APIENTRY glTextureMaterial(GLenum face, GLenum mode) {return (*pglTextureMaterial)(face, mode);}
static void wrap_glTextureNormal(GLenum mode);
static void (APIENTRYP pglTextureNormal)(GLenum mode) = wrap_glTextureNormal;
static void wrap_glTextureNormal(GLenum mode) {return trampoline<void>("glTextureNormal", "glTextureNormalEXT", nullptr, nullptr, &pglTextureNormal, mode);}
extern "C" void APIENTRY glTextureNormal(GLenum mode) {return (*pglTextureNormal)(mode);}
static void wrap_glTexturePageCommitment(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
static void (APIENTRYP pglTexturePageCommitment)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) = wrap_glTexturePageCommitment;
static void wrap_glTexturePageCommitment(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {return trampoline<void>("glTexturePageCommitment", "glTexturePageCommitmentEXT", nullptr, nullptr, &pglTexturePageCommitment, texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);}
extern "C" void APIENTRY glTexturePageCommitment(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {return (*pglTexturePageCommitment)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);}
static void wrap_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
static void (APIENTRYP pglTextureParameterIiv)(GLuint texture, GLenum pname, const GLint *params) = wrap_glTextureParameterIiv;
static void wrap_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) {return trampoline<void>("glTextureParameterIiv", "glTextureParameterIivEXT", nullptr, nullptr, &pglTextureParameterIiv, texture, pname, params);}
extern "C" void APIENTRY glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) {return (*pglTextureParameterIiv)(texture, pname, params);}
static void wrap_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
static void (APIENTRYP pglTextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint *params) = wrap_glTextureParameterIuiv;
static void wrap_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) {return trampoline<void>("glTextureParameterIuiv", "glTextureParameterIuivEXT", nullptr, nullptr, &pglTextureParameterIuiv, texture, pname, params);}
extern "C" void APIENTRY glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) {return (*pglTextureParameterIuiv)(texture, pname, params);}
static void wrap_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
static void (APIENTRYP pglTextureParameterf)(GLuint texture, GLenum pname, GLfloat param) = wrap_glTextureParameterf;
static void wrap_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {return trampoline<void>("glTextureParameterf", "glTextureParameterfEXT", nullptr, nullptr, &pglTextureParameterf, texture, pname, param);}
extern "C" void APIENTRY glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {return (*pglTextureParameterf)(texture, pname, param);}
static void wrap_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
static void (APIENTRYP pglTextureParameterfv)(GLuint texture, GLenum pname, const GLfloat *param) = wrap_glTextureParameterfv;
static void wrap_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) {return trampoline<void>("glTextureParameterfv", "glTextureParameterfvEXT", nullptr, nullptr, &pglTextureParameterfv, texture, pname, param);}
extern "C" void APIENTRY glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) {return (*pglTextureParameterfv)(texture, pname, param);}
static void wrap_glTextureParameteri(GLuint texture, GLenum pname, GLint param);
static void (APIENTRYP pglTextureParameteri)(GLuint texture, GLenum pname, GLint param) = wrap_glTextureParameteri;
static void wrap_glTextureParameteri(GLuint texture, GLenum pname, GLint param) {return trampoline<void>("glTextureParameteri", "glTextureParameteriEXT", nullptr, nullptr, &pglTextureParameteri, texture, pname, param);}
extern "C" void APIENTRY glTextureParameteri(GLuint texture, GLenum pname, GLint param) {return (*pglTextureParameteri)(texture, pname, param);}
static void wrap_glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
static void (APIENTRYP pglTextureParameteriv)(GLuint texture, GLenum pname, const GLint *param) = wrap_glTextureParameteriv;
static void wrap_glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) {return trampoline<void>("glTextureParameteriv", "glTextureParameterivEXT", nullptr, nullptr, &pglTextureParameteriv, texture, pname, param);}
extern "C" void APIENTRY glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) {return (*pglTextureParameteriv)(texture, pname, param);}
static void wrap_glTextureRange(GLenum target, GLsizei length, const void *pointer);
static void (APIENTRYP pglTextureRange)(GLenum target, GLsizei length, const void *pointer) = wrap_glTextureRange;
static void wrap_glTextureRange(GLenum target, GLsizei length, const void *pointer) {return trampoline<void>("glTextureRange", "glTextureRangeAPPLE", nullptr, nullptr, &pglTextureRange, target, length, pointer);}
extern "C" void APIENTRY glTextureRange(GLenum target, GLsizei length, const void *pointer) {return (*pglTextureRange)(target, length, pointer);}
static void wrap_glTextureRenderbuffer(GLuint texture, GLenum target, GLuint renderbuffer);
static void (APIENTRYP pglTextureRenderbuffer)(GLuint texture, GLenum target, GLuint renderbuffer) = wrap_glTextureRenderbuffer;
static void wrap_glTextureRenderbuffer(GLuint texture, GLenum target, GLuint renderbuffer) {return trampoline<void>("glTextureRenderbuffer", "glTextureRenderbufferEXT", nullptr, nullptr, &pglTextureRenderbuffer, texture, target, renderbuffer);}
extern "C" void APIENTRY glTextureRenderbuffer(GLuint texture, GLenum target, GLuint renderbuffer) {return (*pglTextureRenderbuffer)(texture, target, renderbuffer);}
static void wrap_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
static void (APIENTRYP pglTextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) = wrap_glTextureStorage1D;
static void wrap_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {return trampoline<void>("glTextureStorage1D", "glTextureStorage1DEXT", nullptr, nullptr, &pglTextureStorage1D, texture, levels, internalformat, width);}
extern "C" void APIENTRY glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {return (*pglTextureStorage1D)(texture, levels, internalformat, width);}
static void wrap_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
static void (APIENTRYP pglTextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = wrap_glTextureStorage2D;
static void wrap_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {return trampoline<void>("glTextureStorage2D", "glTextureStorage2DEXT", nullptr, nullptr, &pglTextureStorage2D, texture, levels, internalformat, width, height);}
extern "C" void APIENTRY glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {return (*pglTextureStorage2D)(texture, levels, internalformat, width, height);}
static void wrap_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
static void (APIENTRYP pglTextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = wrap_glTextureStorage2DMultisample;
static void wrap_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {return trampoline<void>("glTextureStorage2DMultisample", "glTextureStorage2DMultisampleEXT", nullptr, nullptr, &pglTextureStorage2DMultisample, texture, samples, internalformat, width, height, fixedsamplelocations);}
extern "C" void APIENTRY glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {return (*pglTextureStorage2DMultisample)(texture, samples, internalformat, width, height, fixedsamplelocations);}
static void wrap_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
static void (APIENTRYP pglTextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = wrap_glTextureStorage3D;
static void wrap_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {return trampoline<void>("glTextureStorage3D", "glTextureStorage3DEXT", nullptr, nullptr, &pglTextureStorage3D, texture, levels, internalformat, width, height, depth);}
extern "C" void APIENTRY glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {return (*pglTextureStorage3D)(texture, levels, internalformat, width, height, depth);}
static void wrap_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
static void (APIENTRYP pglTextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = wrap_glTextureStorage3DMultisample;
static void wrap_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {return trampoline<void>("glTextureStorage3DMultisample", "glTextureStorage3DMultisampleEXT", nullptr, nullptr, &pglTextureStorage3DMultisample, texture, samples, internalformat, width, height, depth, fixedsamplelocations);}
extern "C" void APIENTRY glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {return (*pglTextureStorage3DMultisample)(texture, samples, internalformat, width, height, depth, fixedsamplelocations);}
static void wrap_glTextureStorageSparse(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
static void (APIENTRYP pglTextureStorageSparse)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) = wrap_glTextureStorageSparse;
static void wrap_glTextureStorageSparse(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {return trampoline<void>("glTextureStorageSparse", "glTextureStorageSparseAMD", nullptr, nullptr, &pglTextureStorageSparse, texture, target, internalFormat, width, height, depth, layers, flags);}
extern "C" void APIENTRY glTextureStorageSparse(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {return (*pglTextureStorageSparse)(texture, target, internalFormat, width, height, depth, layers, flags);}
static void wrap_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) = wrap_glTextureSubImage1D;
static void wrap_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTextureSubImage1D", "glTextureSubImage1DEXT", nullptr, nullptr, &pglTextureSubImage1D, texture, level, xoffset, width, format, type, pixels);}
extern "C" void APIENTRY glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {return (*pglTextureSubImage1D)(texture, level, xoffset, width, format, type, pixels);}
static void wrap_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) = wrap_glTextureSubImage2D;
static void wrap_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTextureSubImage2D", "glTextureSubImage2DEXT", nullptr, nullptr, &pglTextureSubImage2D, texture, level, xoffset, yoffset, width, height, format, type, pixels);}
extern "C" void APIENTRY glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {return (*pglTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, type, pixels);}
static void wrap_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
static void (APIENTRYP pglTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) = wrap_glTextureSubImage3D;
static void wrap_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {return trampoline<void>("glTextureSubImage3D", "glTextureSubImage3DEXT", nullptr, nullptr, &pglTextureSubImage3D, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
extern "C" void APIENTRY glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {return (*pglTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
static void wrap_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
static void (APIENTRYP pglTextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) = wrap_glTextureView;
static void wrap_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {return trampoline<void>("glTextureView", nullptr, nullptr, nullptr, &pglTextureView, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);}
extern "C" void APIENTRY glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {return (*pglTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);}
static void wrap_glTrackMatrix(GLenum target, GLuint address, GLenum matrix, GLenum transform);
static void (APIENTRYP pglTrackMatrix)(GLenum target, GLuint address, GLenum matrix, GLenum transform) = wrap_glTrackMatrix;
static void wrap_glTrackMatrix(GLenum target, GLuint address, GLenum matrix, GLenum transform) {return trampoline<void>("glTrackMatrix", "glTrackMatrixNV", nullptr, nullptr, &pglTrackMatrix, target, address, matrix, transform);}
extern "C" void APIENTRY glTrackMatrix(GLenum target, GLuint address, GLenum matrix, GLenum transform) {return (*pglTrackMatrix)(target, address, matrix, transform);}
static void wrap_glTransformFeedbackAttribs(GLsizei count, const GLint *attribs, GLenum bufferMode);
static void (APIENTRYP pglTransformFeedbackAttribs)(GLsizei count, const GLint *attribs, GLenum bufferMode) = wrap_glTransformFeedbackAttribs;
static void wrap_glTransformFeedbackAttribs(GLsizei count, const GLint *attribs, GLenum bufferMode) {return trampoline<void>("glTransformFeedbackAttribs", "glTransformFeedbackAttribsNV", nullptr, nullptr, &pglTransformFeedbackAttribs, count, attribs, bufferMode);}
extern "C" void APIENTRY glTransformFeedbackAttribs(GLsizei count, const GLint *attribs, GLenum bufferMode) {return (*pglTransformFeedbackAttribs)(count, attribs, bufferMode);}
static void wrap_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
static void (APIENTRYP pglTransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer) = wrap_glTransformFeedbackBufferBase;
static void wrap_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {return trampoline<void>("glTransformFeedbackBufferBase", nullptr, nullptr, nullptr, &pglTransformFeedbackBufferBase, xfb, index, buffer);}
extern "C" void APIENTRY glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {return (*pglTransformFeedbackBufferBase)(xfb, index, buffer);}
static void wrap_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
static void (APIENTRYP pglTransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = wrap_glTransformFeedbackBufferRange;
static void wrap_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {return trampoline<void>("glTransformFeedbackBufferRange", nullptr, nullptr, nullptr, &pglTransformFeedbackBufferRange, xfb, index, buffer, offset, size);}
extern "C" void APIENTRY glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {return (*pglTransformFeedbackBufferRange)(xfb, index, buffer, offset, size);}
static void wrap_glTransformFeedbackStreamAttribs(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
static void (APIENTRYP pglTransformFeedbackStreamAttribs)(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode) = wrap_glTransformFeedbackStreamAttribs;
static void wrap_glTransformFeedbackStreamAttribs(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode) {return trampoline<void>("glTransformFeedbackStreamAttribs", "glTransformFeedbackStreamAttribsNV", nullptr, nullptr, &pglTransformFeedbackStreamAttribs, count, attribs, nbuffers, bufstreams, bufferMode);}
extern "C" void APIENTRY glTransformFeedbackStreamAttribs(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode) {return (*pglTransformFeedbackStreamAttribs)(count, attribs, nbuffers, bufstreams, bufferMode);}
static void wrap_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
static void (APIENTRYP pglTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) = wrap_glTransformFeedbackVaryings;
static void wrap_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {return trampoline<void>("glTransformFeedbackVaryings", "glTransformFeedbackVaryingsEXT", "glTransformFeedbackVaryingsNV", nullptr, &pglTransformFeedbackVaryings, program, count, varyings, bufferMode);}
extern "C" void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {return (*pglTransformFeedbackVaryings)(program, count, varyings, bufferMode);}
static void wrap_glTransformPath(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
static void (APIENTRYP pglTransformPath)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) = wrap_glTransformPath;
static void wrap_glTransformPath(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) {return trampoline<void>("glTransformPath", "glTransformPathNV", nullptr, nullptr, &pglTransformPath, resultPath, srcPath, transformType, transformValues);}
extern "C" void APIENTRY glTransformPath(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) {return (*pglTransformPath)(resultPath, srcPath, transformType, transformValues);}
static void wrap_glTranslated(GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglTranslated)(GLdouble x, GLdouble y, GLdouble z) = wrap_glTranslated;
static void wrap_glTranslated(GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glTranslated", nullptr, nullptr, nullptr, &pglTranslated, x, y, z);}
extern "C" void APIENTRY glTranslated(GLdouble x, GLdouble y, GLdouble z) {return (*pglTranslated)(x, y, z);}
static void wrap_glTranslatef(GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglTranslatef)(GLfloat x, GLfloat y, GLfloat z) = wrap_glTranslatef;
static void wrap_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glTranslatef", nullptr, nullptr, nullptr, &pglTranslatef, x, y, z);}
extern "C" void APIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z) {return (*pglTranslatef)(x, y, z);}
static void wrap_glTranslatex(GLfixed x, GLfixed y, GLfixed z);
static void (APIENTRYP pglTranslatex)(GLfixed x, GLfixed y, GLfixed z) = wrap_glTranslatex;
static void wrap_glTranslatex(GLfixed x, GLfixed y, GLfixed z) {return trampoline<void>("glTranslatex", "glTranslatexOES", nullptr, nullptr, &pglTranslatex, x, y, z);}
extern "C" void APIENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z) {return (*pglTranslatex)(x, y, z);}
static void wrap_glUniform1d(GLint location, GLdouble x);
static void (APIENTRYP pglUniform1d)(GLint location, GLdouble x) = wrap_glUniform1d;
static void wrap_glUniform1d(GLint location, GLdouble x) {return trampoline<void>("glUniform1d", nullptr, nullptr, nullptr, &pglUniform1d, location, x);}
extern "C" void APIENTRY glUniform1d(GLint location, GLdouble x) {return (*pglUniform1d)(location, x);}
static void wrap_glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglUniform1dv)(GLint location, GLsizei count, const GLdouble *value) = wrap_glUniform1dv;
static void wrap_glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glUniform1dv", nullptr, nullptr, nullptr, &pglUniform1dv, location, count, value);}
extern "C" void APIENTRY glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {return (*pglUniform1dv)(location, count, value);}
static void wrap_glUniform1f(GLint location, GLfloat v0);
static void (APIENTRYP pglUniform1f)(GLint location, GLfloat v0) = wrap_glUniform1f;
static void wrap_glUniform1f(GLint location, GLfloat v0) {return trampoline<void>("glUniform1f", "glUniform1fARB", nullptr, nullptr, &pglUniform1f, location, v0);}
extern "C" void APIENTRY glUniform1f(GLint location, GLfloat v0) {return (*pglUniform1f)(location, v0);}
static void wrap_glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglUniform1fv)(GLint location, GLsizei count, const GLfloat *value) = wrap_glUniform1fv;
static void wrap_glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glUniform1fv", "glUniform1fvARB", nullptr, nullptr, &pglUniform1fv, location, count, value);}
extern "C" void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {return (*pglUniform1fv)(location, count, value);}
static void wrap_glUniform1i(GLint location, GLint v0);
static void (APIENTRYP pglUniform1i)(GLint location, GLint v0) = wrap_glUniform1i;
static void wrap_glUniform1i(GLint location, GLint v0) {return trampoline<void>("glUniform1i", "glUniform1iARB", nullptr, nullptr, &pglUniform1i, location, v0);}
extern "C" void APIENTRY glUniform1i(GLint location, GLint v0) {return (*pglUniform1i)(location, v0);}
static void wrap_glUniform1i64(GLint location, GLint64 x);
static void (APIENTRYP pglUniform1i64)(GLint location, GLint64 x) = wrap_glUniform1i64;
static void wrap_glUniform1i64(GLint location, GLint64 x) {return trampoline<void>("glUniform1i64", "glUniform1i64ARB", "glUniform1i64NV", nullptr, &pglUniform1i64, location, x);}
extern "C" void APIENTRY glUniform1i64(GLint location, GLint64 x) {return (*pglUniform1i64)(location, x);}
static void wrap_glUniform1i64v(GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglUniform1i64v)(GLint location, GLsizei count, const GLint64 *value) = wrap_glUniform1i64v;
static void wrap_glUniform1i64v(GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glUniform1i64v", "glUniform1i64vARB", "glUniform1i64vNV", nullptr, &pglUniform1i64v, location, count, value);}
extern "C" void APIENTRY glUniform1i64v(GLint location, GLsizei count, const GLint64 *value) {return (*pglUniform1i64v)(location, count, value);}
static void wrap_glUniform1iv(GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglUniform1iv)(GLint location, GLsizei count, const GLint *value) = wrap_glUniform1iv;
static void wrap_glUniform1iv(GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glUniform1iv", "glUniform1ivARB", nullptr, nullptr, &pglUniform1iv, location, count, value);}
extern "C" void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value) {return (*pglUniform1iv)(location, count, value);}
static void wrap_glUniform1ui(GLint location, GLuint v0);
static void (APIENTRYP pglUniform1ui)(GLint location, GLuint v0) = wrap_glUniform1ui;
static void wrap_glUniform1ui(GLint location, GLuint v0) {return trampoline<void>("glUniform1ui", "glUniform1uiEXT", nullptr, nullptr, &pglUniform1ui, location, v0);}
extern "C" void APIENTRY glUniform1ui(GLint location, GLuint v0) {return (*pglUniform1ui)(location, v0);}
static void wrap_glUniform1ui64(GLint location, GLuint64 x);
static void (APIENTRYP pglUniform1ui64)(GLint location, GLuint64 x) = wrap_glUniform1ui64;
static void wrap_glUniform1ui64(GLint location, GLuint64 x) {return trampoline<void>("glUniform1ui64", "glUniform1ui64ARB", "glUniform1ui64NV", nullptr, &pglUniform1ui64, location, x);}
extern "C" void APIENTRY glUniform1ui64(GLint location, GLuint64 x) {return (*pglUniform1ui64)(location, x);}
static void wrap_glUniform1ui64v(GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglUniform1ui64v)(GLint location, GLsizei count, const GLuint64 *value) = wrap_glUniform1ui64v;
static void wrap_glUniform1ui64v(GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glUniform1ui64v", "glUniform1ui64vARB", "glUniform1ui64vNV", nullptr, &pglUniform1ui64v, location, count, value);}
extern "C" void APIENTRY glUniform1ui64v(GLint location, GLsizei count, const GLuint64 *value) {return (*pglUniform1ui64v)(location, count, value);}
static void wrap_glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglUniform1uiv)(GLint location, GLsizei count, const GLuint *value) = wrap_glUniform1uiv;
static void wrap_glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glUniform1uiv", "glUniform1uivEXT", nullptr, nullptr, &pglUniform1uiv, location, count, value);}
extern "C" void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {return (*pglUniform1uiv)(location, count, value);}
static void wrap_glUniform2d(GLint location, GLdouble x, GLdouble y);
static void (APIENTRYP pglUniform2d)(GLint location, GLdouble x, GLdouble y) = wrap_glUniform2d;
static void wrap_glUniform2d(GLint location, GLdouble x, GLdouble y) {return trampoline<void>("glUniform2d", nullptr, nullptr, nullptr, &pglUniform2d, location, x, y);}
extern "C" void APIENTRY glUniform2d(GLint location, GLdouble x, GLdouble y) {return (*pglUniform2d)(location, x, y);}
static void wrap_glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglUniform2dv)(GLint location, GLsizei count, const GLdouble *value) = wrap_glUniform2dv;
static void wrap_glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glUniform2dv", nullptr, nullptr, nullptr, &pglUniform2dv, location, count, value);}
extern "C" void APIENTRY glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {return (*pglUniform2dv)(location, count, value);}
static void wrap_glUniform2f(GLint location, GLfloat v0, GLfloat v1);
static void (APIENTRYP pglUniform2f)(GLint location, GLfloat v0, GLfloat v1) = wrap_glUniform2f;
static void wrap_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {return trampoline<void>("glUniform2f", "glUniform2fARB", nullptr, nullptr, &pglUniform2f, location, v0, v1);}
extern "C" void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1) {return (*pglUniform2f)(location, v0, v1);}
static void wrap_glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglUniform2fv)(GLint location, GLsizei count, const GLfloat *value) = wrap_glUniform2fv;
static void wrap_glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glUniform2fv", "glUniform2fvARB", nullptr, nullptr, &pglUniform2fv, location, count, value);}
extern "C" void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {return (*pglUniform2fv)(location, count, value);}
static void wrap_glUniform2i(GLint location, GLint v0, GLint v1);
static void (APIENTRYP pglUniform2i)(GLint location, GLint v0, GLint v1) = wrap_glUniform2i;
static void wrap_glUniform2i(GLint location, GLint v0, GLint v1) {return trampoline<void>("glUniform2i", "glUniform2iARB", nullptr, nullptr, &pglUniform2i, location, v0, v1);}
extern "C" void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1) {return (*pglUniform2i)(location, v0, v1);}
static void wrap_glUniform2i64(GLint location, GLint64 x, GLint64 y);
static void (APIENTRYP pglUniform2i64)(GLint location, GLint64 x, GLint64 y) = wrap_glUniform2i64;
static void wrap_glUniform2i64(GLint location, GLint64 x, GLint64 y) {return trampoline<void>("glUniform2i64", "glUniform2i64ARB", "glUniform2i64NV", nullptr, &pglUniform2i64, location, x, y);}
extern "C" void APIENTRY glUniform2i64(GLint location, GLint64 x, GLint64 y) {return (*pglUniform2i64)(location, x, y);}
static void wrap_glUniform2i64v(GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglUniform2i64v)(GLint location, GLsizei count, const GLint64 *value) = wrap_glUniform2i64v;
static void wrap_glUniform2i64v(GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glUniform2i64v", "glUniform2i64vARB", "glUniform2i64vNV", nullptr, &pglUniform2i64v, location, count, value);}
extern "C" void APIENTRY glUniform2i64v(GLint location, GLsizei count, const GLint64 *value) {return (*pglUniform2i64v)(location, count, value);}
static void wrap_glUniform2iv(GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglUniform2iv)(GLint location, GLsizei count, const GLint *value) = wrap_glUniform2iv;
static void wrap_glUniform2iv(GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glUniform2iv", "glUniform2ivARB", nullptr, nullptr, &pglUniform2iv, location, count, value);}
extern "C" void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value) {return (*pglUniform2iv)(location, count, value);}
static void wrap_glUniform2ui(GLint location, GLuint v0, GLuint v1);
static void (APIENTRYP pglUniform2ui)(GLint location, GLuint v0, GLuint v1) = wrap_glUniform2ui;
static void wrap_glUniform2ui(GLint location, GLuint v0, GLuint v1) {return trampoline<void>("glUniform2ui", "glUniform2uiEXT", nullptr, nullptr, &pglUniform2ui, location, v0, v1);}
extern "C" void APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1) {return (*pglUniform2ui)(location, v0, v1);}
static void wrap_glUniform2ui64(GLint location, GLuint64 x, GLuint64 y);
static void (APIENTRYP pglUniform2ui64)(GLint location, GLuint64 x, GLuint64 y) = wrap_glUniform2ui64;
static void wrap_glUniform2ui64(GLint location, GLuint64 x, GLuint64 y) {return trampoline<void>("glUniform2ui64", "glUniform2ui64ARB", "glUniform2ui64NV", nullptr, &pglUniform2ui64, location, x, y);}
extern "C" void APIENTRY glUniform2ui64(GLint location, GLuint64 x, GLuint64 y) {return (*pglUniform2ui64)(location, x, y);}
static void wrap_glUniform2ui64v(GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglUniform2ui64v)(GLint location, GLsizei count, const GLuint64 *value) = wrap_glUniform2ui64v;
static void wrap_glUniform2ui64v(GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glUniform2ui64v", "glUniform2ui64vARB", "glUniform2ui64vNV", nullptr, &pglUniform2ui64v, location, count, value);}
extern "C" void APIENTRY glUniform2ui64v(GLint location, GLsizei count, const GLuint64 *value) {return (*pglUniform2ui64v)(location, count, value);}
static void wrap_glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglUniform2uiv)(GLint location, GLsizei count, const GLuint *value) = wrap_glUniform2uiv;
static void wrap_glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glUniform2uiv", "glUniform2uivEXT", nullptr, nullptr, &pglUniform2uiv, location, count, value);}
extern "C" void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {return (*pglUniform2uiv)(location, count, value);}
static void wrap_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z) = wrap_glUniform3d;
static void wrap_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glUniform3d", nullptr, nullptr, nullptr, &pglUniform3d, location, x, y, z);}
extern "C" void APIENTRY glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {return (*pglUniform3d)(location, x, y, z);}
static void wrap_glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglUniform3dv)(GLint location, GLsizei count, const GLdouble *value) = wrap_glUniform3dv;
static void wrap_glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glUniform3dv", nullptr, nullptr, nullptr, &pglUniform3dv, location, count, value);}
extern "C" void APIENTRY glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {return (*pglUniform3dv)(location, count, value);}
static void wrap_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
static void (APIENTRYP pglUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = wrap_glUniform3f;
static void wrap_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {return trampoline<void>("glUniform3f", "glUniform3fARB", nullptr, nullptr, &pglUniform3f, location, v0, v1, v2);}
extern "C" void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {return (*pglUniform3f)(location, v0, v1, v2);}
static void wrap_glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglUniform3fv)(GLint location, GLsizei count, const GLfloat *value) = wrap_glUniform3fv;
static void wrap_glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glUniform3fv", "glUniform3fvARB", nullptr, nullptr, &pglUniform3fv, location, count, value);}
extern "C" void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {return (*pglUniform3fv)(location, count, value);}
static void wrap_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
static void (APIENTRYP pglUniform3i)(GLint location, GLint v0, GLint v1, GLint v2) = wrap_glUniform3i;
static void wrap_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {return trampoline<void>("glUniform3i", "glUniform3iARB", nullptr, nullptr, &pglUniform3i, location, v0, v1, v2);}
extern "C" void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {return (*pglUniform3i)(location, v0, v1, v2);}
static void wrap_glUniform3i64(GLint location, GLint64 x, GLint64 y, GLint64 z);
static void (APIENTRYP pglUniform3i64)(GLint location, GLint64 x, GLint64 y, GLint64 z) = wrap_glUniform3i64;
static void wrap_glUniform3i64(GLint location, GLint64 x, GLint64 y, GLint64 z) {return trampoline<void>("glUniform3i64", "glUniform3i64ARB", "glUniform3i64NV", nullptr, &pglUniform3i64, location, x, y, z);}
extern "C" void APIENTRY glUniform3i64(GLint location, GLint64 x, GLint64 y, GLint64 z) {return (*pglUniform3i64)(location, x, y, z);}
static void wrap_glUniform3i64v(GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglUniform3i64v)(GLint location, GLsizei count, const GLint64 *value) = wrap_glUniform3i64v;
static void wrap_glUniform3i64v(GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glUniform3i64v", "glUniform3i64vARB", "glUniform3i64vNV", nullptr, &pglUniform3i64v, location, count, value);}
extern "C" void APIENTRY glUniform3i64v(GLint location, GLsizei count, const GLint64 *value) {return (*pglUniform3i64v)(location, count, value);}
static void wrap_glUniform3iv(GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglUniform3iv)(GLint location, GLsizei count, const GLint *value) = wrap_glUniform3iv;
static void wrap_glUniform3iv(GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glUniform3iv", "glUniform3ivARB", nullptr, nullptr, &pglUniform3iv, location, count, value);}
extern "C" void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value) {return (*pglUniform3iv)(location, count, value);}
static void wrap_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
static void (APIENTRYP pglUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2) = wrap_glUniform3ui;
static void wrap_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {return trampoline<void>("glUniform3ui", "glUniform3uiEXT", nullptr, nullptr, &pglUniform3ui, location, v0, v1, v2);}
extern "C" void APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {return (*pglUniform3ui)(location, v0, v1, v2);}
static void wrap_glUniform3ui64(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
static void (APIENTRYP pglUniform3ui64)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) = wrap_glUniform3ui64;
static void wrap_glUniform3ui64(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {return trampoline<void>("glUniform3ui64", "glUniform3ui64ARB", "glUniform3ui64NV", nullptr, &pglUniform3ui64, location, x, y, z);}
extern "C" void APIENTRY glUniform3ui64(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {return (*pglUniform3ui64)(location, x, y, z);}
static void wrap_glUniform3ui64v(GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglUniform3ui64v)(GLint location, GLsizei count, const GLuint64 *value) = wrap_glUniform3ui64v;
static void wrap_glUniform3ui64v(GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glUniform3ui64v", "glUniform3ui64vARB", "glUniform3ui64vNV", nullptr, &pglUniform3ui64v, location, count, value);}
extern "C" void APIENTRY glUniform3ui64v(GLint location, GLsizei count, const GLuint64 *value) {return (*pglUniform3ui64v)(location, count, value);}
static void wrap_glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglUniform3uiv)(GLint location, GLsizei count, const GLuint *value) = wrap_glUniform3uiv;
static void wrap_glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glUniform3uiv", "glUniform3uivEXT", nullptr, nullptr, &pglUniform3uiv, location, count, value);}
extern "C" void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {return (*pglUniform3uiv)(location, count, value);}
static void wrap_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glUniform4d;
static void wrap_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glUniform4d", nullptr, nullptr, nullptr, &pglUniform4d, location, x, y, z, w);}
extern "C" void APIENTRY glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglUniform4d)(location, x, y, z, w);}
static void wrap_glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
static void (APIENTRYP pglUniform4dv)(GLint location, GLsizei count, const GLdouble *value) = wrap_glUniform4dv;
static void wrap_glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {return trampoline<void>("glUniform4dv", nullptr, nullptr, nullptr, &pglUniform4dv, location, count, value);}
extern "C" void APIENTRY glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {return (*pglUniform4dv)(location, count, value);}
static void wrap_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
static void (APIENTRYP pglUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = wrap_glUniform4f;
static void wrap_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {return trampoline<void>("glUniform4f", "glUniform4fARB", nullptr, nullptr, &pglUniform4f, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {return (*pglUniform4f)(location, v0, v1, v2, v3);}
static void wrap_glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
static void (APIENTRYP pglUniform4fv)(GLint location, GLsizei count, const GLfloat *value) = wrap_glUniform4fv;
static void wrap_glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {return trampoline<void>("glUniform4fv", "glUniform4fvARB", nullptr, nullptr, &pglUniform4fv, location, count, value);}
extern "C" void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {return (*pglUniform4fv)(location, count, value);}
static void wrap_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
static void (APIENTRYP pglUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = wrap_glUniform4i;
static void wrap_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {return trampoline<void>("glUniform4i", "glUniform4iARB", nullptr, nullptr, &pglUniform4i, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {return (*pglUniform4i)(location, v0, v1, v2, v3);}
static void wrap_glUniform4i64(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
static void (APIENTRYP pglUniform4i64)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) = wrap_glUniform4i64;
static void wrap_glUniform4i64(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {return trampoline<void>("glUniform4i64", "glUniform4i64ARB", "glUniform4i64NV", nullptr, &pglUniform4i64, location, x, y, z, w);}
extern "C" void APIENTRY glUniform4i64(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {return (*pglUniform4i64)(location, x, y, z, w);}
static void wrap_glUniform4i64v(GLint location, GLsizei count, const GLint64 *value);
static void (APIENTRYP pglUniform4i64v)(GLint location, GLsizei count, const GLint64 *value) = wrap_glUniform4i64v;
static void wrap_glUniform4i64v(GLint location, GLsizei count, const GLint64 *value) {return trampoline<void>("glUniform4i64v", "glUniform4i64vARB", "glUniform4i64vNV", nullptr, &pglUniform4i64v, location, count, value);}
extern "C" void APIENTRY glUniform4i64v(GLint location, GLsizei count, const GLint64 *value) {return (*pglUniform4i64v)(location, count, value);}
static void wrap_glUniform4iv(GLint location, GLsizei count, const GLint *value);
static void (APIENTRYP pglUniform4iv)(GLint location, GLsizei count, const GLint *value) = wrap_glUniform4iv;
static void wrap_glUniform4iv(GLint location, GLsizei count, const GLint *value) {return trampoline<void>("glUniform4iv", "glUniform4ivARB", nullptr, nullptr, &pglUniform4iv, location, count, value);}
extern "C" void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value) {return (*pglUniform4iv)(location, count, value);}
static void wrap_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
static void (APIENTRYP pglUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = wrap_glUniform4ui;
static void wrap_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {return trampoline<void>("glUniform4ui", "glUniform4uiEXT", nullptr, nullptr, &pglUniform4ui, location, v0, v1, v2, v3);}
extern "C" void APIENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {return (*pglUniform4ui)(location, v0, v1, v2, v3);}
static void wrap_glUniform4ui64(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
static void (APIENTRYP pglUniform4ui64)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) = wrap_glUniform4ui64;
static void wrap_glUniform4ui64(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {return trampoline<void>("glUniform4ui64", "glUniform4ui64ARB", "glUniform4ui64NV", nullptr, &pglUniform4ui64, location, x, y, z, w);}
extern "C" void APIENTRY glUniform4ui64(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {return (*pglUniform4ui64)(location, x, y, z, w);}
static void wrap_glUniform4ui64v(GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglUniform4ui64v)(GLint location, GLsizei count, const GLuint64 *value) = wrap_glUniform4ui64v;
static void wrap_glUniform4ui64v(GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glUniform4ui64v", "glUniform4ui64vARB", "glUniform4ui64vNV", nullptr, &pglUniform4ui64v, location, count, value);}
extern "C" void APIENTRY glUniform4ui64v(GLint location, GLsizei count, const GLuint64 *value) {return (*pglUniform4ui64v)(location, count, value);}
static void wrap_glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
static void (APIENTRYP pglUniform4uiv)(GLint location, GLsizei count, const GLuint *value) = wrap_glUniform4uiv;
static void wrap_glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {return trampoline<void>("glUniform4uiv", "glUniform4uivEXT", nullptr, nullptr, &pglUniform4uiv, location, count, value);}
extern "C" void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {return (*pglUniform4uiv)(location, count, value);}
static void wrap_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
static void (APIENTRYP pglUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) = wrap_glUniformBlockBinding;
static void wrap_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {return trampoline<void>("glUniformBlockBinding", nullptr, nullptr, nullptr, &pglUniformBlockBinding, program, uniformBlockIndex, uniformBlockBinding);}
extern "C" void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {return (*pglUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);}
static void wrap_glUniformBuffer(GLuint program, GLint location, GLuint buffer);
static void (APIENTRYP pglUniformBuffer)(GLuint program, GLint location, GLuint buffer) = wrap_glUniformBuffer;
static void wrap_glUniformBuffer(GLuint program, GLint location, GLuint buffer) {return trampoline<void>("glUniformBuffer", "glUniformBufferEXT", nullptr, nullptr, &pglUniformBuffer, program, location, buffer);}
extern "C" void APIENTRY glUniformBuffer(GLuint program, GLint location, GLuint buffer) {return (*pglUniformBuffer)(program, location, buffer);}
static void wrap_glUniformHandleui64(GLint location, GLuint64 value);
static void (APIENTRYP pglUniformHandleui64)(GLint location, GLuint64 value) = wrap_glUniformHandleui64;
static void wrap_glUniformHandleui64(GLint location, GLuint64 value) {return trampoline<void>("glUniformHandleui64", "glUniformHandleui64ARB", "glUniformHandleui64NV", nullptr, &pglUniformHandleui64, location, value);}
extern "C" void APIENTRY glUniformHandleui64(GLint location, GLuint64 value) {return (*pglUniformHandleui64)(location, value);}
static void wrap_glUniformHandleui64v(GLint location, GLsizei count, const GLuint64 *value);
static void (APIENTRYP pglUniformHandleui64v)(GLint location, GLsizei count, const GLuint64 *value) = wrap_glUniformHandleui64v;
static void wrap_glUniformHandleui64v(GLint location, GLsizei count, const GLuint64 *value) {return trampoline<void>("glUniformHandleui64v", "glUniformHandleui64vARB", "glUniformHandleui64vNV", nullptr, &pglUniformHandleui64v, location, count, value);}
extern "C" void APIENTRY glUniformHandleui64v(GLint location, GLsizei count, const GLuint64 *value) {return (*pglUniformHandleui64v)(location, count, value);}
static void wrap_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix2dv;
static void wrap_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix2dv", nullptr, nullptr, nullptr, &pglUniformMatrix2dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix2dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix2fv;
static void wrap_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix2fv", "glUniformMatrix2fvARB", nullptr, nullptr, &pglUniformMatrix2fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix2fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix2x3dv;
static void wrap_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix2x3dv", nullptr, nullptr, nullptr, &pglUniformMatrix2x3dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix2x3dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix2x3fv;
static void wrap_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix2x3fv", nullptr, nullptr, nullptr, &pglUniformMatrix2x3fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix2x3fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix2x4dv;
static void wrap_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix2x4dv", nullptr, nullptr, nullptr, &pglUniformMatrix2x4dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix2x4dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix2x4fv;
static void wrap_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix2x4fv", nullptr, nullptr, nullptr, &pglUniformMatrix2x4fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix2x4fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix3dv;
static void wrap_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix3dv", nullptr, nullptr, nullptr, &pglUniformMatrix3dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix3dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix3fv;
static void wrap_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix3fv", "glUniformMatrix3fvARB", nullptr, nullptr, &pglUniformMatrix3fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix3fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix3x2dv;
static void wrap_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix3x2dv", nullptr, nullptr, nullptr, &pglUniformMatrix3x2dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix3x2dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix3x2fv;
static void wrap_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix3x2fv", nullptr, nullptr, nullptr, &pglUniformMatrix3x2fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix3x2fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix3x4dv;
static void wrap_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix3x4dv", nullptr, nullptr, nullptr, &pglUniformMatrix3x4dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix3x4dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix3x4fv;
static void wrap_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix3x4fv", nullptr, nullptr, nullptr, &pglUniformMatrix3x4fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix3x4fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix4dv;
static void wrap_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix4dv", nullptr, nullptr, nullptr, &pglUniformMatrix4dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix4dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix4fv;
static void wrap_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix4fv", "glUniformMatrix4fvARB", nullptr, nullptr, &pglUniformMatrix4fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix4fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix4x2dv;
static void wrap_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix4x2dv", nullptr, nullptr, nullptr, &pglUniformMatrix4x2dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix4x2dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix4x2fv;
static void wrap_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix4x2fv", nullptr, nullptr, nullptr, &pglUniformMatrix4x2fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix4x2fv)(location, count, transpose, value);}
static void wrap_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
static void (APIENTRYP pglUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) = wrap_glUniformMatrix4x3dv;
static void wrap_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return trampoline<void>("glUniformMatrix4x3dv", nullptr, nullptr, nullptr, &pglUniformMatrix4x3dv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {return (*pglUniformMatrix4x3dv)(location, count, transpose, value);}
static void wrap_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
static void (APIENTRYP pglUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = wrap_glUniformMatrix4x3fv;
static void wrap_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return trampoline<void>("glUniformMatrix4x3fv", nullptr, nullptr, nullptr, &pglUniformMatrix4x3fv, location, count, transpose, value);}
extern "C" void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {return (*pglUniformMatrix4x3fv)(location, count, transpose, value);}
static void wrap_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
static void (APIENTRYP pglUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint *indices) = wrap_glUniformSubroutinesuiv;
static void wrap_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {return trampoline<void>("glUniformSubroutinesuiv", nullptr, nullptr, nullptr, &pglUniformSubroutinesuiv, shadertype, count, indices);}
extern "C" void APIENTRY glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {return (*pglUniformSubroutinesuiv)(shadertype, count, indices);}
static void wrap_glUniformui64(GLint location, GLuint64EXT value);
static void (APIENTRYP pglUniformui64)(GLint location, GLuint64EXT value) = wrap_glUniformui64;
static void wrap_glUniformui64(GLint location, GLuint64EXT value) {return trampoline<void>("glUniformui64", "glUniformui64NV", nullptr, nullptr, &pglUniformui64, location, value);}
extern "C" void APIENTRY glUniformui64(GLint location, GLuint64EXT value) {return (*pglUniformui64)(location, value);}
static void wrap_glUniformui64v(GLint location, GLsizei count, const GLuint64EXT *value);
static void (APIENTRYP pglUniformui64v)(GLint location, GLsizei count, const GLuint64EXT *value) = wrap_glUniformui64v;
static void wrap_glUniformui64v(GLint location, GLsizei count, const GLuint64EXT *value) {return trampoline<void>("glUniformui64v", "glUniformui64vNV", nullptr, nullptr, &pglUniformui64v, location, count, value);}
extern "C" void APIENTRY glUniformui64v(GLint location, GLsizei count, const GLuint64EXT *value) {return (*pglUniformui64v)(location, count, value);}
static void wrap_glUnlockArrays(void);
static void (APIENTRYP pglUnlockArrays)(void) = wrap_glUnlockArrays;
static void wrap_glUnlockArrays(void) {return trampoline<void>("glUnlockArrays", "glUnlockArraysEXT", nullptr, nullptr, &pglUnlockArrays);}
extern "C" void APIENTRY glUnlockArrays(void) {return (*pglUnlockArrays)();}
static GLboolean wrap_glUnmapBuffer(GLenum target);
static GLboolean (APIENTRYP pglUnmapBuffer)(GLenum target) = wrap_glUnmapBuffer;
static GLboolean wrap_glUnmapBuffer(GLenum target) {return trampoline<GLboolean>("glUnmapBuffer", "glUnmapBufferARB", nullptr, nullptr, &pglUnmapBuffer, target);}
extern "C" GLboolean APIENTRY glUnmapBuffer(GLenum target) {return (*pglUnmapBuffer)(target);}
static GLboolean wrap_glUnmapNamedBuffer(GLuint buffer);
static GLboolean (APIENTRYP pglUnmapNamedBuffer)(GLuint buffer) = wrap_glUnmapNamedBuffer;
static GLboolean wrap_glUnmapNamedBuffer(GLuint buffer) {return trampoline<GLboolean>("glUnmapNamedBuffer", "glUnmapNamedBufferEXT", nullptr, nullptr, &pglUnmapNamedBuffer, buffer);}
extern "C" GLboolean APIENTRY glUnmapNamedBuffer(GLuint buffer) {return (*pglUnmapNamedBuffer)(buffer);}
static void wrap_glUnmapObjectBuffer(GLuint buffer);
static void (APIENTRYP pglUnmapObjectBuffer)(GLuint buffer) = wrap_glUnmapObjectBuffer;
static void wrap_glUnmapObjectBuffer(GLuint buffer) {return trampoline<void>("glUnmapObjectBuffer", "glUnmapObjectBufferATI", nullptr, nullptr, &pglUnmapObjectBuffer, buffer);}
extern "C" void APIENTRY glUnmapObjectBuffer(GLuint buffer) {return (*pglUnmapObjectBuffer)(buffer);}
static void wrap_glUnmapTexture2D(GLuint texture, GLint level);
static void (APIENTRYP pglUnmapTexture2D)(GLuint texture, GLint level) = wrap_glUnmapTexture2D;
static void wrap_glUnmapTexture2D(GLuint texture, GLint level) {return trampoline<void>("glUnmapTexture2D", "glUnmapTexture2DINTEL", nullptr, nullptr, &pglUnmapTexture2D, texture, level);}
extern "C" void APIENTRY glUnmapTexture2D(GLuint texture, GLint level) {return (*pglUnmapTexture2D)(texture, level);}
static void wrap_glUpdateObjectBuffer(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
static void (APIENTRYP pglUpdateObjectBuffer)(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) = wrap_glUpdateObjectBuffer;
static void wrap_glUpdateObjectBuffer(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) {return trampoline<void>("glUpdateObjectBuffer", "glUpdateObjectBufferATI", nullptr, nullptr, &pglUpdateObjectBuffer, buffer, offset, size, pointer, preserve);}
extern "C" void APIENTRY glUpdateObjectBuffer(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) {return (*pglUpdateObjectBuffer)(buffer, offset, size, pointer, preserve);}
static void wrap_glUseProgram(GLuint program);
static void (APIENTRYP pglUseProgram)(GLuint program) = wrap_glUseProgram;
static void wrap_glUseProgram(GLuint program) {return trampoline<void>("glUseProgram", nullptr, nullptr, nullptr, &pglUseProgram, program);}
extern "C" void APIENTRY glUseProgram(GLuint program) {return (*pglUseProgram)(program);}
static void wrap_glUseProgramObject(GLhandleARB programObj);
static void (APIENTRYP pglUseProgramObject)(GLhandleARB programObj) = wrap_glUseProgramObject;
static void wrap_glUseProgramObject(GLhandleARB programObj) {return trampoline<void>("glUseProgramObject", "glUseProgramObjectARB", nullptr, nullptr, &pglUseProgramObject, programObj);}
extern "C" void APIENTRY glUseProgramObject(GLhandleARB programObj) {return (*pglUseProgramObject)(programObj);}
static void wrap_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
static void (APIENTRYP pglUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program) = wrap_glUseProgramStages;
static void wrap_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {return trampoline<void>("glUseProgramStages", nullptr, nullptr, nullptr, &pglUseProgramStages, pipeline, stages, program);}
extern "C" void APIENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {return (*pglUseProgramStages)(pipeline, stages, program);}
static void wrap_glUseShaderProgram(GLenum type, GLuint program);
static void (APIENTRYP pglUseShaderProgram)(GLenum type, GLuint program) = wrap_glUseShaderProgram;
static void wrap_glUseShaderProgram(GLenum type, GLuint program) {return trampoline<void>("glUseShaderProgram", "glUseShaderProgramEXT", nullptr, nullptr, &pglUseShaderProgram, type, program);}
extern "C" void APIENTRY glUseShaderProgram(GLenum type, GLuint program) {return (*pglUseShaderProgram)(type, program);}
static void wrap_glVDPAUFini(void);
static void (APIENTRYP pglVDPAUFini)(void) = wrap_glVDPAUFini;
static void wrap_glVDPAUFini(void) {return trampoline<void>("glVDPAUFini", "glVDPAUFiniNV", nullptr, nullptr, &pglVDPAUFini);}
extern "C" void APIENTRY glVDPAUFini(void) {return (*pglVDPAUFini)();}
static void wrap_glVDPAUGetSurfaceiv(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
static void (APIENTRYP pglVDPAUGetSurfaceiv)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) = wrap_glVDPAUGetSurfaceiv;
static void wrap_glVDPAUGetSurfaceiv(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {return trampoline<void>("glVDPAUGetSurfaceiv", "glVDPAUGetSurfaceivNV", nullptr, nullptr, &pglVDPAUGetSurfaceiv, surface, pname, bufSize, length, values);}
extern "C" void APIENTRY glVDPAUGetSurfaceiv(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {return (*pglVDPAUGetSurfaceiv)(surface, pname, bufSize, length, values);}
static void wrap_glVDPAUInit(const void *vdpDevice, const void *getProcAddress);
static void (APIENTRYP pglVDPAUInit)(const void *vdpDevice, const void *getProcAddress) = wrap_glVDPAUInit;
static void wrap_glVDPAUInit(const void *vdpDevice, const void *getProcAddress) {return trampoline<void>("glVDPAUInit", "glVDPAUInitNV", nullptr, nullptr, &pglVDPAUInit, vdpDevice, getProcAddress);}
extern "C" void APIENTRY glVDPAUInit(const void *vdpDevice, const void *getProcAddress) {return (*pglVDPAUInit)(vdpDevice, getProcAddress);}
static GLboolean wrap_glVDPAUIsSurface(GLvdpauSurfaceNV surface);
static GLboolean (APIENTRYP pglVDPAUIsSurface)(GLvdpauSurfaceNV surface) = wrap_glVDPAUIsSurface;
static GLboolean wrap_glVDPAUIsSurface(GLvdpauSurfaceNV surface) {return trampoline<GLboolean>("glVDPAUIsSurface", "glVDPAUIsSurfaceNV", nullptr, nullptr, &pglVDPAUIsSurface, surface);}
extern "C" GLboolean APIENTRY glVDPAUIsSurface(GLvdpauSurfaceNV surface) {return (*pglVDPAUIsSurface)(surface);}
static void wrap_glVDPAUMapSurfaces(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
static void (APIENTRYP pglVDPAUMapSurfaces)(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) = wrap_glVDPAUMapSurfaces;
static void wrap_glVDPAUMapSurfaces(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) {return trampoline<void>("glVDPAUMapSurfaces", "glVDPAUMapSurfacesNV", nullptr, nullptr, &pglVDPAUMapSurfaces, numSurfaces, surfaces);}
extern "C" void APIENTRY glVDPAUMapSurfaces(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) {return (*pglVDPAUMapSurfaces)(numSurfaces, surfaces);}
static GLvdpauSurfaceNV wrap_glVDPAURegisterOutputSurface(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
static GLvdpauSurfaceNV (APIENTRYP pglVDPAURegisterOutputSurface)(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) = wrap_glVDPAURegisterOutputSurface;
static GLvdpauSurfaceNV wrap_glVDPAURegisterOutputSurface(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {return trampoline<GLvdpauSurfaceNV>("glVDPAURegisterOutputSurface", "glVDPAURegisterOutputSurfaceNV", nullptr, nullptr, &pglVDPAURegisterOutputSurface, vdpSurface, target, numTextureNames, textureNames);}
extern "C" GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurface(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {return (*pglVDPAURegisterOutputSurface)(vdpSurface, target, numTextureNames, textureNames);}
static GLvdpauSurfaceNV wrap_glVDPAURegisterVideoSurface(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
static GLvdpauSurfaceNV (APIENTRYP pglVDPAURegisterVideoSurface)(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) = wrap_glVDPAURegisterVideoSurface;
static GLvdpauSurfaceNV wrap_glVDPAURegisterVideoSurface(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {return trampoline<GLvdpauSurfaceNV>("glVDPAURegisterVideoSurface", "glVDPAURegisterVideoSurfaceNV", nullptr, nullptr, &pglVDPAURegisterVideoSurface, vdpSurface, target, numTextureNames, textureNames);}
extern "C" GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurface(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {return (*pglVDPAURegisterVideoSurface)(vdpSurface, target, numTextureNames, textureNames);}
static void wrap_glVDPAUSurfaceAccess(GLvdpauSurfaceNV surface, GLenum access);
static void (APIENTRYP pglVDPAUSurfaceAccess)(GLvdpauSurfaceNV surface, GLenum access) = wrap_glVDPAUSurfaceAccess;
static void wrap_glVDPAUSurfaceAccess(GLvdpauSurfaceNV surface, GLenum access) {return trampoline<void>("glVDPAUSurfaceAccess", "glVDPAUSurfaceAccessNV", nullptr, nullptr, &pglVDPAUSurfaceAccess, surface, access);}
extern "C" void APIENTRY glVDPAUSurfaceAccess(GLvdpauSurfaceNV surface, GLenum access) {return (*pglVDPAUSurfaceAccess)(surface, access);}
static void wrap_glVDPAUUnmapSurfaces(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
static void (APIENTRYP pglVDPAUUnmapSurfaces)(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) = wrap_glVDPAUUnmapSurfaces;
static void wrap_glVDPAUUnmapSurfaces(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) {return trampoline<void>("glVDPAUUnmapSurfaces", "glVDPAUUnmapSurfacesNV", nullptr, nullptr, &pglVDPAUUnmapSurfaces, numSurface, surfaces);}
extern "C" void APIENTRY glVDPAUUnmapSurfaces(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) {return (*pglVDPAUUnmapSurfaces)(numSurface, surfaces);}
static void wrap_glVDPAUUnregisterSurface(GLvdpauSurfaceNV surface);
static void (APIENTRYP pglVDPAUUnregisterSurface)(GLvdpauSurfaceNV surface) = wrap_glVDPAUUnregisterSurface;
static void wrap_glVDPAUUnregisterSurface(GLvdpauSurfaceNV surface) {return trampoline<void>("glVDPAUUnregisterSurface", "glVDPAUUnregisterSurfaceNV", nullptr, nullptr, &pglVDPAUUnregisterSurface, surface);}
extern "C" void APIENTRY glVDPAUUnregisterSurface(GLvdpauSurfaceNV surface) {return (*pglVDPAUUnregisterSurface)(surface);}
static void wrap_glValidateProgram(GLuint program);
static void (APIENTRYP pglValidateProgram)(GLuint program) = wrap_glValidateProgram;
static void wrap_glValidateProgram(GLuint program) {return trampoline<void>("glValidateProgram", "glValidateProgramARB", nullptr, nullptr, &pglValidateProgram, program);}
extern "C" void APIENTRY glValidateProgram(GLuint program) {return (*pglValidateProgram)(program);}
static void wrap_glValidateProgramPipeline(GLuint pipeline);
static void (APIENTRYP pglValidateProgramPipeline)(GLuint pipeline) = wrap_glValidateProgramPipeline;
static void wrap_glValidateProgramPipeline(GLuint pipeline) {return trampoline<void>("glValidateProgramPipeline", nullptr, nullptr, nullptr, &pglValidateProgramPipeline, pipeline);}
extern "C" void APIENTRY glValidateProgramPipeline(GLuint pipeline) {return (*pglValidateProgramPipeline)(pipeline);}
static void wrap_glVariantArrayObject(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
static void (APIENTRYP pglVariantArrayObject)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) = wrap_glVariantArrayObject;
static void wrap_glVariantArrayObject(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {return trampoline<void>("glVariantArrayObject", "glVariantArrayObjectATI", nullptr, nullptr, &pglVariantArrayObject, id, type, stride, buffer, offset);}
extern "C" void APIENTRY glVariantArrayObject(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {return (*pglVariantArrayObject)(id, type, stride, buffer, offset);}
static void wrap_glVariantPointer(GLuint id, GLenum type, GLuint stride, const void *addr);
static void (APIENTRYP pglVariantPointer)(GLuint id, GLenum type, GLuint stride, const void *addr) = wrap_glVariantPointer;
static void wrap_glVariantPointer(GLuint id, GLenum type, GLuint stride, const void *addr) {return trampoline<void>("glVariantPointer", "glVariantPointerEXT", nullptr, nullptr, &pglVariantPointer, id, type, stride, addr);}
extern "C" void APIENTRY glVariantPointer(GLuint id, GLenum type, GLuint stride, const void *addr) {return (*pglVariantPointer)(id, type, stride, addr);}
static void wrap_glVariantbv(GLuint id, const GLbyte *addr);
static void (APIENTRYP pglVariantbv)(GLuint id, const GLbyte *addr) = wrap_glVariantbv;
static void wrap_glVariantbv(GLuint id, const GLbyte *addr) {return trampoline<void>("glVariantbv", "glVariantbvEXT", nullptr, nullptr, &pglVariantbv, id, addr);}
extern "C" void APIENTRY glVariantbv(GLuint id, const GLbyte *addr) {return (*pglVariantbv)(id, addr);}
static void wrap_glVariantdv(GLuint id, const GLdouble *addr);
static void (APIENTRYP pglVariantdv)(GLuint id, const GLdouble *addr) = wrap_glVariantdv;
static void wrap_glVariantdv(GLuint id, const GLdouble *addr) {return trampoline<void>("glVariantdv", "glVariantdvEXT", nullptr, nullptr, &pglVariantdv, id, addr);}
extern "C" void APIENTRY glVariantdv(GLuint id, const GLdouble *addr) {return (*pglVariantdv)(id, addr);}
static void wrap_glVariantfv(GLuint id, const GLfloat *addr);
static void (APIENTRYP pglVariantfv)(GLuint id, const GLfloat *addr) = wrap_glVariantfv;
static void wrap_glVariantfv(GLuint id, const GLfloat *addr) {return trampoline<void>("glVariantfv", "glVariantfvEXT", nullptr, nullptr, &pglVariantfv, id, addr);}
extern "C" void APIENTRY glVariantfv(GLuint id, const GLfloat *addr) {return (*pglVariantfv)(id, addr);}
static void wrap_glVariantiv(GLuint id, const GLint *addr);
static void (APIENTRYP pglVariantiv)(GLuint id, const GLint *addr) = wrap_glVariantiv;
static void wrap_glVariantiv(GLuint id, const GLint *addr) {return trampoline<void>("glVariantiv", "glVariantivEXT", nullptr, nullptr, &pglVariantiv, id, addr);}
extern "C" void APIENTRY glVariantiv(GLuint id, const GLint *addr) {return (*pglVariantiv)(id, addr);}
static void wrap_glVariantsv(GLuint id, const GLshort *addr);
static void (APIENTRYP pglVariantsv)(GLuint id, const GLshort *addr) = wrap_glVariantsv;
static void wrap_glVariantsv(GLuint id, const GLshort *addr) {return trampoline<void>("glVariantsv", "glVariantsvEXT", nullptr, nullptr, &pglVariantsv, id, addr);}
extern "C" void APIENTRY glVariantsv(GLuint id, const GLshort *addr) {return (*pglVariantsv)(id, addr);}
static void wrap_glVariantubv(GLuint id, const GLubyte *addr);
static void (APIENTRYP pglVariantubv)(GLuint id, const GLubyte *addr) = wrap_glVariantubv;
static void wrap_glVariantubv(GLuint id, const GLubyte *addr) {return trampoline<void>("glVariantubv", "glVariantubvEXT", nullptr, nullptr, &pglVariantubv, id, addr);}
extern "C" void APIENTRY glVariantubv(GLuint id, const GLubyte *addr) {return (*pglVariantubv)(id, addr);}
static void wrap_glVariantuiv(GLuint id, const GLuint *addr);
static void (APIENTRYP pglVariantuiv)(GLuint id, const GLuint *addr) = wrap_glVariantuiv;
static void wrap_glVariantuiv(GLuint id, const GLuint *addr) {return trampoline<void>("glVariantuiv", "glVariantuivEXT", nullptr, nullptr, &pglVariantuiv, id, addr);}
extern "C" void APIENTRY glVariantuiv(GLuint id, const GLuint *addr) {return (*pglVariantuiv)(id, addr);}
static void wrap_glVariantusv(GLuint id, const GLushort *addr);
static void (APIENTRYP pglVariantusv)(GLuint id, const GLushort *addr) = wrap_glVariantusv;
static void wrap_glVariantusv(GLuint id, const GLushort *addr) {return trampoline<void>("glVariantusv", "glVariantusvEXT", nullptr, nullptr, &pglVariantusv, id, addr);}
extern "C" void APIENTRY glVariantusv(GLuint id, const GLushort *addr) {return (*pglVariantusv)(id, addr);}
static void wrap_glVertex2b(GLbyte x, GLbyte y);
static void (APIENTRYP pglVertex2b)(GLbyte x, GLbyte y) = wrap_glVertex2b;
static void wrap_glVertex2b(GLbyte x, GLbyte y) {return trampoline<void>("glVertex2b", "glVertex2bOES", nullptr, nullptr, &pglVertex2b, x, y);}
extern "C" void APIENTRY glVertex2b(GLbyte x, GLbyte y) {return (*pglVertex2b)(x, y);}
static void wrap_glVertex2bv(const GLbyte *coords);
static void (APIENTRYP pglVertex2bv)(const GLbyte *coords) = wrap_glVertex2bv;
static void wrap_glVertex2bv(const GLbyte *coords) {return trampoline<void>("glVertex2bv", "glVertex2bvOES", nullptr, nullptr, &pglVertex2bv, coords);}
extern "C" void APIENTRY glVertex2bv(const GLbyte *coords) {return (*pglVertex2bv)(coords);}
static void wrap_glVertex2d(GLdouble x, GLdouble y);
static void (APIENTRYP pglVertex2d)(GLdouble x, GLdouble y) = wrap_glVertex2d;
static void wrap_glVertex2d(GLdouble x, GLdouble y) {return trampoline<void>("glVertex2d", nullptr, nullptr, nullptr, &pglVertex2d, x, y);}
extern "C" void APIENTRY glVertex2d(GLdouble x, GLdouble y) {return (*pglVertex2d)(x, y);}
static void wrap_glVertex2dv(const GLdouble *v);
static void (APIENTRYP pglVertex2dv)(const GLdouble *v) = wrap_glVertex2dv;
static void wrap_glVertex2dv(const GLdouble *v) {return trampoline<void>("glVertex2dv", nullptr, nullptr, nullptr, &pglVertex2dv, v);}
extern "C" void APIENTRY glVertex2dv(const GLdouble *v) {return (*pglVertex2dv)(v);}
static void wrap_glVertex2f(GLfloat x, GLfloat y);
static void (APIENTRYP pglVertex2f)(GLfloat x, GLfloat y) = wrap_glVertex2f;
static void wrap_glVertex2f(GLfloat x, GLfloat y) {return trampoline<void>("glVertex2f", nullptr, nullptr, nullptr, &pglVertex2f, x, y);}
extern "C" void APIENTRY glVertex2f(GLfloat x, GLfloat y) {return (*pglVertex2f)(x, y);}
static void wrap_glVertex2fv(const GLfloat *v);
static void (APIENTRYP pglVertex2fv)(const GLfloat *v) = wrap_glVertex2fv;
static void wrap_glVertex2fv(const GLfloat *v) {return trampoline<void>("glVertex2fv", nullptr, nullptr, nullptr, &pglVertex2fv, v);}
extern "C" void APIENTRY glVertex2fv(const GLfloat *v) {return (*pglVertex2fv)(v);}
static void wrap_glVertex2h(GLhalfNV x, GLhalfNV y);
static void (APIENTRYP pglVertex2h)(GLhalfNV x, GLhalfNV y) = wrap_glVertex2h;
static void wrap_glVertex2h(GLhalfNV x, GLhalfNV y) {return trampoline<void>("glVertex2h", "glVertex2hNV", nullptr, nullptr, &pglVertex2h, x, y);}
extern "C" void APIENTRY glVertex2h(GLhalfNV x, GLhalfNV y) {return (*pglVertex2h)(x, y);}
static void wrap_glVertex2hv(const GLhalfNV *v);
static void (APIENTRYP pglVertex2hv)(const GLhalfNV *v) = wrap_glVertex2hv;
static void wrap_glVertex2hv(const GLhalfNV *v) {return trampoline<void>("glVertex2hv", "glVertex2hvNV", nullptr, nullptr, &pglVertex2hv, v);}
extern "C" void APIENTRY glVertex2hv(const GLhalfNV *v) {return (*pglVertex2hv)(v);}
static void wrap_glVertex2i(GLint x, GLint y);
static void (APIENTRYP pglVertex2i)(GLint x, GLint y) = wrap_glVertex2i;
static void wrap_glVertex2i(GLint x, GLint y) {return trampoline<void>("glVertex2i", nullptr, nullptr, nullptr, &pglVertex2i, x, y);}
extern "C" void APIENTRY glVertex2i(GLint x, GLint y) {return (*pglVertex2i)(x, y);}
static void wrap_glVertex2iv(const GLint *v);
static void (APIENTRYP pglVertex2iv)(const GLint *v) = wrap_glVertex2iv;
static void wrap_glVertex2iv(const GLint *v) {return trampoline<void>("glVertex2iv", nullptr, nullptr, nullptr, &pglVertex2iv, v);}
extern "C" void APIENTRY glVertex2iv(const GLint *v) {return (*pglVertex2iv)(v);}
static void wrap_glVertex2s(GLshort x, GLshort y);
static void (APIENTRYP pglVertex2s)(GLshort x, GLshort y) = wrap_glVertex2s;
static void wrap_glVertex2s(GLshort x, GLshort y) {return trampoline<void>("glVertex2s", nullptr, nullptr, nullptr, &pglVertex2s, x, y);}
extern "C" void APIENTRY glVertex2s(GLshort x, GLshort y) {return (*pglVertex2s)(x, y);}
static void wrap_glVertex2sv(const GLshort *v);
static void (APIENTRYP pglVertex2sv)(const GLshort *v) = wrap_glVertex2sv;
static void wrap_glVertex2sv(const GLshort *v) {return trampoline<void>("glVertex2sv", nullptr, nullptr, nullptr, &pglVertex2sv, v);}
extern "C" void APIENTRY glVertex2sv(const GLshort *v) {return (*pglVertex2sv)(v);}
static void wrap_glVertex2x(GLfixed x);
static void (APIENTRYP pglVertex2x)(GLfixed x) = wrap_glVertex2x;
static void wrap_glVertex2x(GLfixed x) {return trampoline<void>("glVertex2x", "glVertex2xOES", nullptr, nullptr, &pglVertex2x, x);}
extern "C" void APIENTRY glVertex2x(GLfixed x) {return (*pglVertex2x)(x);}
static void wrap_glVertex2xv(const GLfixed *coords);
static void (APIENTRYP pglVertex2xv)(const GLfixed *coords) = wrap_glVertex2xv;
static void wrap_glVertex2xv(const GLfixed *coords) {return trampoline<void>("glVertex2xv", "glVertex2xvOES", nullptr, nullptr, &pglVertex2xv, coords);}
extern "C" void APIENTRY glVertex2xv(const GLfixed *coords) {return (*pglVertex2xv)(coords);}
static void wrap_glVertex3b(GLbyte x, GLbyte y, GLbyte z);
static void (APIENTRYP pglVertex3b)(GLbyte x, GLbyte y, GLbyte z) = wrap_glVertex3b;
static void wrap_glVertex3b(GLbyte x, GLbyte y, GLbyte z) {return trampoline<void>("glVertex3b", "glVertex3bOES", nullptr, nullptr, &pglVertex3b, x, y, z);}
extern "C" void APIENTRY glVertex3b(GLbyte x, GLbyte y, GLbyte z) {return (*pglVertex3b)(x, y, z);}
static void wrap_glVertex3bv(const GLbyte *coords);
static void (APIENTRYP pglVertex3bv)(const GLbyte *coords) = wrap_glVertex3bv;
static void wrap_glVertex3bv(const GLbyte *coords) {return trampoline<void>("glVertex3bv", "glVertex3bvOES", nullptr, nullptr, &pglVertex3bv, coords);}
extern "C" void APIENTRY glVertex3bv(const GLbyte *coords) {return (*pglVertex3bv)(coords);}
static void wrap_glVertex3d(GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglVertex3d)(GLdouble x, GLdouble y, GLdouble z) = wrap_glVertex3d;
static void wrap_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glVertex3d", nullptr, nullptr, nullptr, &pglVertex3d, x, y, z);}
extern "C" void APIENTRY glVertex3d(GLdouble x, GLdouble y, GLdouble z) {return (*pglVertex3d)(x, y, z);}
static void wrap_glVertex3dv(const GLdouble *v);
static void (APIENTRYP pglVertex3dv)(const GLdouble *v) = wrap_glVertex3dv;
static void wrap_glVertex3dv(const GLdouble *v) {return trampoline<void>("glVertex3dv", nullptr, nullptr, nullptr, &pglVertex3dv, v);}
extern "C" void APIENTRY glVertex3dv(const GLdouble *v) {return (*pglVertex3dv)(v);}
static void wrap_glVertex3f(GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglVertex3f)(GLfloat x, GLfloat y, GLfloat z) = wrap_glVertex3f;
static void wrap_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glVertex3f", nullptr, nullptr, nullptr, &pglVertex3f, x, y, z);}
extern "C" void APIENTRY glVertex3f(GLfloat x, GLfloat y, GLfloat z) {return (*pglVertex3f)(x, y, z);}
static void wrap_glVertex3fv(const GLfloat *v);
static void (APIENTRYP pglVertex3fv)(const GLfloat *v) = wrap_glVertex3fv;
static void wrap_glVertex3fv(const GLfloat *v) {return trampoline<void>("glVertex3fv", nullptr, nullptr, nullptr, &pglVertex3fv, v);}
extern "C" void APIENTRY glVertex3fv(const GLfloat *v) {return (*pglVertex3fv)(v);}
static void wrap_glVertex3h(GLhalfNV x, GLhalfNV y, GLhalfNV z);
static void (APIENTRYP pglVertex3h)(GLhalfNV x, GLhalfNV y, GLhalfNV z) = wrap_glVertex3h;
static void wrap_glVertex3h(GLhalfNV x, GLhalfNV y, GLhalfNV z) {return trampoline<void>("glVertex3h", "glVertex3hNV", nullptr, nullptr, &pglVertex3h, x, y, z);}
extern "C" void APIENTRY glVertex3h(GLhalfNV x, GLhalfNV y, GLhalfNV z) {return (*pglVertex3h)(x, y, z);}
static void wrap_glVertex3hv(const GLhalfNV *v);
static void (APIENTRYP pglVertex3hv)(const GLhalfNV *v) = wrap_glVertex3hv;
static void wrap_glVertex3hv(const GLhalfNV *v) {return trampoline<void>("glVertex3hv", "glVertex3hvNV", nullptr, nullptr, &pglVertex3hv, v);}
extern "C" void APIENTRY glVertex3hv(const GLhalfNV *v) {return (*pglVertex3hv)(v);}
static void wrap_glVertex3i(GLint x, GLint y, GLint z);
static void (APIENTRYP pglVertex3i)(GLint x, GLint y, GLint z) = wrap_glVertex3i;
static void wrap_glVertex3i(GLint x, GLint y, GLint z) {return trampoline<void>("glVertex3i", nullptr, nullptr, nullptr, &pglVertex3i, x, y, z);}
extern "C" void APIENTRY glVertex3i(GLint x, GLint y, GLint z) {return (*pglVertex3i)(x, y, z);}
static void wrap_glVertex3iv(const GLint *v);
static void (APIENTRYP pglVertex3iv)(const GLint *v) = wrap_glVertex3iv;
static void wrap_glVertex3iv(const GLint *v) {return trampoline<void>("glVertex3iv", nullptr, nullptr, nullptr, &pglVertex3iv, v);}
extern "C" void APIENTRY glVertex3iv(const GLint *v) {return (*pglVertex3iv)(v);}
static void wrap_glVertex3s(GLshort x, GLshort y, GLshort z);
static void (APIENTRYP pglVertex3s)(GLshort x, GLshort y, GLshort z) = wrap_glVertex3s;
static void wrap_glVertex3s(GLshort x, GLshort y, GLshort z) {return trampoline<void>("glVertex3s", nullptr, nullptr, nullptr, &pglVertex3s, x, y, z);}
extern "C" void APIENTRY glVertex3s(GLshort x, GLshort y, GLshort z) {return (*pglVertex3s)(x, y, z);}
static void wrap_glVertex3sv(const GLshort *v);
static void (APIENTRYP pglVertex3sv)(const GLshort *v) = wrap_glVertex3sv;
static void wrap_glVertex3sv(const GLshort *v) {return trampoline<void>("glVertex3sv", nullptr, nullptr, nullptr, &pglVertex3sv, v);}
extern "C" void APIENTRY glVertex3sv(const GLshort *v) {return (*pglVertex3sv)(v);}
static void wrap_glVertex3x(GLfixed x, GLfixed y);
static void (APIENTRYP pglVertex3x)(GLfixed x, GLfixed y) = wrap_glVertex3x;
static void wrap_glVertex3x(GLfixed x, GLfixed y) {return trampoline<void>("glVertex3x", "glVertex3xOES", nullptr, nullptr, &pglVertex3x, x, y);}
extern "C" void APIENTRY glVertex3x(GLfixed x, GLfixed y) {return (*pglVertex3x)(x, y);}
static void wrap_glVertex3xv(const GLfixed *coords);
static void (APIENTRYP pglVertex3xv)(const GLfixed *coords) = wrap_glVertex3xv;
static void wrap_glVertex3xv(const GLfixed *coords) {return trampoline<void>("glVertex3xv", "glVertex3xvOES", nullptr, nullptr, &pglVertex3xv, coords);}
extern "C" void APIENTRY glVertex3xv(const GLfixed *coords) {return (*pglVertex3xv)(coords);}
static void wrap_glVertex4b(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
static void (APIENTRYP pglVertex4b)(GLbyte x, GLbyte y, GLbyte z, GLbyte w) = wrap_glVertex4b;
static void wrap_glVertex4b(GLbyte x, GLbyte y, GLbyte z, GLbyte w) {return trampoline<void>("glVertex4b", "glVertex4bOES", nullptr, nullptr, &pglVertex4b, x, y, z, w);}
extern "C" void APIENTRY glVertex4b(GLbyte x, GLbyte y, GLbyte z, GLbyte w) {return (*pglVertex4b)(x, y, z, w);}
static void wrap_glVertex4bv(const GLbyte *coords);
static void (APIENTRYP pglVertex4bv)(const GLbyte *coords) = wrap_glVertex4bv;
static void wrap_glVertex4bv(const GLbyte *coords) {return trampoline<void>("glVertex4bv", "glVertex4bvOES", nullptr, nullptr, &pglVertex4bv, coords);}
extern "C" void APIENTRY glVertex4bv(const GLbyte *coords) {return (*pglVertex4bv)(coords);}
static void wrap_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glVertex4d;
static void wrap_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glVertex4d", nullptr, nullptr, nullptr, &pglVertex4d, x, y, z, w);}
extern "C" void APIENTRY glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglVertex4d)(x, y, z, w);}
static void wrap_glVertex4dv(const GLdouble *v);
static void (APIENTRYP pglVertex4dv)(const GLdouble *v) = wrap_glVertex4dv;
static void wrap_glVertex4dv(const GLdouble *v) {return trampoline<void>("glVertex4dv", nullptr, nullptr, nullptr, &pglVertex4dv, v);}
extern "C" void APIENTRY glVertex4dv(const GLdouble *v) {return (*pglVertex4dv)(v);}
static void wrap_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glVertex4f;
static void wrap_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glVertex4f", nullptr, nullptr, nullptr, &pglVertex4f, x, y, z, w);}
extern "C" void APIENTRY glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglVertex4f)(x, y, z, w);}
static void wrap_glVertex4fv(const GLfloat *v);
static void (APIENTRYP pglVertex4fv)(const GLfloat *v) = wrap_glVertex4fv;
static void wrap_glVertex4fv(const GLfloat *v) {return trampoline<void>("glVertex4fv", nullptr, nullptr, nullptr, &pglVertex4fv, v);}
extern "C" void APIENTRY glVertex4fv(const GLfloat *v) {return (*pglVertex4fv)(v);}
static void wrap_glVertex4h(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
static void (APIENTRYP pglVertex4h)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) = wrap_glVertex4h;
static void wrap_glVertex4h(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {return trampoline<void>("glVertex4h", "glVertex4hNV", nullptr, nullptr, &pglVertex4h, x, y, z, w);}
extern "C" void APIENTRY glVertex4h(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {return (*pglVertex4h)(x, y, z, w);}
static void wrap_glVertex4hv(const GLhalfNV *v);
static void (APIENTRYP pglVertex4hv)(const GLhalfNV *v) = wrap_glVertex4hv;
static void wrap_glVertex4hv(const GLhalfNV *v) {return trampoline<void>("glVertex4hv", "glVertex4hvNV", nullptr, nullptr, &pglVertex4hv, v);}
extern "C" void APIENTRY glVertex4hv(const GLhalfNV *v) {return (*pglVertex4hv)(v);}
static void wrap_glVertex4i(GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglVertex4i)(GLint x, GLint y, GLint z, GLint w) = wrap_glVertex4i;
static void wrap_glVertex4i(GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glVertex4i", nullptr, nullptr, nullptr, &pglVertex4i, x, y, z, w);}
extern "C" void APIENTRY glVertex4i(GLint x, GLint y, GLint z, GLint w) {return (*pglVertex4i)(x, y, z, w);}
static void wrap_glVertex4iv(const GLint *v);
static void (APIENTRYP pglVertex4iv)(const GLint *v) = wrap_glVertex4iv;
static void wrap_glVertex4iv(const GLint *v) {return trampoline<void>("glVertex4iv", nullptr, nullptr, nullptr, &pglVertex4iv, v);}
extern "C" void APIENTRY glVertex4iv(const GLint *v) {return (*pglVertex4iv)(v);}
static void wrap_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
static void (APIENTRYP pglVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w) = wrap_glVertex4s;
static void wrap_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {return trampoline<void>("glVertex4s", nullptr, nullptr, nullptr, &pglVertex4s, x, y, z, w);}
extern "C" void APIENTRY glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {return (*pglVertex4s)(x, y, z, w);}
static void wrap_glVertex4sv(const GLshort *v);
static void (APIENTRYP pglVertex4sv)(const GLshort *v) = wrap_glVertex4sv;
static void wrap_glVertex4sv(const GLshort *v) {return trampoline<void>("glVertex4sv", nullptr, nullptr, nullptr, &pglVertex4sv, v);}
extern "C" void APIENTRY glVertex4sv(const GLshort *v) {return (*pglVertex4sv)(v);}
static void wrap_glVertex4x(GLfixed x, GLfixed y, GLfixed z);
static void (APIENTRYP pglVertex4x)(GLfixed x, GLfixed y, GLfixed z) = wrap_glVertex4x;
static void wrap_glVertex4x(GLfixed x, GLfixed y, GLfixed z) {return trampoline<void>("glVertex4x", "glVertex4xOES", nullptr, nullptr, &pglVertex4x, x, y, z);}
extern "C" void APIENTRY glVertex4x(GLfixed x, GLfixed y, GLfixed z) {return (*pglVertex4x)(x, y, z);}
static void wrap_glVertex4xv(const GLfixed *coords);
static void (APIENTRYP pglVertex4xv)(const GLfixed *coords) = wrap_glVertex4xv;
static void wrap_glVertex4xv(const GLfixed *coords) {return trampoline<void>("glVertex4xv", "glVertex4xvOES", nullptr, nullptr, &pglVertex4xv, coords);}
extern "C" void APIENTRY glVertex4xv(const GLfixed *coords) {return (*pglVertex4xv)(coords);}
static void wrap_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
static void (APIENTRYP pglVertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex) = wrap_glVertexArrayAttribBinding;
static void wrap_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {return trampoline<void>("glVertexArrayAttribBinding", nullptr, nullptr, nullptr, &pglVertexArrayAttribBinding, vaobj, attribindex, bindingindex);}
extern "C" void APIENTRY glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {return (*pglVertexArrayAttribBinding)(vaobj, attribindex, bindingindex);}
static void wrap_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
static void (APIENTRYP pglVertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = wrap_glVertexArrayAttribFormat;
static void wrap_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {return trampoline<void>("glVertexArrayAttribFormat", nullptr, nullptr, nullptr, &pglVertexArrayAttribFormat, vaobj, attribindex, size, type, normalized, relativeoffset);}
extern "C" void APIENTRY glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {return (*pglVertexArrayAttribFormat)(vaobj, attribindex, size, type, normalized, relativeoffset);}
static void wrap_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
static void (APIENTRYP pglVertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = wrap_glVertexArrayAttribIFormat;
static void wrap_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return trampoline<void>("glVertexArrayAttribIFormat", nullptr, nullptr, nullptr, &pglVertexArrayAttribIFormat, vaobj, attribindex, size, type, relativeoffset);}
extern "C" void APIENTRY glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return (*pglVertexArrayAttribIFormat)(vaobj, attribindex, size, type, relativeoffset);}
static void wrap_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
static void (APIENTRYP pglVertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = wrap_glVertexArrayAttribLFormat;
static void wrap_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return trampoline<void>("glVertexArrayAttribLFormat", nullptr, nullptr, nullptr, &pglVertexArrayAttribLFormat, vaobj, attribindex, size, type, relativeoffset);}
extern "C" void APIENTRY glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return (*pglVertexArrayAttribLFormat)(vaobj, attribindex, size, type, relativeoffset);}
static void wrap_glVertexArrayBindVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
static void (APIENTRYP pglVertexArrayBindVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = wrap_glVertexArrayBindVertexBuffer;
static void wrap_glVertexArrayBindVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {return trampoline<void>("glVertexArrayBindVertexBuffer", "glVertexArrayBindVertexBufferEXT", nullptr, nullptr, &pglVertexArrayBindVertexBuffer, vaobj, bindingindex, buffer, offset, stride);}
extern "C" void APIENTRY glVertexArrayBindVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {return (*pglVertexArrayBindVertexBuffer)(vaobj, bindingindex, buffer, offset, stride);}
static void wrap_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
static void (APIENTRYP pglVertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor) = wrap_glVertexArrayBindingDivisor;
static void wrap_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {return trampoline<void>("glVertexArrayBindingDivisor", nullptr, nullptr, nullptr, &pglVertexArrayBindingDivisor, vaobj, bindingindex, divisor);}
extern "C" void APIENTRY glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {return (*pglVertexArrayBindingDivisor)(vaobj, bindingindex, divisor);}
static void wrap_glVertexArrayColorOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayColorOffset)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayColorOffset;
static void wrap_glVertexArrayColorOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayColorOffset", "glVertexArrayColorOffsetEXT", nullptr, nullptr, &pglVertexArrayColorOffset, vaobj, buffer, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayColorOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayColorOffset)(vaobj, buffer, size, type, stride, offset);}
static void wrap_glVertexArrayEdgeFlagOffset(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayEdgeFlagOffset)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) = wrap_glVertexArrayEdgeFlagOffset;
static void wrap_glVertexArrayEdgeFlagOffset(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayEdgeFlagOffset", "glVertexArrayEdgeFlagOffsetEXT", nullptr, nullptr, &pglVertexArrayEdgeFlagOffset, vaobj, buffer, stride, offset);}
extern "C" void APIENTRY glVertexArrayEdgeFlagOffset(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {return (*pglVertexArrayEdgeFlagOffset)(vaobj, buffer, stride, offset);}
static void wrap_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
static void (APIENTRYP pglVertexArrayElementBuffer)(GLuint vaobj, GLuint buffer) = wrap_glVertexArrayElementBuffer;
static void wrap_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {return trampoline<void>("glVertexArrayElementBuffer", nullptr, nullptr, nullptr, &pglVertexArrayElementBuffer, vaobj, buffer);}
extern "C" void APIENTRY glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {return (*pglVertexArrayElementBuffer)(vaobj, buffer);}
static void wrap_glVertexArrayFogCoordOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayFogCoordOffset)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayFogCoordOffset;
static void wrap_glVertexArrayFogCoordOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayFogCoordOffset", "glVertexArrayFogCoordOffsetEXT", nullptr, nullptr, &pglVertexArrayFogCoordOffset, vaobj, buffer, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayFogCoordOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayFogCoordOffset)(vaobj, buffer, type, stride, offset);}
static void wrap_glVertexArrayIndexOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayIndexOffset)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayIndexOffset;
static void wrap_glVertexArrayIndexOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayIndexOffset", "glVertexArrayIndexOffsetEXT", nullptr, nullptr, &pglVertexArrayIndexOffset, vaobj, buffer, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayIndexOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayIndexOffset)(vaobj, buffer, type, stride, offset);}
static void wrap_glVertexArrayMultiTexCoordOffset(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayMultiTexCoordOffset)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayMultiTexCoordOffset;
static void wrap_glVertexArrayMultiTexCoordOffset(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayMultiTexCoordOffset", "glVertexArrayMultiTexCoordOffsetEXT", nullptr, nullptr, &pglVertexArrayMultiTexCoordOffset, vaobj, buffer, texunit, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayMultiTexCoordOffset(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayMultiTexCoordOffset)(vaobj, buffer, texunit, size, type, stride, offset);}
static void wrap_glVertexArrayNormalOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayNormalOffset)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayNormalOffset;
static void wrap_glVertexArrayNormalOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayNormalOffset", "glVertexArrayNormalOffsetEXT", nullptr, nullptr, &pglVertexArrayNormalOffset, vaobj, buffer, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayNormalOffset(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayNormalOffset)(vaobj, buffer, type, stride, offset);}
static void wrap_glVertexArrayParameteri(GLenum pname, GLint param);
static void (APIENTRYP pglVertexArrayParameteri)(GLenum pname, GLint param) = wrap_glVertexArrayParameteri;
static void wrap_glVertexArrayParameteri(GLenum pname, GLint param) {return trampoline<void>("glVertexArrayParameteri", "glVertexArrayParameteriAPPLE", nullptr, nullptr, &pglVertexArrayParameteri, pname, param);}
extern "C" void APIENTRY glVertexArrayParameteri(GLenum pname, GLint param) {return (*pglVertexArrayParameteri)(pname, param);}
static void wrap_glVertexArrayRange(GLsizei length, void *pointer);
static void (APIENTRYP pglVertexArrayRange)(GLsizei length, void *pointer) = wrap_glVertexArrayRange;
static void wrap_glVertexArrayRange(GLsizei length, void *pointer) {return trampoline<void>("glVertexArrayRange", "glVertexArrayRangeAPPLE", "glVertexArrayRangeNV", nullptr, &pglVertexArrayRange, length, pointer);}
extern "C" void APIENTRY glVertexArrayRange(GLsizei length, void *pointer) {return (*pglVertexArrayRange)(length, pointer);}
static void wrap_glVertexArraySecondaryColorOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArraySecondaryColorOffset)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArraySecondaryColorOffset;
static void wrap_glVertexArraySecondaryColorOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArraySecondaryColorOffset", "glVertexArraySecondaryColorOffsetEXT", nullptr, nullptr, &pglVertexArraySecondaryColorOffset, vaobj, buffer, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArraySecondaryColorOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArraySecondaryColorOffset)(vaobj, buffer, size, type, stride, offset);}
static void wrap_glVertexArrayTexCoordOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayTexCoordOffset)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayTexCoordOffset;
static void wrap_glVertexArrayTexCoordOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayTexCoordOffset", "glVertexArrayTexCoordOffsetEXT", nullptr, nullptr, &pglVertexArrayTexCoordOffset, vaobj, buffer, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayTexCoordOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayTexCoordOffset)(vaobj, buffer, size, type, stride, offset);}
static void wrap_glVertexArrayVertexAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
static void (APIENTRYP pglVertexArrayVertexAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex) = wrap_glVertexArrayVertexAttribBinding;
static void wrap_glVertexArrayVertexAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {return trampoline<void>("glVertexArrayVertexAttribBinding", "glVertexArrayVertexAttribBindingEXT", nullptr, nullptr, &pglVertexArrayVertexAttribBinding, vaobj, attribindex, bindingindex);}
extern "C" void APIENTRY glVertexArrayVertexAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {return (*pglVertexArrayVertexAttribBinding)(vaobj, attribindex, bindingindex);}
static void wrap_glVertexArrayVertexAttribDivisor(GLuint vaobj, GLuint index, GLuint divisor);
static void (APIENTRYP pglVertexArrayVertexAttribDivisor)(GLuint vaobj, GLuint index, GLuint divisor) = wrap_glVertexArrayVertexAttribDivisor;
static void wrap_glVertexArrayVertexAttribDivisor(GLuint vaobj, GLuint index, GLuint divisor) {return trampoline<void>("glVertexArrayVertexAttribDivisor", "glVertexArrayVertexAttribDivisorEXT", nullptr, nullptr, &pglVertexArrayVertexAttribDivisor, vaobj, index, divisor);}
extern "C" void APIENTRY glVertexArrayVertexAttribDivisor(GLuint vaobj, GLuint index, GLuint divisor) {return (*pglVertexArrayVertexAttribDivisor)(vaobj, index, divisor);}
static void wrap_glVertexArrayVertexAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
static void (APIENTRYP pglVertexArrayVertexAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = wrap_glVertexArrayVertexAttribFormat;
static void wrap_glVertexArrayVertexAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {return trampoline<void>("glVertexArrayVertexAttribFormat", "glVertexArrayVertexAttribFormatEXT", nullptr, nullptr, &pglVertexArrayVertexAttribFormat, vaobj, attribindex, size, type, normalized, relativeoffset);}
extern "C" void APIENTRY glVertexArrayVertexAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {return (*pglVertexArrayVertexAttribFormat)(vaobj, attribindex, size, type, normalized, relativeoffset);}
static void wrap_glVertexArrayVertexAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
static void (APIENTRYP pglVertexArrayVertexAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = wrap_glVertexArrayVertexAttribIFormat;
static void wrap_glVertexArrayVertexAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return trampoline<void>("glVertexArrayVertexAttribIFormat", "glVertexArrayVertexAttribIFormatEXT", nullptr, nullptr, &pglVertexArrayVertexAttribIFormat, vaobj, attribindex, size, type, relativeoffset);}
extern "C" void APIENTRY glVertexArrayVertexAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return (*pglVertexArrayVertexAttribIFormat)(vaobj, attribindex, size, type, relativeoffset);}
static void wrap_glVertexArrayVertexAttribIOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayVertexAttribIOffset)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayVertexAttribIOffset;
static void wrap_glVertexArrayVertexAttribIOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayVertexAttribIOffset", "glVertexArrayVertexAttribIOffsetEXT", nullptr, nullptr, &pglVertexArrayVertexAttribIOffset, vaobj, buffer, index, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayVertexAttribIOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayVertexAttribIOffset)(vaobj, buffer, index, size, type, stride, offset);}
static void wrap_glVertexArrayVertexAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
static void (APIENTRYP pglVertexArrayVertexAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = wrap_glVertexArrayVertexAttribLFormat;
static void wrap_glVertexArrayVertexAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return trampoline<void>("glVertexArrayVertexAttribLFormat", "glVertexArrayVertexAttribLFormatEXT", nullptr, nullptr, &pglVertexArrayVertexAttribLFormat, vaobj, attribindex, size, type, relativeoffset);}
extern "C" void APIENTRY glVertexArrayVertexAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return (*pglVertexArrayVertexAttribLFormat)(vaobj, attribindex, size, type, relativeoffset);}
static void wrap_glVertexArrayVertexAttribLOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayVertexAttribLOffset)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayVertexAttribLOffset;
static void wrap_glVertexArrayVertexAttribLOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayVertexAttribLOffset", "glVertexArrayVertexAttribLOffsetEXT", nullptr, nullptr, &pglVertexArrayVertexAttribLOffset, vaobj, buffer, index, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayVertexAttribLOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayVertexAttribLOffset)(vaobj, buffer, index, size, type, stride, offset);}
static void wrap_glVertexArrayVertexAttribOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayVertexAttribOffset)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) = wrap_glVertexArrayVertexAttribOffset;
static void wrap_glVertexArrayVertexAttribOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayVertexAttribOffset", "glVertexArrayVertexAttribOffsetEXT", nullptr, nullptr, &pglVertexArrayVertexAttribOffset, vaobj, buffer, index, size, type, normalized, stride, offset);}
extern "C" void APIENTRY glVertexArrayVertexAttribOffset(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {return (*pglVertexArrayVertexAttribOffset)(vaobj, buffer, index, size, type, normalized, stride, offset);}
static void wrap_glVertexArrayVertexBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
static void (APIENTRYP pglVertexArrayVertexBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor) = wrap_glVertexArrayVertexBindingDivisor;
static void wrap_glVertexArrayVertexBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {return trampoline<void>("glVertexArrayVertexBindingDivisor", "glVertexArrayVertexBindingDivisorEXT", nullptr, nullptr, &pglVertexArrayVertexBindingDivisor, vaobj, bindingindex, divisor);}
extern "C" void APIENTRY glVertexArrayVertexBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {return (*pglVertexArrayVertexBindingDivisor)(vaobj, bindingindex, divisor);}
static void wrap_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
static void (APIENTRYP pglVertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = wrap_glVertexArrayVertexBuffer;
static void wrap_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {return trampoline<void>("glVertexArrayVertexBuffer", nullptr, nullptr, nullptr, &pglVertexArrayVertexBuffer, vaobj, bindingindex, buffer, offset, stride);}
extern "C" void APIENTRY glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {return (*pglVertexArrayVertexBuffer)(vaobj, bindingindex, buffer, offset, stride);}
static void wrap_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
static void (APIENTRYP pglVertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) = wrap_glVertexArrayVertexBuffers;
static void wrap_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {return trampoline<void>("glVertexArrayVertexBuffers", nullptr, nullptr, nullptr, &pglVertexArrayVertexBuffers, vaobj, first, count, buffers, offsets, strides);}
extern "C" void APIENTRY glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {return (*pglVertexArrayVertexBuffers)(vaobj, first, count, buffers, offsets, strides);}
static void wrap_glVertexArrayVertexOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
static void (APIENTRYP pglVertexArrayVertexOffset)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = wrap_glVertexArrayVertexOffset;
static void wrap_glVertexArrayVertexOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return trampoline<void>("glVertexArrayVertexOffset", "glVertexArrayVertexOffsetEXT", nullptr, nullptr, &pglVertexArrayVertexOffset, vaobj, buffer, size, type, stride, offset);}
extern "C" void APIENTRY glVertexArrayVertexOffset(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {return (*pglVertexArrayVertexOffset)(vaobj, buffer, size, type, stride, offset);}
static void wrap_glVertexAttrib1d(GLuint index, GLdouble x);
static void (APIENTRYP pglVertexAttrib1d)(GLuint index, GLdouble x) = wrap_glVertexAttrib1d;
static void wrap_glVertexAttrib1d(GLuint index, GLdouble x) {return trampoline<void>("glVertexAttrib1d", "glVertexAttrib1dARB", "glVertexAttrib1dNV", nullptr, &pglVertexAttrib1d, index, x);}
extern "C" void APIENTRY glVertexAttrib1d(GLuint index, GLdouble x) {return (*pglVertexAttrib1d)(index, x);}
static void wrap_glVertexAttrib1dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttrib1dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttrib1dv;
static void wrap_glVertexAttrib1dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttrib1dv", "glVertexAttrib1dvARB", "glVertexAttrib1dvNV", nullptr, &pglVertexAttrib1dv, index, v);}
extern "C" void APIENTRY glVertexAttrib1dv(GLuint index, const GLdouble *v) {return (*pglVertexAttrib1dv)(index, v);}
static void wrap_glVertexAttrib1f(GLuint index, GLfloat x);
static void (APIENTRYP pglVertexAttrib1f)(GLuint index, GLfloat x) = wrap_glVertexAttrib1f;
static void wrap_glVertexAttrib1f(GLuint index, GLfloat x) {return trampoline<void>("glVertexAttrib1f", "glVertexAttrib1fARB", "glVertexAttrib1fNV", nullptr, &pglVertexAttrib1f, index, x);}
extern "C" void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x) {return (*pglVertexAttrib1f)(index, x);}
static void wrap_glVertexAttrib1fv(GLuint index, const GLfloat *v);
static void (APIENTRYP pglVertexAttrib1fv)(GLuint index, const GLfloat *v) = wrap_glVertexAttrib1fv;
static void wrap_glVertexAttrib1fv(GLuint index, const GLfloat *v) {return trampoline<void>("glVertexAttrib1fv", "glVertexAttrib1fvARB", "glVertexAttrib1fvNV", nullptr, &pglVertexAttrib1fv, index, v);}
extern "C" void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v) {return (*pglVertexAttrib1fv)(index, v);}
static void wrap_glVertexAttrib1h(GLuint index, GLhalfNV x);
static void (APIENTRYP pglVertexAttrib1h)(GLuint index, GLhalfNV x) = wrap_glVertexAttrib1h;
static void wrap_glVertexAttrib1h(GLuint index, GLhalfNV x) {return trampoline<void>("glVertexAttrib1h", "glVertexAttrib1hNV", nullptr, nullptr, &pglVertexAttrib1h, index, x);}
extern "C" void APIENTRY glVertexAttrib1h(GLuint index, GLhalfNV x) {return (*pglVertexAttrib1h)(index, x);}
static void wrap_glVertexAttrib1hv(GLuint index, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttrib1hv)(GLuint index, const GLhalfNV *v) = wrap_glVertexAttrib1hv;
static void wrap_glVertexAttrib1hv(GLuint index, const GLhalfNV *v) {return trampoline<void>("glVertexAttrib1hv", "glVertexAttrib1hvNV", nullptr, nullptr, &pglVertexAttrib1hv, index, v);}
extern "C" void APIENTRY glVertexAttrib1hv(GLuint index, const GLhalfNV *v) {return (*pglVertexAttrib1hv)(index, v);}
static void wrap_glVertexAttrib1s(GLuint index, GLshort x);
static void (APIENTRYP pglVertexAttrib1s)(GLuint index, GLshort x) = wrap_glVertexAttrib1s;
static void wrap_glVertexAttrib1s(GLuint index, GLshort x) {return trampoline<void>("glVertexAttrib1s", "glVertexAttrib1sARB", "glVertexAttrib1sNV", nullptr, &pglVertexAttrib1s, index, x);}
extern "C" void APIENTRY glVertexAttrib1s(GLuint index, GLshort x) {return (*pglVertexAttrib1s)(index, x);}
static void wrap_glVertexAttrib1sv(GLuint index, const GLshort *v);
static void (APIENTRYP pglVertexAttrib1sv)(GLuint index, const GLshort *v) = wrap_glVertexAttrib1sv;
static void wrap_glVertexAttrib1sv(GLuint index, const GLshort *v) {return trampoline<void>("glVertexAttrib1sv", "glVertexAttrib1svARB", "glVertexAttrib1svNV", nullptr, &pglVertexAttrib1sv, index, v);}
extern "C" void APIENTRY glVertexAttrib1sv(GLuint index, const GLshort *v) {return (*pglVertexAttrib1sv)(index, v);}
static void wrap_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
static void (APIENTRYP pglVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y) = wrap_glVertexAttrib2d;
static void wrap_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {return trampoline<void>("glVertexAttrib2d", "glVertexAttrib2dARB", "glVertexAttrib2dNV", nullptr, &pglVertexAttrib2d, index, x, y);}
extern "C" void APIENTRY glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {return (*pglVertexAttrib2d)(index, x, y);}
static void wrap_glVertexAttrib2dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttrib2dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttrib2dv;
static void wrap_glVertexAttrib2dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttrib2dv", "glVertexAttrib2dvARB", "glVertexAttrib2dvNV", nullptr, &pglVertexAttrib2dv, index, v);}
extern "C" void APIENTRY glVertexAttrib2dv(GLuint index, const GLdouble *v) {return (*pglVertexAttrib2dv)(index, v);}
static void wrap_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
static void (APIENTRYP pglVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y) = wrap_glVertexAttrib2f;
static void wrap_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {return trampoline<void>("glVertexAttrib2f", "glVertexAttrib2fARB", "glVertexAttrib2fNV", nullptr, &pglVertexAttrib2f, index, x, y);}
extern "C" void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {return (*pglVertexAttrib2f)(index, x, y);}
static void wrap_glVertexAttrib2fv(GLuint index, const GLfloat *v);
static void (APIENTRYP pglVertexAttrib2fv)(GLuint index, const GLfloat *v) = wrap_glVertexAttrib2fv;
static void wrap_glVertexAttrib2fv(GLuint index, const GLfloat *v) {return trampoline<void>("glVertexAttrib2fv", "glVertexAttrib2fvARB", "glVertexAttrib2fvNV", nullptr, &pglVertexAttrib2fv, index, v);}
extern "C" void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v) {return (*pglVertexAttrib2fv)(index, v);}
static void wrap_glVertexAttrib2h(GLuint index, GLhalfNV x, GLhalfNV y);
static void (APIENTRYP pglVertexAttrib2h)(GLuint index, GLhalfNV x, GLhalfNV y) = wrap_glVertexAttrib2h;
static void wrap_glVertexAttrib2h(GLuint index, GLhalfNV x, GLhalfNV y) {return trampoline<void>("glVertexAttrib2h", "glVertexAttrib2hNV", nullptr, nullptr, &pglVertexAttrib2h, index, x, y);}
extern "C" void APIENTRY glVertexAttrib2h(GLuint index, GLhalfNV x, GLhalfNV y) {return (*pglVertexAttrib2h)(index, x, y);}
static void wrap_glVertexAttrib2hv(GLuint index, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttrib2hv)(GLuint index, const GLhalfNV *v) = wrap_glVertexAttrib2hv;
static void wrap_glVertexAttrib2hv(GLuint index, const GLhalfNV *v) {return trampoline<void>("glVertexAttrib2hv", "glVertexAttrib2hvNV", nullptr, nullptr, &pglVertexAttrib2hv, index, v);}
extern "C" void APIENTRY glVertexAttrib2hv(GLuint index, const GLhalfNV *v) {return (*pglVertexAttrib2hv)(index, v);}
static void wrap_glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
static void (APIENTRYP pglVertexAttrib2s)(GLuint index, GLshort x, GLshort y) = wrap_glVertexAttrib2s;
static void wrap_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {return trampoline<void>("glVertexAttrib2s", "glVertexAttrib2sARB", "glVertexAttrib2sNV", nullptr, &pglVertexAttrib2s, index, x, y);}
extern "C" void APIENTRY glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {return (*pglVertexAttrib2s)(index, x, y);}
static void wrap_glVertexAttrib2sv(GLuint index, const GLshort *v);
static void (APIENTRYP pglVertexAttrib2sv)(GLuint index, const GLshort *v) = wrap_glVertexAttrib2sv;
static void wrap_glVertexAttrib2sv(GLuint index, const GLshort *v) {return trampoline<void>("glVertexAttrib2sv", "glVertexAttrib2svARB", "glVertexAttrib2svNV", nullptr, &pglVertexAttrib2sv, index, v);}
extern "C" void APIENTRY glVertexAttrib2sv(GLuint index, const GLshort *v) {return (*pglVertexAttrib2sv)(index, v);}
static void wrap_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = wrap_glVertexAttrib3d;
static void wrap_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glVertexAttrib3d", "glVertexAttrib3dARB", "glVertexAttrib3dNV", nullptr, &pglVertexAttrib3d, index, x, y, z);}
extern "C" void APIENTRY glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {return (*pglVertexAttrib3d)(index, x, y, z);}
static void wrap_glVertexAttrib3dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttrib3dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttrib3dv;
static void wrap_glVertexAttrib3dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttrib3dv", "glVertexAttrib3dvARB", "glVertexAttrib3dvNV", nullptr, &pglVertexAttrib3dv, index, v);}
extern "C" void APIENTRY glVertexAttrib3dv(GLuint index, const GLdouble *v) {return (*pglVertexAttrib3dv)(index, v);}
static void wrap_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z) = wrap_glVertexAttrib3f;
static void wrap_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glVertexAttrib3f", "glVertexAttrib3fARB", "glVertexAttrib3fNV", nullptr, &pglVertexAttrib3f, index, x, y, z);}
extern "C" void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {return (*pglVertexAttrib3f)(index, x, y, z);}
static void wrap_glVertexAttrib3fv(GLuint index, const GLfloat *v);
static void (APIENTRYP pglVertexAttrib3fv)(GLuint index, const GLfloat *v) = wrap_glVertexAttrib3fv;
static void wrap_glVertexAttrib3fv(GLuint index, const GLfloat *v) {return trampoline<void>("glVertexAttrib3fv", "glVertexAttrib3fvARB", "glVertexAttrib3fvNV", nullptr, &pglVertexAttrib3fv, index, v);}
extern "C" void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v) {return (*pglVertexAttrib3fv)(index, v);}
static void wrap_glVertexAttrib3h(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
static void (APIENTRYP pglVertexAttrib3h)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) = wrap_glVertexAttrib3h;
static void wrap_glVertexAttrib3h(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {return trampoline<void>("glVertexAttrib3h", "glVertexAttrib3hNV", nullptr, nullptr, &pglVertexAttrib3h, index, x, y, z);}
extern "C" void APIENTRY glVertexAttrib3h(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {return (*pglVertexAttrib3h)(index, x, y, z);}
static void wrap_glVertexAttrib3hv(GLuint index, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttrib3hv)(GLuint index, const GLhalfNV *v) = wrap_glVertexAttrib3hv;
static void wrap_glVertexAttrib3hv(GLuint index, const GLhalfNV *v) {return trampoline<void>("glVertexAttrib3hv", "glVertexAttrib3hvNV", nullptr, nullptr, &pglVertexAttrib3hv, index, v);}
extern "C" void APIENTRY glVertexAttrib3hv(GLuint index, const GLhalfNV *v) {return (*pglVertexAttrib3hv)(index, v);}
static void wrap_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
static void (APIENTRYP pglVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z) = wrap_glVertexAttrib3s;
static void wrap_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {return trampoline<void>("glVertexAttrib3s", "glVertexAttrib3sARB", "glVertexAttrib3sNV", nullptr, &pglVertexAttrib3s, index, x, y, z);}
extern "C" void APIENTRY glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {return (*pglVertexAttrib3s)(index, x, y, z);}
static void wrap_glVertexAttrib3sv(GLuint index, const GLshort *v);
static void (APIENTRYP pglVertexAttrib3sv)(GLuint index, const GLshort *v) = wrap_glVertexAttrib3sv;
static void wrap_glVertexAttrib3sv(GLuint index, const GLshort *v) {return trampoline<void>("glVertexAttrib3sv", "glVertexAttrib3svARB", "glVertexAttrib3svNV", nullptr, &pglVertexAttrib3sv, index, v);}
extern "C" void APIENTRY glVertexAttrib3sv(GLuint index, const GLshort *v) {return (*pglVertexAttrib3sv)(index, v);}
static void wrap_glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
static void (APIENTRYP pglVertexAttrib4Nbv)(GLuint index, const GLbyte *v) = wrap_glVertexAttrib4Nbv;
static void wrap_glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {return trampoline<void>("glVertexAttrib4Nbv", "glVertexAttrib4NbvARB", nullptr, nullptr, &pglVertexAttrib4Nbv, index, v);}
extern "C" void APIENTRY glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {return (*pglVertexAttrib4Nbv)(index, v);}
static void wrap_glVertexAttrib4Niv(GLuint index, const GLint *v);
static void (APIENTRYP pglVertexAttrib4Niv)(GLuint index, const GLint *v) = wrap_glVertexAttrib4Niv;
static void wrap_glVertexAttrib4Niv(GLuint index, const GLint *v) {return trampoline<void>("glVertexAttrib4Niv", "glVertexAttrib4NivARB", nullptr, nullptr, &pglVertexAttrib4Niv, index, v);}
extern "C" void APIENTRY glVertexAttrib4Niv(GLuint index, const GLint *v) {return (*pglVertexAttrib4Niv)(index, v);}
static void wrap_glVertexAttrib4Nsv(GLuint index, const GLshort *v);
static void (APIENTRYP pglVertexAttrib4Nsv)(GLuint index, const GLshort *v) = wrap_glVertexAttrib4Nsv;
static void wrap_glVertexAttrib4Nsv(GLuint index, const GLshort *v) {return trampoline<void>("glVertexAttrib4Nsv", "glVertexAttrib4NsvARB", nullptr, nullptr, &pglVertexAttrib4Nsv, index, v);}
extern "C" void APIENTRY glVertexAttrib4Nsv(GLuint index, const GLshort *v) {return (*pglVertexAttrib4Nsv)(index, v);}
static void wrap_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
static void (APIENTRYP pglVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = wrap_glVertexAttrib4Nub;
static void wrap_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {return trampoline<void>("glVertexAttrib4Nub", "glVertexAttrib4NubARB", nullptr, nullptr, &pglVertexAttrib4Nub, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {return (*pglVertexAttrib4Nub)(index, x, y, z, w);}
static void wrap_glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
static void (APIENTRYP pglVertexAttrib4Nubv)(GLuint index, const GLubyte *v) = wrap_glVertexAttrib4Nubv;
static void wrap_glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {return trampoline<void>("glVertexAttrib4Nubv", "glVertexAttrib4NubvARB", nullptr, nullptr, &pglVertexAttrib4Nubv, index, v);}
extern "C" void APIENTRY glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {return (*pglVertexAttrib4Nubv)(index, v);}
static void wrap_glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
static void (APIENTRYP pglVertexAttrib4Nuiv)(GLuint index, const GLuint *v) = wrap_glVertexAttrib4Nuiv;
static void wrap_glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {return trampoline<void>("glVertexAttrib4Nuiv", "glVertexAttrib4NuivARB", nullptr, nullptr, &pglVertexAttrib4Nuiv, index, v);}
extern "C" void APIENTRY glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {return (*pglVertexAttrib4Nuiv)(index, v);}
static void wrap_glVertexAttrib4Nusv(GLuint index, const GLushort *v);
static void (APIENTRYP pglVertexAttrib4Nusv)(GLuint index, const GLushort *v) = wrap_glVertexAttrib4Nusv;
static void wrap_glVertexAttrib4Nusv(GLuint index, const GLushort *v) {return trampoline<void>("glVertexAttrib4Nusv", "glVertexAttrib4NusvARB", nullptr, nullptr, &pglVertexAttrib4Nusv, index, v);}
extern "C" void APIENTRY glVertexAttrib4Nusv(GLuint index, const GLushort *v) {return (*pglVertexAttrib4Nusv)(index, v);}
static void wrap_glVertexAttrib4bv(GLuint index, const GLbyte *v);
static void (APIENTRYP pglVertexAttrib4bv)(GLuint index, const GLbyte *v) = wrap_glVertexAttrib4bv;
static void wrap_glVertexAttrib4bv(GLuint index, const GLbyte *v) {return trampoline<void>("glVertexAttrib4bv", "glVertexAttrib4bvARB", nullptr, nullptr, &pglVertexAttrib4bv, index, v);}
extern "C" void APIENTRY glVertexAttrib4bv(GLuint index, const GLbyte *v) {return (*pglVertexAttrib4bv)(index, v);}
static void wrap_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glVertexAttrib4d;
static void wrap_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glVertexAttrib4d", "glVertexAttrib4dARB", "glVertexAttrib4dNV", nullptr, &pglVertexAttrib4d, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglVertexAttrib4d)(index, x, y, z, w);}
static void wrap_glVertexAttrib4dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttrib4dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttrib4dv;
static void wrap_glVertexAttrib4dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttrib4dv", "glVertexAttrib4dvARB", "glVertexAttrib4dvNV", nullptr, &pglVertexAttrib4dv, index, v);}
extern "C" void APIENTRY glVertexAttrib4dv(GLuint index, const GLdouble *v) {return (*pglVertexAttrib4dv)(index, v);}
static void wrap_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glVertexAttrib4f;
static void wrap_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glVertexAttrib4f", "glVertexAttrib4fARB", "glVertexAttrib4fNV", nullptr, &pglVertexAttrib4f, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglVertexAttrib4f)(index, x, y, z, w);}
static void wrap_glVertexAttrib4fv(GLuint index, const GLfloat *v);
static void (APIENTRYP pglVertexAttrib4fv)(GLuint index, const GLfloat *v) = wrap_glVertexAttrib4fv;
static void wrap_glVertexAttrib4fv(GLuint index, const GLfloat *v) {return trampoline<void>("glVertexAttrib4fv", "glVertexAttrib4fvARB", "glVertexAttrib4fvNV", nullptr, &pglVertexAttrib4fv, index, v);}
extern "C" void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v) {return (*pglVertexAttrib4fv)(index, v);}
static void wrap_glVertexAttrib4h(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
static void (APIENTRYP pglVertexAttrib4h)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) = wrap_glVertexAttrib4h;
static void wrap_glVertexAttrib4h(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {return trampoline<void>("glVertexAttrib4h", "glVertexAttrib4hNV", nullptr, nullptr, &pglVertexAttrib4h, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttrib4h(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {return (*pglVertexAttrib4h)(index, x, y, z, w);}
static void wrap_glVertexAttrib4hv(GLuint index, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttrib4hv)(GLuint index, const GLhalfNV *v) = wrap_glVertexAttrib4hv;
static void wrap_glVertexAttrib4hv(GLuint index, const GLhalfNV *v) {return trampoline<void>("glVertexAttrib4hv", "glVertexAttrib4hvNV", nullptr, nullptr, &pglVertexAttrib4hv, index, v);}
extern "C" void APIENTRY glVertexAttrib4hv(GLuint index, const GLhalfNV *v) {return (*pglVertexAttrib4hv)(index, v);}
static void wrap_glVertexAttrib4iv(GLuint index, const GLint *v);
static void (APIENTRYP pglVertexAttrib4iv)(GLuint index, const GLint *v) = wrap_glVertexAttrib4iv;
static void wrap_glVertexAttrib4iv(GLuint index, const GLint *v) {return trampoline<void>("glVertexAttrib4iv", "glVertexAttrib4ivARB", nullptr, nullptr, &pglVertexAttrib4iv, index, v);}
extern "C" void APIENTRY glVertexAttrib4iv(GLuint index, const GLint *v) {return (*pglVertexAttrib4iv)(index, v);}
static void wrap_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
static void (APIENTRYP pglVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) = wrap_glVertexAttrib4s;
static void wrap_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {return trampoline<void>("glVertexAttrib4s", "glVertexAttrib4sARB", "glVertexAttrib4sNV", nullptr, &pglVertexAttrib4s, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {return (*pglVertexAttrib4s)(index, x, y, z, w);}
static void wrap_glVertexAttrib4sv(GLuint index, const GLshort *v);
static void (APIENTRYP pglVertexAttrib4sv)(GLuint index, const GLshort *v) = wrap_glVertexAttrib4sv;
static void wrap_glVertexAttrib4sv(GLuint index, const GLshort *v) {return trampoline<void>("glVertexAttrib4sv", "glVertexAttrib4svARB", "glVertexAttrib4svNV", nullptr, &pglVertexAttrib4sv, index, v);}
extern "C" void APIENTRY glVertexAttrib4sv(GLuint index, const GLshort *v) {return (*pglVertexAttrib4sv)(index, v);}
static void wrap_glVertexAttrib4ub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
static void (APIENTRYP pglVertexAttrib4ub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = wrap_glVertexAttrib4ub;
static void wrap_glVertexAttrib4ub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {return trampoline<void>("glVertexAttrib4ub", "glVertexAttrib4ubNV", nullptr, nullptr, &pglVertexAttrib4ub, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttrib4ub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {return (*pglVertexAttrib4ub)(index, x, y, z, w);}
static void wrap_glVertexAttrib4ubv(GLuint index, const GLubyte *v);
static void (APIENTRYP pglVertexAttrib4ubv)(GLuint index, const GLubyte *v) = wrap_glVertexAttrib4ubv;
static void wrap_glVertexAttrib4ubv(GLuint index, const GLubyte *v) {return trampoline<void>("glVertexAttrib4ubv", "glVertexAttrib4ubvARB", "glVertexAttrib4ubvNV", nullptr, &pglVertexAttrib4ubv, index, v);}
extern "C" void APIENTRY glVertexAttrib4ubv(GLuint index, const GLubyte *v) {return (*pglVertexAttrib4ubv)(index, v);}
static void wrap_glVertexAttrib4uiv(GLuint index, const GLuint *v);
static void (APIENTRYP pglVertexAttrib4uiv)(GLuint index, const GLuint *v) = wrap_glVertexAttrib4uiv;
static void wrap_glVertexAttrib4uiv(GLuint index, const GLuint *v) {return trampoline<void>("glVertexAttrib4uiv", "glVertexAttrib4uivARB", nullptr, nullptr, &pglVertexAttrib4uiv, index, v);}
extern "C" void APIENTRY glVertexAttrib4uiv(GLuint index, const GLuint *v) {return (*pglVertexAttrib4uiv)(index, v);}
static void wrap_glVertexAttrib4usv(GLuint index, const GLushort *v);
static void (APIENTRYP pglVertexAttrib4usv)(GLuint index, const GLushort *v) = wrap_glVertexAttrib4usv;
static void wrap_glVertexAttrib4usv(GLuint index, const GLushort *v) {return trampoline<void>("glVertexAttrib4usv", "glVertexAttrib4usvARB", nullptr, nullptr, &pglVertexAttrib4usv, index, v);}
extern "C" void APIENTRY glVertexAttrib4usv(GLuint index, const GLushort *v) {return (*pglVertexAttrib4usv)(index, v);}
static void wrap_glVertexAttribArrayObject(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
static void (APIENTRYP pglVertexAttribArrayObject)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) = wrap_glVertexAttribArrayObject;
static void wrap_glVertexAttribArrayObject(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {return trampoline<void>("glVertexAttribArrayObject", "glVertexAttribArrayObjectATI", nullptr, nullptr, &pglVertexAttribArrayObject, index, size, type, normalized, stride, buffer, offset);}
extern "C" void APIENTRY glVertexAttribArrayObject(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {return (*pglVertexAttribArrayObject)(index, size, type, normalized, stride, buffer, offset);}
static void wrap_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
static void (APIENTRYP pglVertexAttribBinding)(GLuint attribindex, GLuint bindingindex) = wrap_glVertexAttribBinding;
static void wrap_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {return trampoline<void>("glVertexAttribBinding", nullptr, nullptr, nullptr, &pglVertexAttribBinding, attribindex, bindingindex);}
extern "C" void APIENTRY glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {return (*pglVertexAttribBinding)(attribindex, bindingindex);}
static void wrap_glVertexAttribDivisor(GLuint index, GLuint divisor);
static void (APIENTRYP pglVertexAttribDivisor)(GLuint index, GLuint divisor) = wrap_glVertexAttribDivisor;
static void wrap_glVertexAttribDivisor(GLuint index, GLuint divisor) {return trampoline<void>("glVertexAttribDivisor", "glVertexAttribDivisorARB", nullptr, nullptr, &pglVertexAttribDivisor, index, divisor);}
extern "C" void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor) {return (*pglVertexAttribDivisor)(index, divisor);}
static void wrap_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
static void (APIENTRYP pglVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = wrap_glVertexAttribFormat;
static void wrap_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {return trampoline<void>("glVertexAttribFormat", "glVertexAttribFormatNV", nullptr, nullptr, &pglVertexAttribFormat, attribindex, size, type, normalized, relativeoffset);}
extern "C" void APIENTRY glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {return (*pglVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);}
static void wrap_glVertexAttribI1i(GLuint index, GLint x);
static void (APIENTRYP pglVertexAttribI1i)(GLuint index, GLint x) = wrap_glVertexAttribI1i;
static void wrap_glVertexAttribI1i(GLuint index, GLint x) {return trampoline<void>("glVertexAttribI1i", "glVertexAttribI1iEXT", nullptr, nullptr, &pglVertexAttribI1i, index, x);}
extern "C" void APIENTRY glVertexAttribI1i(GLuint index, GLint x) {return (*pglVertexAttribI1i)(index, x);}
static void wrap_glVertexAttribI1iv(GLuint index, const GLint *v);
static void (APIENTRYP pglVertexAttribI1iv)(GLuint index, const GLint *v) = wrap_glVertexAttribI1iv;
static void wrap_glVertexAttribI1iv(GLuint index, const GLint *v) {return trampoline<void>("glVertexAttribI1iv", "glVertexAttribI1ivEXT", nullptr, nullptr, &pglVertexAttribI1iv, index, v);}
extern "C" void APIENTRY glVertexAttribI1iv(GLuint index, const GLint *v) {return (*pglVertexAttribI1iv)(index, v);}
static void wrap_glVertexAttribI1ui(GLuint index, GLuint x);
static void (APIENTRYP pglVertexAttribI1ui)(GLuint index, GLuint x) = wrap_glVertexAttribI1ui;
static void wrap_glVertexAttribI1ui(GLuint index, GLuint x) {return trampoline<void>("glVertexAttribI1ui", "glVertexAttribI1uiEXT", nullptr, nullptr, &pglVertexAttribI1ui, index, x);}
extern "C" void APIENTRY glVertexAttribI1ui(GLuint index, GLuint x) {return (*pglVertexAttribI1ui)(index, x);}
static void wrap_glVertexAttribI1uiv(GLuint index, const GLuint *v);
static void (APIENTRYP pglVertexAttribI1uiv)(GLuint index, const GLuint *v) = wrap_glVertexAttribI1uiv;
static void wrap_glVertexAttribI1uiv(GLuint index, const GLuint *v) {return trampoline<void>("glVertexAttribI1uiv", "glVertexAttribI1uivEXT", nullptr, nullptr, &pglVertexAttribI1uiv, index, v);}
extern "C" void APIENTRY glVertexAttribI1uiv(GLuint index, const GLuint *v) {return (*pglVertexAttribI1uiv)(index, v);}
static void wrap_glVertexAttribI2i(GLuint index, GLint x, GLint y);
static void (APIENTRYP pglVertexAttribI2i)(GLuint index, GLint x, GLint y) = wrap_glVertexAttribI2i;
static void wrap_glVertexAttribI2i(GLuint index, GLint x, GLint y) {return trampoline<void>("glVertexAttribI2i", "glVertexAttribI2iEXT", nullptr, nullptr, &pglVertexAttribI2i, index, x, y);}
extern "C" void APIENTRY glVertexAttribI2i(GLuint index, GLint x, GLint y) {return (*pglVertexAttribI2i)(index, x, y);}
static void wrap_glVertexAttribI2iv(GLuint index, const GLint *v);
static void (APIENTRYP pglVertexAttribI2iv)(GLuint index, const GLint *v) = wrap_glVertexAttribI2iv;
static void wrap_glVertexAttribI2iv(GLuint index, const GLint *v) {return trampoline<void>("glVertexAttribI2iv", "glVertexAttribI2ivEXT", nullptr, nullptr, &pglVertexAttribI2iv, index, v);}
extern "C" void APIENTRY glVertexAttribI2iv(GLuint index, const GLint *v) {return (*pglVertexAttribI2iv)(index, v);}
static void wrap_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
static void (APIENTRYP pglVertexAttribI2ui)(GLuint index, GLuint x, GLuint y) = wrap_glVertexAttribI2ui;
static void wrap_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {return trampoline<void>("glVertexAttribI2ui", "glVertexAttribI2uiEXT", nullptr, nullptr, &pglVertexAttribI2ui, index, x, y);}
extern "C" void APIENTRY glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {return (*pglVertexAttribI2ui)(index, x, y);}
static void wrap_glVertexAttribI2uiv(GLuint index, const GLuint *v);
static void (APIENTRYP pglVertexAttribI2uiv)(GLuint index, const GLuint *v) = wrap_glVertexAttribI2uiv;
static void wrap_glVertexAttribI2uiv(GLuint index, const GLuint *v) {return trampoline<void>("glVertexAttribI2uiv", "glVertexAttribI2uivEXT", nullptr, nullptr, &pglVertexAttribI2uiv, index, v);}
extern "C" void APIENTRY glVertexAttribI2uiv(GLuint index, const GLuint *v) {return (*pglVertexAttribI2uiv)(index, v);}
static void wrap_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
static void (APIENTRYP pglVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z) = wrap_glVertexAttribI3i;
static void wrap_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {return trampoline<void>("glVertexAttribI3i", "glVertexAttribI3iEXT", nullptr, nullptr, &pglVertexAttribI3i, index, x, y, z);}
extern "C" void APIENTRY glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {return (*pglVertexAttribI3i)(index, x, y, z);}
static void wrap_glVertexAttribI3iv(GLuint index, const GLint *v);
static void (APIENTRYP pglVertexAttribI3iv)(GLuint index, const GLint *v) = wrap_glVertexAttribI3iv;
static void wrap_glVertexAttribI3iv(GLuint index, const GLint *v) {return trampoline<void>("glVertexAttribI3iv", "glVertexAttribI3ivEXT", nullptr, nullptr, &pglVertexAttribI3iv, index, v);}
extern "C" void APIENTRY glVertexAttribI3iv(GLuint index, const GLint *v) {return (*pglVertexAttribI3iv)(index, v);}
static void wrap_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
static void (APIENTRYP pglVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z) = wrap_glVertexAttribI3ui;
static void wrap_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {return trampoline<void>("glVertexAttribI3ui", "glVertexAttribI3uiEXT", nullptr, nullptr, &pglVertexAttribI3ui, index, x, y, z);}
extern "C" void APIENTRY glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {return (*pglVertexAttribI3ui)(index, x, y, z);}
static void wrap_glVertexAttribI3uiv(GLuint index, const GLuint *v);
static void (APIENTRYP pglVertexAttribI3uiv)(GLuint index, const GLuint *v) = wrap_glVertexAttribI3uiv;
static void wrap_glVertexAttribI3uiv(GLuint index, const GLuint *v) {return trampoline<void>("glVertexAttribI3uiv", "glVertexAttribI3uivEXT", nullptr, nullptr, &pglVertexAttribI3uiv, index, v);}
extern "C" void APIENTRY glVertexAttribI3uiv(GLuint index, const GLuint *v) {return (*pglVertexAttribI3uiv)(index, v);}
static void wrap_glVertexAttribI4bv(GLuint index, const GLbyte *v);
static void (APIENTRYP pglVertexAttribI4bv)(GLuint index, const GLbyte *v) = wrap_glVertexAttribI4bv;
static void wrap_glVertexAttribI4bv(GLuint index, const GLbyte *v) {return trampoline<void>("glVertexAttribI4bv", "glVertexAttribI4bvEXT", nullptr, nullptr, &pglVertexAttribI4bv, index, v);}
extern "C" void APIENTRY glVertexAttribI4bv(GLuint index, const GLbyte *v) {return (*pglVertexAttribI4bv)(index, v);}
static void wrap_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w) = wrap_glVertexAttribI4i;
static void wrap_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glVertexAttribI4i", "glVertexAttribI4iEXT", nullptr, nullptr, &pglVertexAttribI4i, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {return (*pglVertexAttribI4i)(index, x, y, z, w);}
static void wrap_glVertexAttribI4iv(GLuint index, const GLint *v);
static void (APIENTRYP pglVertexAttribI4iv)(GLuint index, const GLint *v) = wrap_glVertexAttribI4iv;
static void wrap_glVertexAttribI4iv(GLuint index, const GLint *v) {return trampoline<void>("glVertexAttribI4iv", "glVertexAttribI4ivEXT", nullptr, nullptr, &pglVertexAttribI4iv, index, v);}
extern "C" void APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v) {return (*pglVertexAttribI4iv)(index, v);}
static void wrap_glVertexAttribI4sv(GLuint index, const GLshort *v);
static void (APIENTRYP pglVertexAttribI4sv)(GLuint index, const GLshort *v) = wrap_glVertexAttribI4sv;
static void wrap_glVertexAttribI4sv(GLuint index, const GLshort *v) {return trampoline<void>("glVertexAttribI4sv", "glVertexAttribI4svEXT", nullptr, nullptr, &pglVertexAttribI4sv, index, v);}
extern "C" void APIENTRY glVertexAttribI4sv(GLuint index, const GLshort *v) {return (*pglVertexAttribI4sv)(index, v);}
static void wrap_glVertexAttribI4ubv(GLuint index, const GLubyte *v);
static void (APIENTRYP pglVertexAttribI4ubv)(GLuint index, const GLubyte *v) = wrap_glVertexAttribI4ubv;
static void wrap_glVertexAttribI4ubv(GLuint index, const GLubyte *v) {return trampoline<void>("glVertexAttribI4ubv", "glVertexAttribI4ubvEXT", nullptr, nullptr, &pglVertexAttribI4ubv, index, v);}
extern "C" void APIENTRY glVertexAttribI4ubv(GLuint index, const GLubyte *v) {return (*pglVertexAttribI4ubv)(index, v);}
static void wrap_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
static void (APIENTRYP pglVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = wrap_glVertexAttribI4ui;
static void wrap_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return trampoline<void>("glVertexAttribI4ui", "glVertexAttribI4uiEXT", nullptr, nullptr, &pglVertexAttribI4ui, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {return (*pglVertexAttribI4ui)(index, x, y, z, w);}
static void wrap_glVertexAttribI4uiv(GLuint index, const GLuint *v);
static void (APIENTRYP pglVertexAttribI4uiv)(GLuint index, const GLuint *v) = wrap_glVertexAttribI4uiv;
static void wrap_glVertexAttribI4uiv(GLuint index, const GLuint *v) {return trampoline<void>("glVertexAttribI4uiv", "glVertexAttribI4uivEXT", nullptr, nullptr, &pglVertexAttribI4uiv, index, v);}
extern "C" void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v) {return (*pglVertexAttribI4uiv)(index, v);}
static void wrap_glVertexAttribI4usv(GLuint index, const GLushort *v);
static void (APIENTRYP pglVertexAttribI4usv)(GLuint index, const GLushort *v) = wrap_glVertexAttribI4usv;
static void wrap_glVertexAttribI4usv(GLuint index, const GLushort *v) {return trampoline<void>("glVertexAttribI4usv", "glVertexAttribI4usvEXT", nullptr, nullptr, &pglVertexAttribI4usv, index, v);}
extern "C" void APIENTRY glVertexAttribI4usv(GLuint index, const GLushort *v) {return (*pglVertexAttribI4usv)(index, v);}
static void wrap_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
static void (APIENTRYP pglVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = wrap_glVertexAttribIFormat;
static void wrap_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return trampoline<void>("glVertexAttribIFormat", "glVertexAttribIFormatNV", nullptr, nullptr, &pglVertexAttribIFormat, attribindex, size, type, relativeoffset);}
extern "C" void APIENTRY glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return (*pglVertexAttribIFormat)(attribindex, size, type, relativeoffset);}
static void wrap_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glVertexAttribIPointer;
static void wrap_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glVertexAttribIPointer", "glVertexAttribIPointerEXT", nullptr, nullptr, &pglVertexAttribIPointer, index, size, type, stride, pointer);}
extern "C" void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglVertexAttribIPointer)(index, size, type, stride, pointer);}
static void wrap_glVertexAttribL1d(GLuint index, GLdouble x);
static void (APIENTRYP pglVertexAttribL1d)(GLuint index, GLdouble x) = wrap_glVertexAttribL1d;
static void wrap_glVertexAttribL1d(GLuint index, GLdouble x) {return trampoline<void>("glVertexAttribL1d", "glVertexAttribL1dEXT", nullptr, nullptr, &pglVertexAttribL1d, index, x);}
extern "C" void APIENTRY glVertexAttribL1d(GLuint index, GLdouble x) {return (*pglVertexAttribL1d)(index, x);}
static void wrap_glVertexAttribL1dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttribL1dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttribL1dv;
static void wrap_glVertexAttribL1dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttribL1dv", "glVertexAttribL1dvEXT", nullptr, nullptr, &pglVertexAttribL1dv, index, v);}
extern "C" void APIENTRY glVertexAttribL1dv(GLuint index, const GLdouble *v) {return (*pglVertexAttribL1dv)(index, v);}
static void wrap_glVertexAttribL1i64(GLuint index, GLint64EXT x);
static void (APIENTRYP pglVertexAttribL1i64)(GLuint index, GLint64EXT x) = wrap_glVertexAttribL1i64;
static void wrap_glVertexAttribL1i64(GLuint index, GLint64EXT x) {return trampoline<void>("glVertexAttribL1i64", "glVertexAttribL1i64NV", nullptr, nullptr, &pglVertexAttribL1i64, index, x);}
extern "C" void APIENTRY glVertexAttribL1i64(GLuint index, GLint64EXT x) {return (*pglVertexAttribL1i64)(index, x);}
static void wrap_glVertexAttribL1i64v(GLuint index, const GLint64EXT *v);
static void (APIENTRYP pglVertexAttribL1i64v)(GLuint index, const GLint64EXT *v) = wrap_glVertexAttribL1i64v;
static void wrap_glVertexAttribL1i64v(GLuint index, const GLint64EXT *v) {return trampoline<void>("glVertexAttribL1i64v", "glVertexAttribL1i64vNV", nullptr, nullptr, &pglVertexAttribL1i64v, index, v);}
extern "C" void APIENTRY glVertexAttribL1i64v(GLuint index, const GLint64EXT *v) {return (*pglVertexAttribL1i64v)(index, v);}
static void wrap_glVertexAttribL1ui64(GLuint index, GLuint64EXT x);
static void (APIENTRYP pglVertexAttribL1ui64)(GLuint index, GLuint64EXT x) = wrap_glVertexAttribL1ui64;
static void wrap_glVertexAttribL1ui64(GLuint index, GLuint64EXT x) {return trampoline<void>("glVertexAttribL1ui64", "glVertexAttribL1ui64ARB", "glVertexAttribL1ui64NV", nullptr, &pglVertexAttribL1ui64, index, x);}
extern "C" void APIENTRY glVertexAttribL1ui64(GLuint index, GLuint64EXT x) {return (*pglVertexAttribL1ui64)(index, x);}
static void wrap_glVertexAttribL1ui64v(GLuint index, const GLuint64EXT *v);
static void (APIENTRYP pglVertexAttribL1ui64v)(GLuint index, const GLuint64EXT *v) = wrap_glVertexAttribL1ui64v;
static void wrap_glVertexAttribL1ui64v(GLuint index, const GLuint64EXT *v) {return trampoline<void>("glVertexAttribL1ui64v", "glVertexAttribL1ui64vARB", "glVertexAttribL1ui64vNV", nullptr, &pglVertexAttribL1ui64v, index, v);}
extern "C" void APIENTRY glVertexAttribL1ui64v(GLuint index, const GLuint64EXT *v) {return (*pglVertexAttribL1ui64v)(index, v);}
static void wrap_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
static void (APIENTRYP pglVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y) = wrap_glVertexAttribL2d;
static void wrap_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {return trampoline<void>("glVertexAttribL2d", "glVertexAttribL2dEXT", nullptr, nullptr, &pglVertexAttribL2d, index, x, y);}
extern "C" void APIENTRY glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {return (*pglVertexAttribL2d)(index, x, y);}
static void wrap_glVertexAttribL2dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttribL2dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttribL2dv;
static void wrap_glVertexAttribL2dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttribL2dv", "glVertexAttribL2dvEXT", nullptr, nullptr, &pglVertexAttribL2dv, index, v);}
extern "C" void APIENTRY glVertexAttribL2dv(GLuint index, const GLdouble *v) {return (*pglVertexAttribL2dv)(index, v);}
static void wrap_glVertexAttribL2i64(GLuint index, GLint64EXT x, GLint64EXT y);
static void (APIENTRYP pglVertexAttribL2i64)(GLuint index, GLint64EXT x, GLint64EXT y) = wrap_glVertexAttribL2i64;
static void wrap_glVertexAttribL2i64(GLuint index, GLint64EXT x, GLint64EXT y) {return trampoline<void>("glVertexAttribL2i64", "glVertexAttribL2i64NV", nullptr, nullptr, &pglVertexAttribL2i64, index, x, y);}
extern "C" void APIENTRY glVertexAttribL2i64(GLuint index, GLint64EXT x, GLint64EXT y) {return (*pglVertexAttribL2i64)(index, x, y);}
static void wrap_glVertexAttribL2i64v(GLuint index, const GLint64EXT *v);
static void (APIENTRYP pglVertexAttribL2i64v)(GLuint index, const GLint64EXT *v) = wrap_glVertexAttribL2i64v;
static void wrap_glVertexAttribL2i64v(GLuint index, const GLint64EXT *v) {return trampoline<void>("glVertexAttribL2i64v", "glVertexAttribL2i64vNV", nullptr, nullptr, &pglVertexAttribL2i64v, index, v);}
extern "C" void APIENTRY glVertexAttribL2i64v(GLuint index, const GLint64EXT *v) {return (*pglVertexAttribL2i64v)(index, v);}
static void wrap_glVertexAttribL2ui64(GLuint index, GLuint64EXT x, GLuint64EXT y);
static void (APIENTRYP pglVertexAttribL2ui64)(GLuint index, GLuint64EXT x, GLuint64EXT y) = wrap_glVertexAttribL2ui64;
static void wrap_glVertexAttribL2ui64(GLuint index, GLuint64EXT x, GLuint64EXT y) {return trampoline<void>("glVertexAttribL2ui64", "glVertexAttribL2ui64NV", nullptr, nullptr, &pglVertexAttribL2ui64, index, x, y);}
extern "C" void APIENTRY glVertexAttribL2ui64(GLuint index, GLuint64EXT x, GLuint64EXT y) {return (*pglVertexAttribL2ui64)(index, x, y);}
static void wrap_glVertexAttribL2ui64v(GLuint index, const GLuint64EXT *v);
static void (APIENTRYP pglVertexAttribL2ui64v)(GLuint index, const GLuint64EXT *v) = wrap_glVertexAttribL2ui64v;
static void wrap_glVertexAttribL2ui64v(GLuint index, const GLuint64EXT *v) {return trampoline<void>("glVertexAttribL2ui64v", "glVertexAttribL2ui64vNV", nullptr, nullptr, &pglVertexAttribL2ui64v, index, v);}
extern "C" void APIENTRY glVertexAttribL2ui64v(GLuint index, const GLuint64EXT *v) {return (*pglVertexAttribL2ui64v)(index, v);}
static void wrap_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = wrap_glVertexAttribL3d;
static void wrap_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glVertexAttribL3d", "glVertexAttribL3dEXT", nullptr, nullptr, &pglVertexAttribL3d, index, x, y, z);}
extern "C" void APIENTRY glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {return (*pglVertexAttribL3d)(index, x, y, z);}
static void wrap_glVertexAttribL3dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttribL3dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttribL3dv;
static void wrap_glVertexAttribL3dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttribL3dv", "glVertexAttribL3dvEXT", nullptr, nullptr, &pglVertexAttribL3dv, index, v);}
extern "C" void APIENTRY glVertexAttribL3dv(GLuint index, const GLdouble *v) {return (*pglVertexAttribL3dv)(index, v);}
static void wrap_glVertexAttribL3i64(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
static void (APIENTRYP pglVertexAttribL3i64)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) = wrap_glVertexAttribL3i64;
static void wrap_glVertexAttribL3i64(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {return trampoline<void>("glVertexAttribL3i64", "glVertexAttribL3i64NV", nullptr, nullptr, &pglVertexAttribL3i64, index, x, y, z);}
extern "C" void APIENTRY glVertexAttribL3i64(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {return (*pglVertexAttribL3i64)(index, x, y, z);}
static void wrap_glVertexAttribL3i64v(GLuint index, const GLint64EXT *v);
static void (APIENTRYP pglVertexAttribL3i64v)(GLuint index, const GLint64EXT *v) = wrap_glVertexAttribL3i64v;
static void wrap_glVertexAttribL3i64v(GLuint index, const GLint64EXT *v) {return trampoline<void>("glVertexAttribL3i64v", "glVertexAttribL3i64vNV", nullptr, nullptr, &pglVertexAttribL3i64v, index, v);}
extern "C" void APIENTRY glVertexAttribL3i64v(GLuint index, const GLint64EXT *v) {return (*pglVertexAttribL3i64v)(index, v);}
static void wrap_glVertexAttribL3ui64(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
static void (APIENTRYP pglVertexAttribL3ui64)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = wrap_glVertexAttribL3ui64;
static void wrap_glVertexAttribL3ui64(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {return trampoline<void>("glVertexAttribL3ui64", "glVertexAttribL3ui64NV", nullptr, nullptr, &pglVertexAttribL3ui64, index, x, y, z);}
extern "C" void APIENTRY glVertexAttribL3ui64(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {return (*pglVertexAttribL3ui64)(index, x, y, z);}
static void wrap_glVertexAttribL3ui64v(GLuint index, const GLuint64EXT *v);
static void (APIENTRYP pglVertexAttribL3ui64v)(GLuint index, const GLuint64EXT *v) = wrap_glVertexAttribL3ui64v;
static void wrap_glVertexAttribL3ui64v(GLuint index, const GLuint64EXT *v) {return trampoline<void>("glVertexAttribL3ui64v", "glVertexAttribL3ui64vNV", nullptr, nullptr, &pglVertexAttribL3ui64v, index, v);}
extern "C" void APIENTRY glVertexAttribL3ui64v(GLuint index, const GLuint64EXT *v) {return (*pglVertexAttribL3ui64v)(index, v);}
static void wrap_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glVertexAttribL4d;
static void wrap_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glVertexAttribL4d", "glVertexAttribL4dEXT", nullptr, nullptr, &pglVertexAttribL4d, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglVertexAttribL4d)(index, x, y, z, w);}
static void wrap_glVertexAttribL4dv(GLuint index, const GLdouble *v);
static void (APIENTRYP pglVertexAttribL4dv)(GLuint index, const GLdouble *v) = wrap_glVertexAttribL4dv;
static void wrap_glVertexAttribL4dv(GLuint index, const GLdouble *v) {return trampoline<void>("glVertexAttribL4dv", "glVertexAttribL4dvEXT", nullptr, nullptr, &pglVertexAttribL4dv, index, v);}
extern "C" void APIENTRY glVertexAttribL4dv(GLuint index, const GLdouble *v) {return (*pglVertexAttribL4dv)(index, v);}
static void wrap_glVertexAttribL4i64(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
static void (APIENTRYP pglVertexAttribL4i64)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = wrap_glVertexAttribL4i64;
static void wrap_glVertexAttribL4i64(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {return trampoline<void>("glVertexAttribL4i64", "glVertexAttribL4i64NV", nullptr, nullptr, &pglVertexAttribL4i64, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttribL4i64(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {return (*pglVertexAttribL4i64)(index, x, y, z, w);}
static void wrap_glVertexAttribL4i64v(GLuint index, const GLint64EXT *v);
static void (APIENTRYP pglVertexAttribL4i64v)(GLuint index, const GLint64EXT *v) = wrap_glVertexAttribL4i64v;
static void wrap_glVertexAttribL4i64v(GLuint index, const GLint64EXT *v) {return trampoline<void>("glVertexAttribL4i64v", "glVertexAttribL4i64vNV", nullptr, nullptr, &pglVertexAttribL4i64v, index, v);}
extern "C" void APIENTRY glVertexAttribL4i64v(GLuint index, const GLint64EXT *v) {return (*pglVertexAttribL4i64v)(index, v);}
static void wrap_glVertexAttribL4ui64(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
static void (APIENTRYP pglVertexAttribL4ui64)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = wrap_glVertexAttribL4ui64;
static void wrap_glVertexAttribL4ui64(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {return trampoline<void>("glVertexAttribL4ui64", "glVertexAttribL4ui64NV", nullptr, nullptr, &pglVertexAttribL4ui64, index, x, y, z, w);}
extern "C" void APIENTRY glVertexAttribL4ui64(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {return (*pglVertexAttribL4ui64)(index, x, y, z, w);}
static void wrap_glVertexAttribL4ui64v(GLuint index, const GLuint64EXT *v);
static void (APIENTRYP pglVertexAttribL4ui64v)(GLuint index, const GLuint64EXT *v) = wrap_glVertexAttribL4ui64v;
static void wrap_glVertexAttribL4ui64v(GLuint index, const GLuint64EXT *v) {return trampoline<void>("glVertexAttribL4ui64v", "glVertexAttribL4ui64vNV", nullptr, nullptr, &pglVertexAttribL4ui64v, index, v);}
extern "C" void APIENTRY glVertexAttribL4ui64v(GLuint index, const GLuint64EXT *v) {return (*pglVertexAttribL4ui64v)(index, v);}
static void wrap_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
static void (APIENTRYP pglVertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = wrap_glVertexAttribLFormat;
static void wrap_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return trampoline<void>("glVertexAttribLFormat", "glVertexAttribLFormatNV", nullptr, nullptr, &pglVertexAttribLFormat, attribindex, size, type, relativeoffset);}
extern "C" void APIENTRY glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {return (*pglVertexAttribLFormat)(attribindex, size, type, relativeoffset);}
static void wrap_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glVertexAttribLPointer;
static void wrap_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glVertexAttribLPointer", "glVertexAttribLPointerEXT", nullptr, nullptr, &pglVertexAttribLPointer, index, size, type, stride, pointer);}
extern "C" void APIENTRY glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglVertexAttribLPointer)(index, size, type, stride, pointer);}
static void wrap_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
static void (APIENTRYP pglVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = wrap_glVertexAttribP1ui;
static void wrap_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return trampoline<void>("glVertexAttribP1ui", nullptr, nullptr, nullptr, &pglVertexAttribP1ui, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return (*pglVertexAttribP1ui)(index, type, normalized, value);}
static void wrap_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
static void (APIENTRYP pglVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) = wrap_glVertexAttribP1uiv;
static void wrap_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return trampoline<void>("glVertexAttribP1uiv", nullptr, nullptr, nullptr, &pglVertexAttribP1uiv, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return (*pglVertexAttribP1uiv)(index, type, normalized, value);}
static void wrap_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
static void (APIENTRYP pglVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = wrap_glVertexAttribP2ui;
static void wrap_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return trampoline<void>("glVertexAttribP2ui", nullptr, nullptr, nullptr, &pglVertexAttribP2ui, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return (*pglVertexAttribP2ui)(index, type, normalized, value);}
static void wrap_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
static void (APIENTRYP pglVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) = wrap_glVertexAttribP2uiv;
static void wrap_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return trampoline<void>("glVertexAttribP2uiv", nullptr, nullptr, nullptr, &pglVertexAttribP2uiv, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return (*pglVertexAttribP2uiv)(index, type, normalized, value);}
static void wrap_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
static void (APIENTRYP pglVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = wrap_glVertexAttribP3ui;
static void wrap_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return trampoline<void>("glVertexAttribP3ui", nullptr, nullptr, nullptr, &pglVertexAttribP3ui, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return (*pglVertexAttribP3ui)(index, type, normalized, value);}
static void wrap_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
static void (APIENTRYP pglVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) = wrap_glVertexAttribP3uiv;
static void wrap_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return trampoline<void>("glVertexAttribP3uiv", nullptr, nullptr, nullptr, &pglVertexAttribP3uiv, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return (*pglVertexAttribP3uiv)(index, type, normalized, value);}
static void wrap_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
static void (APIENTRYP pglVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = wrap_glVertexAttribP4ui;
static void wrap_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return trampoline<void>("glVertexAttribP4ui", nullptr, nullptr, nullptr, &pglVertexAttribP4ui, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {return (*pglVertexAttribP4ui)(index, type, normalized, value);}
static void wrap_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
static void (APIENTRYP pglVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) = wrap_glVertexAttribP4uiv;
static void wrap_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return trampoline<void>("glVertexAttribP4uiv", nullptr, nullptr, nullptr, &pglVertexAttribP4uiv, index, type, normalized, value);}
extern "C" void APIENTRY glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {return (*pglVertexAttribP4uiv)(index, type, normalized, value);}
static void wrap_glVertexAttribParameteri(GLuint index, GLenum pname, GLint param);
static void (APIENTRYP pglVertexAttribParameteri)(GLuint index, GLenum pname, GLint param) = wrap_glVertexAttribParameteri;
static void wrap_glVertexAttribParameteri(GLuint index, GLenum pname, GLint param) {return trampoline<void>("glVertexAttribParameteri", "glVertexAttribParameteriAMD", nullptr, nullptr, &pglVertexAttribParameteri, index, pname, param);}
extern "C" void APIENTRY glVertexAttribParameteri(GLuint index, GLenum pname, GLint param) {return (*pglVertexAttribParameteri)(index, pname, param);}
static void wrap_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
static void (APIENTRYP pglVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) = wrap_glVertexAttribPointer;
static void wrap_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {return trampoline<void>("glVertexAttribPointer", "glVertexAttribPointerARB", "glVertexAttribPointerNV", nullptr, &pglVertexAttribPointer, index, size, type, normalized, stride, pointer);}
extern "C" void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {return (*pglVertexAttribPointer)(index, size, type, normalized, stride, pointer);}
static void wrap_glVertexAttribs1dv(GLuint index, GLsizei count, const GLdouble *v);
static void (APIENTRYP pglVertexAttribs1dv)(GLuint index, GLsizei count, const GLdouble *v) = wrap_glVertexAttribs1dv;
static void wrap_glVertexAttribs1dv(GLuint index, GLsizei count, const GLdouble *v) {return trampoline<void>("glVertexAttribs1dv", "glVertexAttribs1dvNV", nullptr, nullptr, &pglVertexAttribs1dv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs1dv(GLuint index, GLsizei count, const GLdouble *v) {return (*pglVertexAttribs1dv)(index, count, v);}
static void wrap_glVertexAttribs1fv(GLuint index, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglVertexAttribs1fv)(GLuint index, GLsizei count, const GLfloat *v) = wrap_glVertexAttribs1fv;
static void wrap_glVertexAttribs1fv(GLuint index, GLsizei count, const GLfloat *v) {return trampoline<void>("glVertexAttribs1fv", "glVertexAttribs1fvNV", nullptr, nullptr, &pglVertexAttribs1fv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs1fv(GLuint index, GLsizei count, const GLfloat *v) {return (*pglVertexAttribs1fv)(index, count, v);}
static void wrap_glVertexAttribs1hv(GLuint index, GLsizei n, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttribs1hv)(GLuint index, GLsizei n, const GLhalfNV *v) = wrap_glVertexAttribs1hv;
static void wrap_glVertexAttribs1hv(GLuint index, GLsizei n, const GLhalfNV *v) {return trampoline<void>("glVertexAttribs1hv", "glVertexAttribs1hvNV", nullptr, nullptr, &pglVertexAttribs1hv, index, n, v);}
extern "C" void APIENTRY glVertexAttribs1hv(GLuint index, GLsizei n, const GLhalfNV *v) {return (*pglVertexAttribs1hv)(index, n, v);}
static void wrap_glVertexAttribs1sv(GLuint index, GLsizei count, const GLshort *v);
static void (APIENTRYP pglVertexAttribs1sv)(GLuint index, GLsizei count, const GLshort *v) = wrap_glVertexAttribs1sv;
static void wrap_glVertexAttribs1sv(GLuint index, GLsizei count, const GLshort *v) {return trampoline<void>("glVertexAttribs1sv", "glVertexAttribs1svNV", nullptr, nullptr, &pglVertexAttribs1sv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs1sv(GLuint index, GLsizei count, const GLshort *v) {return (*pglVertexAttribs1sv)(index, count, v);}
static void wrap_glVertexAttribs2dv(GLuint index, GLsizei count, const GLdouble *v);
static void (APIENTRYP pglVertexAttribs2dv)(GLuint index, GLsizei count, const GLdouble *v) = wrap_glVertexAttribs2dv;
static void wrap_glVertexAttribs2dv(GLuint index, GLsizei count, const GLdouble *v) {return trampoline<void>("glVertexAttribs2dv", "glVertexAttribs2dvNV", nullptr, nullptr, &pglVertexAttribs2dv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs2dv(GLuint index, GLsizei count, const GLdouble *v) {return (*pglVertexAttribs2dv)(index, count, v);}
static void wrap_glVertexAttribs2fv(GLuint index, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglVertexAttribs2fv)(GLuint index, GLsizei count, const GLfloat *v) = wrap_glVertexAttribs2fv;
static void wrap_glVertexAttribs2fv(GLuint index, GLsizei count, const GLfloat *v) {return trampoline<void>("glVertexAttribs2fv", "glVertexAttribs2fvNV", nullptr, nullptr, &pglVertexAttribs2fv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs2fv(GLuint index, GLsizei count, const GLfloat *v) {return (*pglVertexAttribs2fv)(index, count, v);}
static void wrap_glVertexAttribs2hv(GLuint index, GLsizei n, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttribs2hv)(GLuint index, GLsizei n, const GLhalfNV *v) = wrap_glVertexAttribs2hv;
static void wrap_glVertexAttribs2hv(GLuint index, GLsizei n, const GLhalfNV *v) {return trampoline<void>("glVertexAttribs2hv", "glVertexAttribs2hvNV", nullptr, nullptr, &pglVertexAttribs2hv, index, n, v);}
extern "C" void APIENTRY glVertexAttribs2hv(GLuint index, GLsizei n, const GLhalfNV *v) {return (*pglVertexAttribs2hv)(index, n, v);}
static void wrap_glVertexAttribs2sv(GLuint index, GLsizei count, const GLshort *v);
static void (APIENTRYP pglVertexAttribs2sv)(GLuint index, GLsizei count, const GLshort *v) = wrap_glVertexAttribs2sv;
static void wrap_glVertexAttribs2sv(GLuint index, GLsizei count, const GLshort *v) {return trampoline<void>("glVertexAttribs2sv", "glVertexAttribs2svNV", nullptr, nullptr, &pglVertexAttribs2sv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs2sv(GLuint index, GLsizei count, const GLshort *v) {return (*pglVertexAttribs2sv)(index, count, v);}
static void wrap_glVertexAttribs3dv(GLuint index, GLsizei count, const GLdouble *v);
static void (APIENTRYP pglVertexAttribs3dv)(GLuint index, GLsizei count, const GLdouble *v) = wrap_glVertexAttribs3dv;
static void wrap_glVertexAttribs3dv(GLuint index, GLsizei count, const GLdouble *v) {return trampoline<void>("glVertexAttribs3dv", "glVertexAttribs3dvNV", nullptr, nullptr, &pglVertexAttribs3dv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs3dv(GLuint index, GLsizei count, const GLdouble *v) {return (*pglVertexAttribs3dv)(index, count, v);}
static void wrap_glVertexAttribs3fv(GLuint index, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglVertexAttribs3fv)(GLuint index, GLsizei count, const GLfloat *v) = wrap_glVertexAttribs3fv;
static void wrap_glVertexAttribs3fv(GLuint index, GLsizei count, const GLfloat *v) {return trampoline<void>("glVertexAttribs3fv", "glVertexAttribs3fvNV", nullptr, nullptr, &pglVertexAttribs3fv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs3fv(GLuint index, GLsizei count, const GLfloat *v) {return (*pglVertexAttribs3fv)(index, count, v);}
static void wrap_glVertexAttribs3hv(GLuint index, GLsizei n, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttribs3hv)(GLuint index, GLsizei n, const GLhalfNV *v) = wrap_glVertexAttribs3hv;
static void wrap_glVertexAttribs3hv(GLuint index, GLsizei n, const GLhalfNV *v) {return trampoline<void>("glVertexAttribs3hv", "glVertexAttribs3hvNV", nullptr, nullptr, &pglVertexAttribs3hv, index, n, v);}
extern "C" void APIENTRY glVertexAttribs3hv(GLuint index, GLsizei n, const GLhalfNV *v) {return (*pglVertexAttribs3hv)(index, n, v);}
static void wrap_glVertexAttribs3sv(GLuint index, GLsizei count, const GLshort *v);
static void (APIENTRYP pglVertexAttribs3sv)(GLuint index, GLsizei count, const GLshort *v) = wrap_glVertexAttribs3sv;
static void wrap_glVertexAttribs3sv(GLuint index, GLsizei count, const GLshort *v) {return trampoline<void>("glVertexAttribs3sv", "glVertexAttribs3svNV", nullptr, nullptr, &pglVertexAttribs3sv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs3sv(GLuint index, GLsizei count, const GLshort *v) {return (*pglVertexAttribs3sv)(index, count, v);}
static void wrap_glVertexAttribs4dv(GLuint index, GLsizei count, const GLdouble *v);
static void (APIENTRYP pglVertexAttribs4dv)(GLuint index, GLsizei count, const GLdouble *v) = wrap_glVertexAttribs4dv;
static void wrap_glVertexAttribs4dv(GLuint index, GLsizei count, const GLdouble *v) {return trampoline<void>("glVertexAttribs4dv", "glVertexAttribs4dvNV", nullptr, nullptr, &pglVertexAttribs4dv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs4dv(GLuint index, GLsizei count, const GLdouble *v) {return (*pglVertexAttribs4dv)(index, count, v);}
static void wrap_glVertexAttribs4fv(GLuint index, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglVertexAttribs4fv)(GLuint index, GLsizei count, const GLfloat *v) = wrap_glVertexAttribs4fv;
static void wrap_glVertexAttribs4fv(GLuint index, GLsizei count, const GLfloat *v) {return trampoline<void>("glVertexAttribs4fv", "glVertexAttribs4fvNV", nullptr, nullptr, &pglVertexAttribs4fv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs4fv(GLuint index, GLsizei count, const GLfloat *v) {return (*pglVertexAttribs4fv)(index, count, v);}
static void wrap_glVertexAttribs4hv(GLuint index, GLsizei n, const GLhalfNV *v);
static void (APIENTRYP pglVertexAttribs4hv)(GLuint index, GLsizei n, const GLhalfNV *v) = wrap_glVertexAttribs4hv;
static void wrap_glVertexAttribs4hv(GLuint index, GLsizei n, const GLhalfNV *v) {return trampoline<void>("glVertexAttribs4hv", "glVertexAttribs4hvNV", nullptr, nullptr, &pglVertexAttribs4hv, index, n, v);}
extern "C" void APIENTRY glVertexAttribs4hv(GLuint index, GLsizei n, const GLhalfNV *v) {return (*pglVertexAttribs4hv)(index, n, v);}
static void wrap_glVertexAttribs4sv(GLuint index, GLsizei count, const GLshort *v);
static void (APIENTRYP pglVertexAttribs4sv)(GLuint index, GLsizei count, const GLshort *v) = wrap_glVertexAttribs4sv;
static void wrap_glVertexAttribs4sv(GLuint index, GLsizei count, const GLshort *v) {return trampoline<void>("glVertexAttribs4sv", "glVertexAttribs4svNV", nullptr, nullptr, &pglVertexAttribs4sv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs4sv(GLuint index, GLsizei count, const GLshort *v) {return (*pglVertexAttribs4sv)(index, count, v);}
static void wrap_glVertexAttribs4ubv(GLuint index, GLsizei count, const GLubyte *v);
static void (APIENTRYP pglVertexAttribs4ubv)(GLuint index, GLsizei count, const GLubyte *v) = wrap_glVertexAttribs4ubv;
static void wrap_glVertexAttribs4ubv(GLuint index, GLsizei count, const GLubyte *v) {return trampoline<void>("glVertexAttribs4ubv", "glVertexAttribs4ubvNV", nullptr, nullptr, &pglVertexAttribs4ubv, index, count, v);}
extern "C" void APIENTRY glVertexAttribs4ubv(GLuint index, GLsizei count, const GLubyte *v) {return (*pglVertexAttribs4ubv)(index, count, v);}
static void wrap_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
static void (APIENTRYP pglVertexBindingDivisor)(GLuint bindingindex, GLuint divisor) = wrap_glVertexBindingDivisor;
static void wrap_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {return trampoline<void>("glVertexBindingDivisor", nullptr, nullptr, nullptr, &pglVertexBindingDivisor, bindingindex, divisor);}
extern "C" void APIENTRY glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {return (*pglVertexBindingDivisor)(bindingindex, divisor);}
static void wrap_glVertexBlend(GLint count);
static void (APIENTRYP pglVertexBlend)(GLint count) = wrap_glVertexBlend;
static void wrap_glVertexBlend(GLint count) {return trampoline<void>("glVertexBlend", "glVertexBlendARB", nullptr, nullptr, &pglVertexBlend, count);}
extern "C" void APIENTRY glVertexBlend(GLint count) {return (*pglVertexBlend)(count);}
static void wrap_glVertexBlendEnvf(GLenum pname, GLfloat param);
static void (APIENTRYP pglVertexBlendEnvf)(GLenum pname, GLfloat param) = wrap_glVertexBlendEnvf;
static void wrap_glVertexBlendEnvf(GLenum pname, GLfloat param) {return trampoline<void>("glVertexBlendEnvf", "glVertexBlendEnvfATI", nullptr, nullptr, &pglVertexBlendEnvf, pname, param);}
extern "C" void APIENTRY glVertexBlendEnvf(GLenum pname, GLfloat param) {return (*pglVertexBlendEnvf)(pname, param);}
static void wrap_glVertexBlendEnvi(GLenum pname, GLint param);
static void (APIENTRYP pglVertexBlendEnvi)(GLenum pname, GLint param) = wrap_glVertexBlendEnvi;
static void wrap_glVertexBlendEnvi(GLenum pname, GLint param) {return trampoline<void>("glVertexBlendEnvi", "glVertexBlendEnviATI", nullptr, nullptr, &pglVertexBlendEnvi, pname, param);}
extern "C" void APIENTRY glVertexBlendEnvi(GLenum pname, GLint param) {return (*pglVertexBlendEnvi)(pname, param);}
static void wrap_glVertexFormat(GLint size, GLenum type, GLsizei stride);
static void (APIENTRYP pglVertexFormat)(GLint size, GLenum type, GLsizei stride) = wrap_glVertexFormat;
static void wrap_glVertexFormat(GLint size, GLenum type, GLsizei stride) {return trampoline<void>("glVertexFormat", "glVertexFormatNV", nullptr, nullptr, &pglVertexFormat, size, type, stride);}
extern "C" void APIENTRY glVertexFormat(GLint size, GLenum type, GLsizei stride) {return (*pglVertexFormat)(size, type, stride);}
static void wrap_glVertexP2ui(GLenum type, GLuint value);
static void (APIENTRYP pglVertexP2ui)(GLenum type, GLuint value) = wrap_glVertexP2ui;
static void wrap_glVertexP2ui(GLenum type, GLuint value) {return trampoline<void>("glVertexP2ui", nullptr, nullptr, nullptr, &pglVertexP2ui, type, value);}
extern "C" void APIENTRY glVertexP2ui(GLenum type, GLuint value) {return (*pglVertexP2ui)(type, value);}
static void wrap_glVertexP2uiv(GLenum type, const GLuint *value);
static void (APIENTRYP pglVertexP2uiv)(GLenum type, const GLuint *value) = wrap_glVertexP2uiv;
static void wrap_glVertexP2uiv(GLenum type, const GLuint *value) {return trampoline<void>("glVertexP2uiv", nullptr, nullptr, nullptr, &pglVertexP2uiv, type, value);}
extern "C" void APIENTRY glVertexP2uiv(GLenum type, const GLuint *value) {return (*pglVertexP2uiv)(type, value);}
static void wrap_glVertexP3ui(GLenum type, GLuint value);
static void (APIENTRYP pglVertexP3ui)(GLenum type, GLuint value) = wrap_glVertexP3ui;
static void wrap_glVertexP3ui(GLenum type, GLuint value) {return trampoline<void>("glVertexP3ui", nullptr, nullptr, nullptr, &pglVertexP3ui, type, value);}
extern "C" void APIENTRY glVertexP3ui(GLenum type, GLuint value) {return (*pglVertexP3ui)(type, value);}
static void wrap_glVertexP3uiv(GLenum type, const GLuint *value);
static void (APIENTRYP pglVertexP3uiv)(GLenum type, const GLuint *value) = wrap_glVertexP3uiv;
static void wrap_glVertexP3uiv(GLenum type, const GLuint *value) {return trampoline<void>("glVertexP3uiv", nullptr, nullptr, nullptr, &pglVertexP3uiv, type, value);}
extern "C" void APIENTRY glVertexP3uiv(GLenum type, const GLuint *value) {return (*pglVertexP3uiv)(type, value);}
static void wrap_glVertexP4ui(GLenum type, GLuint value);
static void (APIENTRYP pglVertexP4ui)(GLenum type, GLuint value) = wrap_glVertexP4ui;
static void wrap_glVertexP4ui(GLenum type, GLuint value) {return trampoline<void>("glVertexP4ui", nullptr, nullptr, nullptr, &pglVertexP4ui, type, value);}
extern "C" void APIENTRY glVertexP4ui(GLenum type, GLuint value) {return (*pglVertexP4ui)(type, value);}
static void wrap_glVertexP4uiv(GLenum type, const GLuint *value);
static void (APIENTRYP pglVertexP4uiv)(GLenum type, const GLuint *value) = wrap_glVertexP4uiv;
static void wrap_glVertexP4uiv(GLenum type, const GLuint *value) {return trampoline<void>("glVertexP4uiv", nullptr, nullptr, nullptr, &pglVertexP4uiv, type, value);}
extern "C" void APIENTRY glVertexP4uiv(GLenum type, const GLuint *value) {return (*pglVertexP4uiv)(type, value);}
static void wrap_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
static void (APIENTRYP pglVertexPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) = wrap_glVertexPointer;
static void wrap_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) {return trampoline<void>("glVertexPointer", "glVertexPointerEXT", nullptr, nullptr, &pglVertexPointer, size, type, stride, ptr);}
extern "C" void APIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr) {return (*pglVertexPointer)(size, type, stride, ptr);}
static void wrap_glVertexPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
static void (APIENTRYP pglVertexPointerList)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) = wrap_glVertexPointerList;
static void wrap_glVertexPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return trampoline<void>("glVertexPointerList", "glVertexPointerListIBM", nullptr, nullptr, &pglVertexPointerList, size, type, stride, pointer, ptrstride);}
extern "C" void APIENTRY glVertexPointerList(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {return (*pglVertexPointerList)(size, type, stride, pointer, ptrstride);}
static void wrap_glVertexPointerv(GLint size, GLenum type, const void **pointer);
static void (APIENTRYP pglVertexPointerv)(GLint size, GLenum type, const void **pointer) = wrap_glVertexPointerv;
static void wrap_glVertexPointerv(GLint size, GLenum type, const void **pointer) {return trampoline<void>("glVertexPointerv", "glVertexPointervINTEL", nullptr, nullptr, &pglVertexPointerv, size, type, pointer);}
extern "C" void APIENTRY glVertexPointerv(GLint size, GLenum type, const void **pointer) {return (*pglVertexPointerv)(size, type, pointer);}
static void wrap_glVertexStream1d(GLenum stream, GLdouble x);
static void (APIENTRYP pglVertexStream1d)(GLenum stream, GLdouble x) = wrap_glVertexStream1d;
static void wrap_glVertexStream1d(GLenum stream, GLdouble x) {return trampoline<void>("glVertexStream1d", "glVertexStream1dATI", nullptr, nullptr, &pglVertexStream1d, stream, x);}
extern "C" void APIENTRY glVertexStream1d(GLenum stream, GLdouble x) {return (*pglVertexStream1d)(stream, x);}
static void wrap_glVertexStream1dv(GLenum stream, const GLdouble *coords);
static void (APIENTRYP pglVertexStream1dv)(GLenum stream, const GLdouble *coords) = wrap_glVertexStream1dv;
static void wrap_glVertexStream1dv(GLenum stream, const GLdouble *coords) {return trampoline<void>("glVertexStream1dv", "glVertexStream1dvATI", nullptr, nullptr, &pglVertexStream1dv, stream, coords);}
extern "C" void APIENTRY glVertexStream1dv(GLenum stream, const GLdouble *coords) {return (*pglVertexStream1dv)(stream, coords);}
static void wrap_glVertexStream1f(GLenum stream, GLfloat x);
static void (APIENTRYP pglVertexStream1f)(GLenum stream, GLfloat x) = wrap_glVertexStream1f;
static void wrap_glVertexStream1f(GLenum stream, GLfloat x) {return trampoline<void>("glVertexStream1f", "glVertexStream1fATI", nullptr, nullptr, &pglVertexStream1f, stream, x);}
extern "C" void APIENTRY glVertexStream1f(GLenum stream, GLfloat x) {return (*pglVertexStream1f)(stream, x);}
static void wrap_glVertexStream1fv(GLenum stream, const GLfloat *coords);
static void (APIENTRYP pglVertexStream1fv)(GLenum stream, const GLfloat *coords) = wrap_glVertexStream1fv;
static void wrap_glVertexStream1fv(GLenum stream, const GLfloat *coords) {return trampoline<void>("glVertexStream1fv", "glVertexStream1fvATI", nullptr, nullptr, &pglVertexStream1fv, stream, coords);}
extern "C" void APIENTRY glVertexStream1fv(GLenum stream, const GLfloat *coords) {return (*pglVertexStream1fv)(stream, coords);}
static void wrap_glVertexStream1i(GLenum stream, GLint x);
static void (APIENTRYP pglVertexStream1i)(GLenum stream, GLint x) = wrap_glVertexStream1i;
static void wrap_glVertexStream1i(GLenum stream, GLint x) {return trampoline<void>("glVertexStream1i", "glVertexStream1iATI", nullptr, nullptr, &pglVertexStream1i, stream, x);}
extern "C" void APIENTRY glVertexStream1i(GLenum stream, GLint x) {return (*pglVertexStream1i)(stream, x);}
static void wrap_glVertexStream1iv(GLenum stream, const GLint *coords);
static void (APIENTRYP pglVertexStream1iv)(GLenum stream, const GLint *coords) = wrap_glVertexStream1iv;
static void wrap_glVertexStream1iv(GLenum stream, const GLint *coords) {return trampoline<void>("glVertexStream1iv", "glVertexStream1ivATI", nullptr, nullptr, &pglVertexStream1iv, stream, coords);}
extern "C" void APIENTRY glVertexStream1iv(GLenum stream, const GLint *coords) {return (*pglVertexStream1iv)(stream, coords);}
static void wrap_glVertexStream1s(GLenum stream, GLshort x);
static void (APIENTRYP pglVertexStream1s)(GLenum stream, GLshort x) = wrap_glVertexStream1s;
static void wrap_glVertexStream1s(GLenum stream, GLshort x) {return trampoline<void>("glVertexStream1s", "glVertexStream1sATI", nullptr, nullptr, &pglVertexStream1s, stream, x);}
extern "C" void APIENTRY glVertexStream1s(GLenum stream, GLshort x) {return (*pglVertexStream1s)(stream, x);}
static void wrap_glVertexStream1sv(GLenum stream, const GLshort *coords);
static void (APIENTRYP pglVertexStream1sv)(GLenum stream, const GLshort *coords) = wrap_glVertexStream1sv;
static void wrap_glVertexStream1sv(GLenum stream, const GLshort *coords) {return trampoline<void>("glVertexStream1sv", "glVertexStream1svATI", nullptr, nullptr, &pglVertexStream1sv, stream, coords);}
extern "C" void APIENTRY glVertexStream1sv(GLenum stream, const GLshort *coords) {return (*pglVertexStream1sv)(stream, coords);}
static void wrap_glVertexStream2d(GLenum stream, GLdouble x, GLdouble y);
static void (APIENTRYP pglVertexStream2d)(GLenum stream, GLdouble x, GLdouble y) = wrap_glVertexStream2d;
static void wrap_glVertexStream2d(GLenum stream, GLdouble x, GLdouble y) {return trampoline<void>("glVertexStream2d", "glVertexStream2dATI", nullptr, nullptr, &pglVertexStream2d, stream, x, y);}
extern "C" void APIENTRY glVertexStream2d(GLenum stream, GLdouble x, GLdouble y) {return (*pglVertexStream2d)(stream, x, y);}
static void wrap_glVertexStream2dv(GLenum stream, const GLdouble *coords);
static void (APIENTRYP pglVertexStream2dv)(GLenum stream, const GLdouble *coords) = wrap_glVertexStream2dv;
static void wrap_glVertexStream2dv(GLenum stream, const GLdouble *coords) {return trampoline<void>("glVertexStream2dv", "glVertexStream2dvATI", nullptr, nullptr, &pglVertexStream2dv, stream, coords);}
extern "C" void APIENTRY glVertexStream2dv(GLenum stream, const GLdouble *coords) {return (*pglVertexStream2dv)(stream, coords);}
static void wrap_glVertexStream2f(GLenum stream, GLfloat x, GLfloat y);
static void (APIENTRYP pglVertexStream2f)(GLenum stream, GLfloat x, GLfloat y) = wrap_glVertexStream2f;
static void wrap_glVertexStream2f(GLenum stream, GLfloat x, GLfloat y) {return trampoline<void>("glVertexStream2f", "glVertexStream2fATI", nullptr, nullptr, &pglVertexStream2f, stream, x, y);}
extern "C" void APIENTRY glVertexStream2f(GLenum stream, GLfloat x, GLfloat y) {return (*pglVertexStream2f)(stream, x, y);}
static void wrap_glVertexStream2fv(GLenum stream, const GLfloat *coords);
static void (APIENTRYP pglVertexStream2fv)(GLenum stream, const GLfloat *coords) = wrap_glVertexStream2fv;
static void wrap_glVertexStream2fv(GLenum stream, const GLfloat *coords) {return trampoline<void>("glVertexStream2fv", "glVertexStream2fvATI", nullptr, nullptr, &pglVertexStream2fv, stream, coords);}
extern "C" void APIENTRY glVertexStream2fv(GLenum stream, const GLfloat *coords) {return (*pglVertexStream2fv)(stream, coords);}
static void wrap_glVertexStream2i(GLenum stream, GLint x, GLint y);
static void (APIENTRYP pglVertexStream2i)(GLenum stream, GLint x, GLint y) = wrap_glVertexStream2i;
static void wrap_glVertexStream2i(GLenum stream, GLint x, GLint y) {return trampoline<void>("glVertexStream2i", "glVertexStream2iATI", nullptr, nullptr, &pglVertexStream2i, stream, x, y);}
extern "C" void APIENTRY glVertexStream2i(GLenum stream, GLint x, GLint y) {return (*pglVertexStream2i)(stream, x, y);}
static void wrap_glVertexStream2iv(GLenum stream, const GLint *coords);
static void (APIENTRYP pglVertexStream2iv)(GLenum stream, const GLint *coords) = wrap_glVertexStream2iv;
static void wrap_glVertexStream2iv(GLenum stream, const GLint *coords) {return trampoline<void>("glVertexStream2iv", "glVertexStream2ivATI", nullptr, nullptr, &pglVertexStream2iv, stream, coords);}
extern "C" void APIENTRY glVertexStream2iv(GLenum stream, const GLint *coords) {return (*pglVertexStream2iv)(stream, coords);}
static void wrap_glVertexStream2s(GLenum stream, GLshort x, GLshort y);
static void (APIENTRYP pglVertexStream2s)(GLenum stream, GLshort x, GLshort y) = wrap_glVertexStream2s;
static void wrap_glVertexStream2s(GLenum stream, GLshort x, GLshort y) {return trampoline<void>("glVertexStream2s", "glVertexStream2sATI", nullptr, nullptr, &pglVertexStream2s, stream, x, y);}
extern "C" void APIENTRY glVertexStream2s(GLenum stream, GLshort x, GLshort y) {return (*pglVertexStream2s)(stream, x, y);}
static void wrap_glVertexStream2sv(GLenum stream, const GLshort *coords);
static void (APIENTRYP pglVertexStream2sv)(GLenum stream, const GLshort *coords) = wrap_glVertexStream2sv;
static void wrap_glVertexStream2sv(GLenum stream, const GLshort *coords) {return trampoline<void>("glVertexStream2sv", "glVertexStream2svATI", nullptr, nullptr, &pglVertexStream2sv, stream, coords);}
extern "C" void APIENTRY glVertexStream2sv(GLenum stream, const GLshort *coords) {return (*pglVertexStream2sv)(stream, coords);}
static void wrap_glVertexStream3d(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglVertexStream3d)(GLenum stream, GLdouble x, GLdouble y, GLdouble z) = wrap_glVertexStream3d;
static void wrap_glVertexStream3d(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glVertexStream3d", "glVertexStream3dATI", nullptr, nullptr, &pglVertexStream3d, stream, x, y, z);}
extern "C" void APIENTRY glVertexStream3d(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {return (*pglVertexStream3d)(stream, x, y, z);}
static void wrap_glVertexStream3dv(GLenum stream, const GLdouble *coords);
static void (APIENTRYP pglVertexStream3dv)(GLenum stream, const GLdouble *coords) = wrap_glVertexStream3dv;
static void wrap_glVertexStream3dv(GLenum stream, const GLdouble *coords) {return trampoline<void>("glVertexStream3dv", "glVertexStream3dvATI", nullptr, nullptr, &pglVertexStream3dv, stream, coords);}
extern "C" void APIENTRY glVertexStream3dv(GLenum stream, const GLdouble *coords) {return (*pglVertexStream3dv)(stream, coords);}
static void wrap_glVertexStream3f(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglVertexStream3f)(GLenum stream, GLfloat x, GLfloat y, GLfloat z) = wrap_glVertexStream3f;
static void wrap_glVertexStream3f(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glVertexStream3f", "glVertexStream3fATI", nullptr, nullptr, &pglVertexStream3f, stream, x, y, z);}
extern "C" void APIENTRY glVertexStream3f(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {return (*pglVertexStream3f)(stream, x, y, z);}
static void wrap_glVertexStream3fv(GLenum stream, const GLfloat *coords);
static void (APIENTRYP pglVertexStream3fv)(GLenum stream, const GLfloat *coords) = wrap_glVertexStream3fv;
static void wrap_glVertexStream3fv(GLenum stream, const GLfloat *coords) {return trampoline<void>("glVertexStream3fv", "glVertexStream3fvATI", nullptr, nullptr, &pglVertexStream3fv, stream, coords);}
extern "C" void APIENTRY glVertexStream3fv(GLenum stream, const GLfloat *coords) {return (*pglVertexStream3fv)(stream, coords);}
static void wrap_glVertexStream3i(GLenum stream, GLint x, GLint y, GLint z);
static void (APIENTRYP pglVertexStream3i)(GLenum stream, GLint x, GLint y, GLint z) = wrap_glVertexStream3i;
static void wrap_glVertexStream3i(GLenum stream, GLint x, GLint y, GLint z) {return trampoline<void>("glVertexStream3i", "glVertexStream3iATI", nullptr, nullptr, &pglVertexStream3i, stream, x, y, z);}
extern "C" void APIENTRY glVertexStream3i(GLenum stream, GLint x, GLint y, GLint z) {return (*pglVertexStream3i)(stream, x, y, z);}
static void wrap_glVertexStream3iv(GLenum stream, const GLint *coords);
static void (APIENTRYP pglVertexStream3iv)(GLenum stream, const GLint *coords) = wrap_glVertexStream3iv;
static void wrap_glVertexStream3iv(GLenum stream, const GLint *coords) {return trampoline<void>("glVertexStream3iv", "glVertexStream3ivATI", nullptr, nullptr, &pglVertexStream3iv, stream, coords);}
extern "C" void APIENTRY glVertexStream3iv(GLenum stream, const GLint *coords) {return (*pglVertexStream3iv)(stream, coords);}
static void wrap_glVertexStream3s(GLenum stream, GLshort x, GLshort y, GLshort z);
static void (APIENTRYP pglVertexStream3s)(GLenum stream, GLshort x, GLshort y, GLshort z) = wrap_glVertexStream3s;
static void wrap_glVertexStream3s(GLenum stream, GLshort x, GLshort y, GLshort z) {return trampoline<void>("glVertexStream3s", "glVertexStream3sATI", nullptr, nullptr, &pglVertexStream3s, stream, x, y, z);}
extern "C" void APIENTRY glVertexStream3s(GLenum stream, GLshort x, GLshort y, GLshort z) {return (*pglVertexStream3s)(stream, x, y, z);}
static void wrap_glVertexStream3sv(GLenum stream, const GLshort *coords);
static void (APIENTRYP pglVertexStream3sv)(GLenum stream, const GLshort *coords) = wrap_glVertexStream3sv;
static void wrap_glVertexStream3sv(GLenum stream, const GLshort *coords) {return trampoline<void>("glVertexStream3sv", "glVertexStream3svATI", nullptr, nullptr, &pglVertexStream3sv, stream, coords);}
extern "C" void APIENTRY glVertexStream3sv(GLenum stream, const GLshort *coords) {return (*pglVertexStream3sv)(stream, coords);}
static void wrap_glVertexStream4d(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglVertexStream4d)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glVertexStream4d;
static void wrap_glVertexStream4d(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glVertexStream4d", "glVertexStream4dATI", nullptr, nullptr, &pglVertexStream4d, stream, x, y, z, w);}
extern "C" void APIENTRY glVertexStream4d(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglVertexStream4d)(stream, x, y, z, w);}
static void wrap_glVertexStream4dv(GLenum stream, const GLdouble *coords);
static void (APIENTRYP pglVertexStream4dv)(GLenum stream, const GLdouble *coords) = wrap_glVertexStream4dv;
static void wrap_glVertexStream4dv(GLenum stream, const GLdouble *coords) {return trampoline<void>("glVertexStream4dv", "glVertexStream4dvATI", nullptr, nullptr, &pglVertexStream4dv, stream, coords);}
extern "C" void APIENTRY glVertexStream4dv(GLenum stream, const GLdouble *coords) {return (*pglVertexStream4dv)(stream, coords);}
static void wrap_glVertexStream4f(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglVertexStream4f)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glVertexStream4f;
static void wrap_glVertexStream4f(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glVertexStream4f", "glVertexStream4fATI", nullptr, nullptr, &pglVertexStream4f, stream, x, y, z, w);}
extern "C" void APIENTRY glVertexStream4f(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglVertexStream4f)(stream, x, y, z, w);}
static void wrap_glVertexStream4fv(GLenum stream, const GLfloat *coords);
static void (APIENTRYP pglVertexStream4fv)(GLenum stream, const GLfloat *coords) = wrap_glVertexStream4fv;
static void wrap_glVertexStream4fv(GLenum stream, const GLfloat *coords) {return trampoline<void>("glVertexStream4fv", "glVertexStream4fvATI", nullptr, nullptr, &pglVertexStream4fv, stream, coords);}
extern "C" void APIENTRY glVertexStream4fv(GLenum stream, const GLfloat *coords) {return (*pglVertexStream4fv)(stream, coords);}
static void wrap_glVertexStream4i(GLenum stream, GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglVertexStream4i)(GLenum stream, GLint x, GLint y, GLint z, GLint w) = wrap_glVertexStream4i;
static void wrap_glVertexStream4i(GLenum stream, GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glVertexStream4i", "glVertexStream4iATI", nullptr, nullptr, &pglVertexStream4i, stream, x, y, z, w);}
extern "C" void APIENTRY glVertexStream4i(GLenum stream, GLint x, GLint y, GLint z, GLint w) {return (*pglVertexStream4i)(stream, x, y, z, w);}
static void wrap_glVertexStream4iv(GLenum stream, const GLint *coords);
static void (APIENTRYP pglVertexStream4iv)(GLenum stream, const GLint *coords) = wrap_glVertexStream4iv;
static void wrap_glVertexStream4iv(GLenum stream, const GLint *coords) {return trampoline<void>("glVertexStream4iv", "glVertexStream4ivATI", nullptr, nullptr, &pglVertexStream4iv, stream, coords);}
extern "C" void APIENTRY glVertexStream4iv(GLenum stream, const GLint *coords) {return (*pglVertexStream4iv)(stream, coords);}
static void wrap_glVertexStream4s(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
static void (APIENTRYP pglVertexStream4s)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) = wrap_glVertexStream4s;
static void wrap_glVertexStream4s(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {return trampoline<void>("glVertexStream4s", "glVertexStream4sATI", nullptr, nullptr, &pglVertexStream4s, stream, x, y, z, w);}
extern "C" void APIENTRY glVertexStream4s(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {return (*pglVertexStream4s)(stream, x, y, z, w);}
static void wrap_glVertexStream4sv(GLenum stream, const GLshort *coords);
static void (APIENTRYP pglVertexStream4sv)(GLenum stream, const GLshort *coords) = wrap_glVertexStream4sv;
static void wrap_glVertexStream4sv(GLenum stream, const GLshort *coords) {return trampoline<void>("glVertexStream4sv", "glVertexStream4svATI", nullptr, nullptr, &pglVertexStream4sv, stream, coords);}
extern "C" void APIENTRY glVertexStream4sv(GLenum stream, const GLshort *coords) {return (*pglVertexStream4sv)(stream, coords);}
static void wrap_glVertexWeightPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglVertexWeightPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glVertexWeightPointer;
static void wrap_glVertexWeightPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glVertexWeightPointer", "glVertexWeightPointerEXT", nullptr, nullptr, &pglVertexWeightPointer, size, type, stride, pointer);}
extern "C" void APIENTRY glVertexWeightPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglVertexWeightPointer)(size, type, stride, pointer);}
static void wrap_glVertexWeightf(GLfloat weight);
static void (APIENTRYP pglVertexWeightf)(GLfloat weight) = wrap_glVertexWeightf;
static void wrap_glVertexWeightf(GLfloat weight) {return trampoline<void>("glVertexWeightf", "glVertexWeightfEXT", nullptr, nullptr, &pglVertexWeightf, weight);}
extern "C" void APIENTRY glVertexWeightf(GLfloat weight) {return (*pglVertexWeightf)(weight);}
static void wrap_glVertexWeightfv(const GLfloat *weight);
static void (APIENTRYP pglVertexWeightfv)(const GLfloat *weight) = wrap_glVertexWeightfv;
static void wrap_glVertexWeightfv(const GLfloat *weight) {return trampoline<void>("glVertexWeightfv", "glVertexWeightfvEXT", nullptr, nullptr, &pglVertexWeightfv, weight);}
extern "C" void APIENTRY glVertexWeightfv(const GLfloat *weight) {return (*pglVertexWeightfv)(weight);}
static void wrap_glVertexWeighth(GLhalfNV weight);
static void (APIENTRYP pglVertexWeighth)(GLhalfNV weight) = wrap_glVertexWeighth;
static void wrap_glVertexWeighth(GLhalfNV weight) {return trampoline<void>("glVertexWeighth", "glVertexWeighthNV", nullptr, nullptr, &pglVertexWeighth, weight);}
extern "C" void APIENTRY glVertexWeighth(GLhalfNV weight) {return (*pglVertexWeighth)(weight);}
static void wrap_glVertexWeighthv(const GLhalfNV *weight);
static void (APIENTRYP pglVertexWeighthv)(const GLhalfNV *weight) = wrap_glVertexWeighthv;
static void wrap_glVertexWeighthv(const GLhalfNV *weight) {return trampoline<void>("glVertexWeighthv", "glVertexWeighthvNV", nullptr, nullptr, &pglVertexWeighthv, weight);}
extern "C" void APIENTRY glVertexWeighthv(const GLhalfNV *weight) {return (*pglVertexWeighthv)(weight);}
static GLenum wrap_glVideoCapture(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
static GLenum (APIENTRYP pglVideoCapture)(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) = wrap_glVideoCapture;
static GLenum wrap_glVideoCapture(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) {return trampoline<GLenum>("glVideoCapture", "glVideoCaptureNV", nullptr, nullptr, &pglVideoCapture, video_capture_slot, sequence_num, capture_time);}
extern "C" GLenum APIENTRY glVideoCapture(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) {return (*pglVideoCapture)(video_capture_slot, sequence_num, capture_time);}
static void wrap_glVideoCaptureStreamParameterdv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
static void (APIENTRYP pglVideoCaptureStreamParameterdv)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) = wrap_glVideoCaptureStreamParameterdv;
static void wrap_glVideoCaptureStreamParameterdv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) {return trampoline<void>("glVideoCaptureStreamParameterdv", "glVideoCaptureStreamParameterdvNV", nullptr, nullptr, &pglVideoCaptureStreamParameterdv, video_capture_slot, stream, pname, params);}
extern "C" void APIENTRY glVideoCaptureStreamParameterdv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) {return (*pglVideoCaptureStreamParameterdv)(video_capture_slot, stream, pname, params);}
static void wrap_glVideoCaptureStreamParameterfv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
static void (APIENTRYP pglVideoCaptureStreamParameterfv)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) = wrap_glVideoCaptureStreamParameterfv;
static void wrap_glVideoCaptureStreamParameterfv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) {return trampoline<void>("glVideoCaptureStreamParameterfv", "glVideoCaptureStreamParameterfvNV", nullptr, nullptr, &pglVideoCaptureStreamParameterfv, video_capture_slot, stream, pname, params);}
extern "C" void APIENTRY glVideoCaptureStreamParameterfv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) {return (*pglVideoCaptureStreamParameterfv)(video_capture_slot, stream, pname, params);}
static void wrap_glVideoCaptureStreamParameteriv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
static void (APIENTRYP pglVideoCaptureStreamParameteriv)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) = wrap_glVideoCaptureStreamParameteriv;
static void wrap_glVideoCaptureStreamParameteriv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) {return trampoline<void>("glVideoCaptureStreamParameteriv", "glVideoCaptureStreamParameterivNV", nullptr, nullptr, &pglVideoCaptureStreamParameteriv, video_capture_slot, stream, pname, params);}
extern "C" void APIENTRY glVideoCaptureStreamParameteriv(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) {return (*pglVideoCaptureStreamParameteriv)(video_capture_slot, stream, pname, params);}
static void wrap_glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
static void (APIENTRYP pglViewport)(GLint x, GLint y, GLsizei width, GLsizei height) = wrap_glViewport;
static void wrap_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {return trampoline<void>("glViewport", nullptr, nullptr, nullptr, &pglViewport, x, y, width, height);}
extern "C" void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {return (*pglViewport)(x, y, width, height);}
static void wrap_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
static void (APIENTRYP pglViewportArrayv)(GLuint first, GLsizei count, const GLfloat *v) = wrap_glViewportArrayv;
static void wrap_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {return trampoline<void>("glViewportArrayv", nullptr, nullptr, nullptr, &pglViewportArrayv, first, count, v);}
extern "C" void APIENTRY glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {return (*pglViewportArrayv)(first, count, v);}
static void wrap_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
static void (APIENTRYP pglViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) = wrap_glViewportIndexedf;
static void wrap_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {return trampoline<void>("glViewportIndexedf", nullptr, nullptr, nullptr, &pglViewportIndexedf, index, x, y, w, h);}
extern "C" void APIENTRY glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {return (*pglViewportIndexedf)(index, x, y, w, h);}
static void wrap_glViewportIndexedfv(GLuint index, const GLfloat *v);
static void (APIENTRYP pglViewportIndexedfv)(GLuint index, const GLfloat *v) = wrap_glViewportIndexedfv;
static void wrap_glViewportIndexedfv(GLuint index, const GLfloat *v) {return trampoline<void>("glViewportIndexedfv", nullptr, nullptr, nullptr, &pglViewportIndexedfv, index, v);}
extern "C" void APIENTRY glViewportIndexedfv(GLuint index, const GLfloat *v) {return (*pglViewportIndexedfv)(index, v);}
static void wrap_glViewportPositionWScale(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
static void (APIENTRYP pglViewportPositionWScale)(GLuint index, GLfloat xcoeff, GLfloat ycoeff) = wrap_glViewportPositionWScale;
static void wrap_glViewportPositionWScale(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {return trampoline<void>("glViewportPositionWScale", "glViewportPositionWScaleNV", nullptr, nullptr, &pglViewportPositionWScale, index, xcoeff, ycoeff);}
extern "C" void APIENTRY glViewportPositionWScale(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {return (*pglViewportPositionWScale)(index, xcoeff, ycoeff);}
static void wrap_glViewportSwizzle(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
static void (APIENTRYP pglViewportSwizzle)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) = wrap_glViewportSwizzle;
static void wrap_glViewportSwizzle(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {return trampoline<void>("glViewportSwizzle", "glViewportSwizzleNV", nullptr, nullptr, &pglViewportSwizzle, index, swizzlex, swizzley, swizzlez, swizzlew);}
extern "C" void APIENTRY glViewportSwizzle(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {return (*pglViewportSwizzle)(index, swizzlex, swizzley, swizzlez, swizzlew);}
static void wrap_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
static void (APIENTRYP pglWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) = wrap_glWaitSync;
static void wrap_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {return trampoline<void>("glWaitSync", nullptr, nullptr, nullptr, &pglWaitSync, sync, flags, timeout);}
extern "C" void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {return (*pglWaitSync)(sync, flags, timeout);}
static void wrap_glWeightPaths(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
static void (APIENTRYP pglWeightPaths)(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) = wrap_glWeightPaths;
static void wrap_glWeightPaths(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) {return trampoline<void>("glWeightPaths", "glWeightPathsNV", nullptr, nullptr, &pglWeightPaths, resultPath, numPaths, paths, weights);}
extern "C" void APIENTRY glWeightPaths(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) {return (*pglWeightPaths)(resultPath, numPaths, paths, weights);}
static void wrap_glWeightPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
static void (APIENTRYP pglWeightPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer) = wrap_glWeightPointer;
static void wrap_glWeightPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return trampoline<void>("glWeightPointer", "glWeightPointerARB", nullptr, nullptr, &pglWeightPointer, size, type, stride, pointer);}
extern "C" void APIENTRY glWeightPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {return (*pglWeightPointer)(size, type, stride, pointer);}
static void wrap_glWeightbv(GLint size, const GLbyte *weights);
static void (APIENTRYP pglWeightbv)(GLint size, const GLbyte *weights) = wrap_glWeightbv;
static void wrap_glWeightbv(GLint size, const GLbyte *weights) {return trampoline<void>("glWeightbv", "glWeightbvARB", nullptr, nullptr, &pglWeightbv, size, weights);}
extern "C" void APIENTRY glWeightbv(GLint size, const GLbyte *weights) {return (*pglWeightbv)(size, weights);}
static void wrap_glWeightdv(GLint size, const GLdouble *weights);
static void (APIENTRYP pglWeightdv)(GLint size, const GLdouble *weights) = wrap_glWeightdv;
static void wrap_glWeightdv(GLint size, const GLdouble *weights) {return trampoline<void>("glWeightdv", "glWeightdvARB", nullptr, nullptr, &pglWeightdv, size, weights);}
extern "C" void APIENTRY glWeightdv(GLint size, const GLdouble *weights) {return (*pglWeightdv)(size, weights);}
static void wrap_glWeightfv(GLint size, const GLfloat *weights);
static void (APIENTRYP pglWeightfv)(GLint size, const GLfloat *weights) = wrap_glWeightfv;
static void wrap_glWeightfv(GLint size, const GLfloat *weights) {return trampoline<void>("glWeightfv", "glWeightfvARB", nullptr, nullptr, &pglWeightfv, size, weights);}
extern "C" void APIENTRY glWeightfv(GLint size, const GLfloat *weights) {return (*pglWeightfv)(size, weights);}
static void wrap_glWeightiv(GLint size, const GLint *weights);
static void (APIENTRYP pglWeightiv)(GLint size, const GLint *weights) = wrap_glWeightiv;
static void wrap_glWeightiv(GLint size, const GLint *weights) {return trampoline<void>("glWeightiv", "glWeightivARB", nullptr, nullptr, &pglWeightiv, size, weights);}
extern "C" void APIENTRY glWeightiv(GLint size, const GLint *weights) {return (*pglWeightiv)(size, weights);}
static void wrap_glWeightsv(GLint size, const GLshort *weights);
static void (APIENTRYP pglWeightsv)(GLint size, const GLshort *weights) = wrap_glWeightsv;
static void wrap_glWeightsv(GLint size, const GLshort *weights) {return trampoline<void>("glWeightsv", "glWeightsvARB", nullptr, nullptr, &pglWeightsv, size, weights);}
extern "C" void APIENTRY glWeightsv(GLint size, const GLshort *weights) {return (*pglWeightsv)(size, weights);}
static void wrap_glWeightubv(GLint size, const GLubyte *weights);
static void (APIENTRYP pglWeightubv)(GLint size, const GLubyte *weights) = wrap_glWeightubv;
static void wrap_glWeightubv(GLint size, const GLubyte *weights) {return trampoline<void>("glWeightubv", "glWeightubvARB", nullptr, nullptr, &pglWeightubv, size, weights);}
extern "C" void APIENTRY glWeightubv(GLint size, const GLubyte *weights) {return (*pglWeightubv)(size, weights);}
static void wrap_glWeightuiv(GLint size, const GLuint *weights);
static void (APIENTRYP pglWeightuiv)(GLint size, const GLuint *weights) = wrap_glWeightuiv;
static void wrap_glWeightuiv(GLint size, const GLuint *weights) {return trampoline<void>("glWeightuiv", "glWeightuivARB", nullptr, nullptr, &pglWeightuiv, size, weights);}
extern "C" void APIENTRY glWeightuiv(GLint size, const GLuint *weights) {return (*pglWeightuiv)(size, weights);}
static void wrap_glWeightusv(GLint size, const GLushort *weights);
static void (APIENTRYP pglWeightusv)(GLint size, const GLushort *weights) = wrap_glWeightusv;
static void wrap_glWeightusv(GLint size, const GLushort *weights) {return trampoline<void>("glWeightusv", "glWeightusvARB", nullptr, nullptr, &pglWeightusv, size, weights);}
extern "C" void APIENTRY glWeightusv(GLint size, const GLushort *weights) {return (*pglWeightusv)(size, weights);}
static void wrap_glWindowPos2d(GLdouble x, GLdouble y);
static void (APIENTRYP pglWindowPos2d)(GLdouble x, GLdouble y) = wrap_glWindowPos2d;
static void wrap_glWindowPos2d(GLdouble x, GLdouble y) {return trampoline<void>("glWindowPos2d", "glWindowPos2dARB", "glWindowPos2dMESA", nullptr, &pglWindowPos2d, x, y);}
extern "C" void APIENTRY glWindowPos2d(GLdouble x, GLdouble y) {return (*pglWindowPos2d)(x, y);}
static void wrap_glWindowPos2dv(const GLdouble *v);
static void (APIENTRYP pglWindowPos2dv)(const GLdouble *v) = wrap_glWindowPos2dv;
static void wrap_glWindowPos2dv(const GLdouble *v) {return trampoline<void>("glWindowPos2dv", "glWindowPos2dvARB", "glWindowPos2dvMESA", nullptr, &pglWindowPos2dv, v);}
extern "C" void APIENTRY glWindowPos2dv(const GLdouble *v) {return (*pglWindowPos2dv)(v);}
static void wrap_glWindowPos2f(GLfloat x, GLfloat y);
static void (APIENTRYP pglWindowPos2f)(GLfloat x, GLfloat y) = wrap_glWindowPos2f;
static void wrap_glWindowPos2f(GLfloat x, GLfloat y) {return trampoline<void>("glWindowPos2f", "glWindowPos2fARB", "glWindowPos2fMESA", nullptr, &pglWindowPos2f, x, y);}
extern "C" void APIENTRY glWindowPos2f(GLfloat x, GLfloat y) {return (*pglWindowPos2f)(x, y);}
static void wrap_glWindowPos2fv(const GLfloat *v);
static void (APIENTRYP pglWindowPos2fv)(const GLfloat *v) = wrap_glWindowPos2fv;
static void wrap_glWindowPos2fv(const GLfloat *v) {return trampoline<void>("glWindowPos2fv", "glWindowPos2fvARB", "glWindowPos2fvMESA", nullptr, &pglWindowPos2fv, v);}
extern "C" void APIENTRY glWindowPos2fv(const GLfloat *v) {return (*pglWindowPos2fv)(v);}
static void wrap_glWindowPos2i(GLint x, GLint y);
static void (APIENTRYP pglWindowPos2i)(GLint x, GLint y) = wrap_glWindowPos2i;
static void wrap_glWindowPos2i(GLint x, GLint y) {return trampoline<void>("glWindowPos2i", "glWindowPos2iARB", "glWindowPos2iMESA", nullptr, &pglWindowPos2i, x, y);}
extern "C" void APIENTRY glWindowPos2i(GLint x, GLint y) {return (*pglWindowPos2i)(x, y);}
static void wrap_glWindowPos2iv(const GLint *v);
static void (APIENTRYP pglWindowPos2iv)(const GLint *v) = wrap_glWindowPos2iv;
static void wrap_glWindowPos2iv(const GLint *v) {return trampoline<void>("glWindowPos2iv", "glWindowPos2ivARB", "glWindowPos2ivMESA", nullptr, &pglWindowPos2iv, v);}
extern "C" void APIENTRY glWindowPos2iv(const GLint *v) {return (*pglWindowPos2iv)(v);}
static void wrap_glWindowPos2s(GLshort x, GLshort y);
static void (APIENTRYP pglWindowPos2s)(GLshort x, GLshort y) = wrap_glWindowPos2s;
static void wrap_glWindowPos2s(GLshort x, GLshort y) {return trampoline<void>("glWindowPos2s", "glWindowPos2sARB", "glWindowPos2sMESA", nullptr, &pglWindowPos2s, x, y);}
extern "C" void APIENTRY glWindowPos2s(GLshort x, GLshort y) {return (*pglWindowPos2s)(x, y);}
static void wrap_glWindowPos2sv(const GLshort *v);
static void (APIENTRYP pglWindowPos2sv)(const GLshort *v) = wrap_glWindowPos2sv;
static void wrap_glWindowPos2sv(const GLshort *v) {return trampoline<void>("glWindowPos2sv", "glWindowPos2svARB", "glWindowPos2svMESA", nullptr, &pglWindowPos2sv, v);}
extern "C" void APIENTRY glWindowPos2sv(const GLshort *v) {return (*pglWindowPos2sv)(v);}
static void wrap_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
static void (APIENTRYP pglWindowPos3d)(GLdouble x, GLdouble y, GLdouble z) = wrap_glWindowPos3d;
static void wrap_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {return trampoline<void>("glWindowPos3d", "glWindowPos3dARB", "glWindowPos3dMESA", nullptr, &pglWindowPos3d, x, y, z);}
extern "C" void APIENTRY glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {return (*pglWindowPos3d)(x, y, z);}
static void wrap_glWindowPos3dv(const GLdouble *v);
static void (APIENTRYP pglWindowPos3dv)(const GLdouble *v) = wrap_glWindowPos3dv;
static void wrap_glWindowPos3dv(const GLdouble *v) {return trampoline<void>("glWindowPos3dv", "glWindowPos3dvARB", "glWindowPos3dvMESA", nullptr, &pglWindowPos3dv, v);}
extern "C" void APIENTRY glWindowPos3dv(const GLdouble *v) {return (*pglWindowPos3dv)(v);}
static void wrap_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
static void (APIENTRYP pglWindowPos3f)(GLfloat x, GLfloat y, GLfloat z) = wrap_glWindowPos3f;
static void wrap_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {return trampoline<void>("glWindowPos3f", "glWindowPos3fARB", "glWindowPos3fMESA", nullptr, &pglWindowPos3f, x, y, z);}
extern "C" void APIENTRY glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {return (*pglWindowPos3f)(x, y, z);}
static void wrap_glWindowPos3fv(const GLfloat *v);
static void (APIENTRYP pglWindowPos3fv)(const GLfloat *v) = wrap_glWindowPos3fv;
static void wrap_glWindowPos3fv(const GLfloat *v) {return trampoline<void>("glWindowPos3fv", "glWindowPos3fvARB", "glWindowPos3fvMESA", nullptr, &pglWindowPos3fv, v);}
extern "C" void APIENTRY glWindowPos3fv(const GLfloat *v) {return (*pglWindowPos3fv)(v);}
static void wrap_glWindowPos3i(GLint x, GLint y, GLint z);
static void (APIENTRYP pglWindowPos3i)(GLint x, GLint y, GLint z) = wrap_glWindowPos3i;
static void wrap_glWindowPos3i(GLint x, GLint y, GLint z) {return trampoline<void>("glWindowPos3i", "glWindowPos3iARB", "glWindowPos3iMESA", nullptr, &pglWindowPos3i, x, y, z);}
extern "C" void APIENTRY glWindowPos3i(GLint x, GLint y, GLint z) {return (*pglWindowPos3i)(x, y, z);}
static void wrap_glWindowPos3iv(const GLint *v);
static void (APIENTRYP pglWindowPos3iv)(const GLint *v) = wrap_glWindowPos3iv;
static void wrap_glWindowPos3iv(const GLint *v) {return trampoline<void>("glWindowPos3iv", "glWindowPos3ivARB", "glWindowPos3ivMESA", nullptr, &pglWindowPos3iv, v);}
extern "C" void APIENTRY glWindowPos3iv(const GLint *v) {return (*pglWindowPos3iv)(v);}
static void wrap_glWindowPos3s(GLshort x, GLshort y, GLshort z);
static void (APIENTRYP pglWindowPos3s)(GLshort x, GLshort y, GLshort z) = wrap_glWindowPos3s;
static void wrap_glWindowPos3s(GLshort x, GLshort y, GLshort z) {return trampoline<void>("glWindowPos3s", "glWindowPos3sARB", "glWindowPos3sMESA", nullptr, &pglWindowPos3s, x, y, z);}
extern "C" void APIENTRY glWindowPos3s(GLshort x, GLshort y, GLshort z) {return (*pglWindowPos3s)(x, y, z);}
static void wrap_glWindowPos3sv(const GLshort *v);
static void (APIENTRYP pglWindowPos3sv)(const GLshort *v) = wrap_glWindowPos3sv;
static void wrap_glWindowPos3sv(const GLshort *v) {return trampoline<void>("glWindowPos3sv", "glWindowPos3svARB", "glWindowPos3svMESA", nullptr, &pglWindowPos3sv, v);}
extern "C" void APIENTRY glWindowPos3sv(const GLshort *v) {return (*pglWindowPos3sv)(v);}
static void wrap_glWindowPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
static void (APIENTRYP pglWindowPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = wrap_glWindowPos4d;
static void wrap_glWindowPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return trampoline<void>("glWindowPos4d", "glWindowPos4dMESA", nullptr, nullptr, &pglWindowPos4d, x, y, z, w);}
extern "C" void APIENTRY glWindowPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {return (*pglWindowPos4d)(x, y, z, w);}
static void wrap_glWindowPos4dv(const GLdouble *v);
static void (APIENTRYP pglWindowPos4dv)(const GLdouble *v) = wrap_glWindowPos4dv;
static void wrap_glWindowPos4dv(const GLdouble *v) {return trampoline<void>("glWindowPos4dv", "glWindowPos4dvMESA", nullptr, nullptr, &pglWindowPos4dv, v);}
extern "C" void APIENTRY glWindowPos4dv(const GLdouble *v) {return (*pglWindowPos4dv)(v);}
static void wrap_glWindowPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
static void (APIENTRYP pglWindowPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = wrap_glWindowPos4f;
static void wrap_glWindowPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return trampoline<void>("glWindowPos4f", "glWindowPos4fMESA", nullptr, nullptr, &pglWindowPos4f, x, y, z, w);}
extern "C" void APIENTRY glWindowPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {return (*pglWindowPos4f)(x, y, z, w);}
static void wrap_glWindowPos4fv(const GLfloat *v);
static void (APIENTRYP pglWindowPos4fv)(const GLfloat *v) = wrap_glWindowPos4fv;
static void wrap_glWindowPos4fv(const GLfloat *v) {return trampoline<void>("glWindowPos4fv", "glWindowPos4fvMESA", nullptr, nullptr, &pglWindowPos4fv, v);}
extern "C" void APIENTRY glWindowPos4fv(const GLfloat *v) {return (*pglWindowPos4fv)(v);}
static void wrap_glWindowPos4i(GLint x, GLint y, GLint z, GLint w);
static void (APIENTRYP pglWindowPos4i)(GLint x, GLint y, GLint z, GLint w) = wrap_glWindowPos4i;
static void wrap_glWindowPos4i(GLint x, GLint y, GLint z, GLint w) {return trampoline<void>("glWindowPos4i", "glWindowPos4iMESA", nullptr, nullptr, &pglWindowPos4i, x, y, z, w);}
extern "C" void APIENTRY glWindowPos4i(GLint x, GLint y, GLint z, GLint w) {return (*pglWindowPos4i)(x, y, z, w);}
static void wrap_glWindowPos4iv(const GLint *v);
static void (APIENTRYP pglWindowPos4iv)(const GLint *v) = wrap_glWindowPos4iv;
static void wrap_glWindowPos4iv(const GLint *v) {return trampoline<void>("glWindowPos4iv", "glWindowPos4ivMESA", nullptr, nullptr, &pglWindowPos4iv, v);}
extern "C" void APIENTRY glWindowPos4iv(const GLint *v) {return (*pglWindowPos4iv)(v);}
static void wrap_glWindowPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
static void (APIENTRYP pglWindowPos4s)(GLshort x, GLshort y, GLshort z, GLshort w) = wrap_glWindowPos4s;
static void wrap_glWindowPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {return trampoline<void>("glWindowPos4s", "glWindowPos4sMESA", nullptr, nullptr, &pglWindowPos4s, x, y, z, w);}
extern "C" void APIENTRY glWindowPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {return (*pglWindowPos4s)(x, y, z, w);}
static void wrap_glWindowPos4sv(const GLshort *v);
static void (APIENTRYP pglWindowPos4sv)(const GLshort *v) = wrap_glWindowPos4sv;
static void wrap_glWindowPos4sv(const GLshort *v) {return trampoline<void>("glWindowPos4sv", "glWindowPos4svMESA", nullptr, nullptr, &pglWindowPos4sv, v);}
extern "C" void APIENTRY glWindowPos4sv(const GLshort *v) {return (*pglWindowPos4sv)(v);}
static void wrap_glWindowRectangles(GLenum mode, GLsizei count, const GLint *box);
static void (APIENTRYP pglWindowRectangles)(GLenum mode, GLsizei count, const GLint *box) = wrap_glWindowRectangles;
static void wrap_glWindowRectangles(GLenum mode, GLsizei count, const GLint *box) {return trampoline<void>("glWindowRectangles", "glWindowRectanglesEXT", nullptr, nullptr, &pglWindowRectangles, mode, count, box);}
extern "C" void APIENTRY glWindowRectangles(GLenum mode, GLsizei count, const GLint *box) {return (*pglWindowRectangles)(mode, count, box);}
static void wrap_glWriteMask(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
static void (APIENTRYP pglWriteMask)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) = wrap_glWriteMask;
static void wrap_glWriteMask(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {return trampoline<void>("glWriteMask", "glWriteMaskEXT", nullptr, nullptr, &pglWriteMask, res, in, outX, outY, outZ, outW);}
extern "C" void APIENTRY glWriteMask(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {return (*pglWriteMask)(res, in, outX, outY, outZ, outW);}

#endif // DECAF_GLBINDING
#endif // !DECAF_NOGL
